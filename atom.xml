<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US">
  <id>https://melogra.github.io/blog/</id>
  <title>yams</title>
  <subtitle>记录些笔记、写点文章</subtitle>
  <updated>2021-07-09T16:02:53.804Z</updated>
  <generator>@mr-hope/vuepress-plugin-feed</generator>
  <link rel="self" href="https://melogra.github.io/blog/atom.xml"/>
  <link rel="alternate" href="https://melogra.github.io/blog/"/>
  <entry>
    <title type="html">Home</title>
    <id>https://melogra.github.io/blog/</id>
    <link href="https://melogra.github.io/blog/"/>
    <updated>2021-01-21T08:13:26.000Z</updated>
    <contributor>
      <name/>
    </contributor>
    <published>2019-11-19T07:30:24.000Z</published>
  </entry>
  <entry>
    <title type="html">词法作用域</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-2%20%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-2%20%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="词法作用域"> 词法作用域</h1>
<h2 id="词法作用域-2"> 词法作用域</h2>
<p>我们将“作用域”定义为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。</p>
<p>作用域有两种主要的工作模式：</p>
<ul>
<li>
<p><strong>词法作用域</strong></p>
<p>这是最为普遍的，被大多数编程语言所采用。</p>
<p>简单来说，词法作用域就是由写代码时变量写在哪里来决定作用域。</p>
<p>另外，JavaScript也提供了修改作用域的方法，比如<code>eval</code>、<code>with</code>。</p>
</li>
<li>
<p><strong>动态作用域</strong>：比如bash脚本、Perl等。</p>
</li>
</ul>
<p>考虑以下代码：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>a</span><span>)</span> <span>{</span> 
  <span>var</span> b <span>=</span> a <span>*</span> <span>2</span><span>;</span>
	<span>function</span> <span>bar</span><span>(</span><span>c</span><span>)</span> <span>{</span> 
    console<span>.</span><span>log</span><span>(</span> a<span>,</span> b<span>,</span> c <span>)</span><span>;</span>
	<span>}</span>
	<span>bar</span><span>(</span> b <span>*</span> <span>3</span> <span>)</span><span>;</span>
<span>}</span>
<span>foo</span><span>(</span> <span>2</span> <span>)</span><span>;</span> <span>// 2, 4, 12</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>其作用域可表示为下图，由此可见，代码的写法决定了其作用域。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmbrhvnk6xj30la0d8abt.jpg" alt="image-20210104165125637" style="zoom:50%;" />
<p><strong>作用域查找会在找到第一个匹配的标识符时停止</strong>。</p>
<p>在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”(内部的标识符“遮蔽”了外部的标识符)。</p>
<p>抛开遮蔽效应， 作用域查找始终从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止。</p>
<h2 id="用eval和with修改作用域"> 用<code>eval</code>和<code>with</code>修改作用域</h2>
<h3 id="eval"> eval</h3>
<p>考虑以下代码：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>str<span>,</span> a</span><span>)</span> <span>{</span>
  <span>eval</span><span>(</span> str <span>)</span><span>;</span> <span>// 欺骗!</span>
  console<span>.</span><span>log</span><span>(</span> a<span>,</span> b <span>)</span><span>;</span>
<span>}</span>
<span>var</span> b <span>=</span> <span>2</span><span>;</span>
<span>foo</span><span>(</span> <span>"var b = 3;"</span><span>,</span> <span>1</span> <span>)</span><span>;</span> <span>// 1, 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><strong>默认情况下，如果 <code>eval</code> 中所执行的代码包含有一个或多个声明(无论是变量还是函数)，就会对 <code>eval</code> 所处的词法作用域进行修改。</strong></p>
<p><strong>实际上，在严格模式下，eval函数运行时有自己的词法作用域，这意味着它无法修改eval函数所处的作用域。</strong></p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>str</span><span>)</span> <span>{</span>
	<span>"use strict"</span><span>;</span>
	<span>eval</span><span>(</span> str <span>)</span><span>;</span>
	console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// ReferenceError: a is not defined</span>
<span>}</span>
<span>foo</span><span>(</span> <span>"var a = 2"</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>与<code>eval</code>相似的函数：</p>
<ul>
<li>
<p><code>setTimeout</code> 和 <code>setInterval</code> 函数的第一个参数可以是字符串，字符串的内容可以被解释为一段动态生成的函数代码。</p>
<p>这些功能已经过时且并不被提倡。不要使用它们!</p>
</li>
<li>
<p><code>new Function()</code> 函数的行为也很类似，最后一个参数可以接受代码字符串，并将其转化为动态生成的函数。</p>
<p>这个也要尽量避免使用。</p>
</li>
</ul>
<h3 id="with"> with</h3>
<p><strong><code>eval</code> 函数如果接受了含有一个或多个声明的代码，就会修改其所处的词法作用域，</strong></p>
<p><strong>而 <code>with</code> 声明实际上是根据你传递给它的对象凭空创建了一个全新的词法作用域。</strong></p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span>
  a<span>:</span> <span>1</span><span>,</span>
	b<span>:</span> <span>2</span>
<span>}</span><span>;</span>

<span>// 单调乏味的重复 "obj"</span>
obj<span>.</span>a <span>=</span> <span>2</span><span>;</span>
obj<span>.</span>b <span>=</span> <span>3</span><span>;</span>

<span>// 简单的快捷方式</span>
<span>with</span> <span>(</span>obj<span>)</span> <span>{</span>
  a <span>=</span> <span>3</span><span>;</span>
  b <span>=</span> <span>4</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p><strong><code>with</code> 的行为非常令人费解，在严格模式下被禁止。</strong></p>
<h3 id="eval-和-with-对性能的影响"> eval 和 with 对性能的影响</h3>
<ul>
<li>
<p><code>eval</code> 和<code>with</code> 会在运行时修改或创建新的作用域，以此来欺骗其他在书写时定义的词法作用域。</p>
</li>
<li>
<p><strong><code>JavaScript</code> 引擎会在编译阶段进行数项的性能优化。</strong></p>
<p>其中有些优化<strong>依赖于能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置</strong>，才能在执行过程中快速找到标识符。</p>
</li>
<li>
<p>如果引擎在代码中发现了 <code>eval</code> 或 <code>with</code>，那么作用域会变得无法预测。</p>
<p>最坏情况下，所有的优化都是无意义的，<strong>因此最简单的做法就是不做任何优化</strong>。</p>
</li>
<li>
<p>如果代码中大量使用 <code>eval</code> 或<code>with</code>，那么运行起来<strong>一定会变得非常慢</strong>。</p>
</li>
</ul>
<h2 id="总结"> 总结</h2>
<ul>
<li>
<p>词法作用域意思是作用域是<strong>由代码编写时变量声明的位置决定</strong>。</p>
<p>编译过程的词法阶段基本能知道这些变量的位置，从而在运行时快速找到他们</p>
</li>
<li>
<p><code>eval</code> 可以<strong>在运行时对作用域进行修改</strong>， <code>with</code> 可以根据传给它的对象<strong>创建一个新的作用域</strong>。</p>
</li>
<li>
<p><strong>这两个的副作用是引擎无法在编译时对作用域查找进行优化，因为引擎只能谨慎地认为这样的优化是无效的。</strong></p>
<p><strong>使用这其中任何一个机制都将导致代码运行变慢。</strong></p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">函数作用域与块作用域</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-3%20%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-3%20%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="函数作用域与块作用域"> 函数作用域与块作用域</h1>
<h2 id="函数作用域"> 函数作用域</h2>
<p>正如第 2 章所说，作用域包含了一系列的“气泡”，每一个都可以作为容器，其中包含了标识符(变量、函数)的定义。</p>
<p>这些气泡互相嵌套并且整齐地排列成蜂窝型，排列的结构是在写代码时定义的。</p>
<h3 id="函数作用域的应用"> 函数作用域的应用</h3>
<ul>
<li>
<p>隐藏内部实现</p>
<blockquote>
<p>最小暴露原则：在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来。</p>
</blockquote>
<p>根据最小暴露原则，可以用一个函数将一段代码包裹起来，从而隐藏内部实现。</p>
</li>
<li>
<p>规避命名冲突</p>
<p>隐藏”作用域中的变量和函数，可以避免同名标识符之间的冲突。</p>
<p>其他一些规避命名冲突的方法：</p>
<ul>
<li>
<p>全局命名空间</p>
<p>当加载多个第三方库时，很容易引起命名冲突。这时候可以在全局作用域中声明一个名字足够独特的变量，通常是一个对象，称作<strong>命名空间</strong>。比如<code>Vue.createComponent()</code>、<code>React.createComponent()</code>。</p>
</li>
<li>
<p>模块管理</p>
<p>运用<code>CommonJs</code>或<code>ES6 Module</code>可以很好的解决命名冲突问题。</p>
</li>
</ul>
</li>
</ul>
<h3 id="匿名、具名函数和立即执行函数表达式"> 匿名、具名函数和立即执行函数表达式</h3>
<p>参考以下代码：</p>
<div><pre><code><span>setTimeout</span><span>(</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"I waited 1 second!"</span><span>)</span><span>;</span>
<span>}</span><span>,</span> <span>1000</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这里的回调函数就是一个匿名函数表达式，匿名函数的缺点如下：</p>
<ol>
<li>
<p>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</p>
</li>
<li>
<p>如果没有函数名，当函数需要引用自身时只能使用已经过期的 <code>arguments.callee</code> 引用。</p>
<p>比如在<strong>递归</strong>中，或者<strong>事件触发后事件监听器需要解绑自身</strong>。</p>
</li>
<li>
<p>匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。</p>
</li>
</ol>
<p>所以，<strong>始终给函数表达式命名是一个最佳实践</strong>。</p>
<p><strong>立即执行函数表达式(IIFE)</strong>：</p>
<div><pre><code><span>var</span> a <span>=</span> <span>2</span><span>;</span>
<span>(</span><span>function</span> <span>IIFE</span><span>(</span> <span>global</span> <span>)</span> <span>{</span>
  <span>var</span> a <span>=</span> <span>3</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// 3 console.log( global.a ); // 2</span>
<span>}</span><span>)</span><span>(</span> window <span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="块作用域"> 块作用域</h2>
<p>在JavaScript具有块级作用域之前，一些变量或函数声明很容易“泄漏”。</p>
<div><pre><code><span>// window</span>
<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>var</span> globalVar <span>=</span> <span>'globalVar'</span><span>;</span>
  <span>function</span> <span>globalFun</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span>

<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
  <span>// var </span>
  <span>// function</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span>i<span>)</span> <span>// 10</span>
console<span>.</span><span>log</span><span>(</span>globalVar<span>)</span> <span>// 'globalVar'</span>
console<span>.</span><span>log</span><span>(</span>globalFun<span>)</span> <span>// function globalFun () {}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>这些“泄漏”现象不符合人们的预期，很容易引发意外。</p>
<ul>
<li>
<p>用一对花括号可以创建块级作用域</p>
<div><pre><code><span>{</span>
  <span>let</span> innerVar <span>=</span> <span>0</span><span>;</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span>innerVar<span>)</span> <span>// ReferenceError: innerVar is not defined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>try/catch的catch分句会创建一个块级作用域</p>
<div><pre><code><span>try</span> <span>{</span>
  <span>undefined</span><span>(</span><span>)</span><span>;</span> <span>// 执行一个非法操作来强制制造一个异常</span>
<span>}</span>
<span>catch</span> <span>(</span>err<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> err <span>)</span><span>;</span> <span>// 能够正常执行! </span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span> err <span>)</span><span>;</span> <span>// ReferenceError: err not found</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>const</p>
</li>
<li>
<p>let</p>
<ul>
<li>
<p>let与垃圾回收</p>
<div><pre><code><span>function</span> <span>process</span><span>(</span><span>data</span><span>)</span> <span>{</span>
  <span>// 在这里做点有趣的事情</span>
<span>}</span>
<span>var</span> bigData <span>=</span> <span>{</span>
  <span>// 一个大大的对象</span>
<span>}</span><span>;</span>
<span>process</span><span>(</span> bigData <span>)</span><span>;</span>

document
  <span>.</span><span>getElementById</span><span>(</span> <span>"my_button"</span> <span>)</span>
  <span>.</span><span>addEventListener</span><span>(</span> <span>"click"</span><span>,</span> <span>function</span> <span>click</span><span>(</span><span>evt</span><span>)</span> <span>{</span>
    <span>// 实际上不需要访问bigData，但是可以访问到</span>
<span>}</span><span>,</span> <span>/*capturingPhase=*/</span><span>false</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>click 函数的点击回调并不需要 bigData 变量。</p>
<p>理论上这意味着当 process 执行后，在内存中占用大量空间的数据结构就可以被垃圾回收了。但是，由于 click 函数形成了一个覆盖整个作用域的闭包，JavaScript 引擎极有可能依然保存着这个结构(取决于具体实现)。</p>
<p>因此，可以写成：</p>
<div><pre><code></code></pre>
<div></div></div></li>
</ul>
<p>{
function process(data) {
// 在这里做点有趣的事情
}
var bigData = {
// 一个大大的对象
};
process( bigData );
}
// 块作用域可以打消这种顾虑，可以让引擎清楚地知道没有必要继续保存 bigData 了
// addEventListener()</p>
<div><pre><code>
**为变量显式声明块作用域，并对变量进行本地绑定是非常有用的工具，可以把它添加到你的代码工具箱中了。**

* let 循环

**for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。**

```javascript
for (let i=0; i&lt;10; i++) { 
  console.log( i );
  btns[i].addEventListener(&#39;click&#39;, function () {
    console.log(i); // 0,1,2,...,9
  })
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
</ul>
<h2 id="总结"> 总结</h2>
<ul>
<li>
<p>函数是 JavaScript 中最常见的作用域单元。</p>
</li>
<li>
<p>本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</p>
</li>
<li>
<p>函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块(通常指 { .. } 内部)。</p>
</li>
<li>
<p>从 ES3 开始，try/catch 结构在 catch 分句中具有块作用域。</p>
</li>
<li>
<p>ES6 的 let / const 可将变量绑定至当前函数或块级作用域。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">this概览</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-1%20this%E6%A6%82%E8%A7%88/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-1%20this%E6%A6%82%E8%A7%88/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="this概览"> this概览</h1>
<h2 id="this概览-2"> this概览</h2>
<p><strong>this既不指向函数对象本身，也不指向该函数的作用域</strong>。</p>
<div><p>Info</p>
<p>在 JavaScript 内部，作用域确实和对象类似，可见的标识符都是它的属性。</p>
<p>但是作用域“对象”无法通过 JavaScript 代码访问，它<strong>存在于 JavaScript 引擎内部</strong>。</p>
</div>
<p>函数执行上下文：</p>
<div><p>Info</p>
<p>当一个函数被调用时，会创建一个活动记录(有时候也称为<strong>执行上下文</strong>)。</p>
<p>这个记录会包含函数在<strong>哪里被调用(调用栈)</strong>、<strong>函数的调用方法</strong>、<strong>传入的参数</strong>等信息。</p>
<p>this 就是记录的其中一个属性，会在函数执行的过程中用到。</p>
</div>
<h2 id="小结"> 小结</h2>
<p><strong>this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</strong></p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">作用域与闭包</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-5%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-5%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="作用域与闭包"> 作用域与闭包</h1>
<h2 id="闭包"> 闭包</h2>
<p><strong>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</strong></p>
<p>参考以下例子1：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span> 
  <span>var</span> a <span>=</span> <span>2</span><span>;</span>
  <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// 2</span>
  <span>}</span>
  <span>bar</span><span>(</span><span>)</span><span>;</span> 
<span>}</span>
<span>foo</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这里确切的说没有产生闭包，因为bar函数<strong>只是正常地根据作用域查找规则，向上查找到了变量a</strong>。</p>
<p>参考例子2:</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> a <span>=</span> <span>2</span><span>;</span>
  <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> bar<span>;</span>
<span>}</span>
<span>var</span> baz <span>=</span> <span>foo</span><span>(</span><span>)</span><span>;</span>
<span>baz</span><span>(</span><span>)</span><span>;</span> <span>// 2 这就是闭包</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>
<p>可以不太严谨地认为<strong>能够记住当前作用域的函数，就是闭包</strong>。</p>
</li>
<li>
<p><strong>通常闭包效果的产生都与函数作为值被传递，然后在词法作用域之外被执行的场景相关</strong>。具体可参考例子2。</p>
</li>
<li>
<p>也有说法称被传递的函数对原词法作用域的引用叫闭包。</p>
</li>
<li>
<p>事实上，<strong>只要能够准确地意识到一个函数能访问到那些变量即可，不用太纠结是不是叫闭包</strong>。</p>
</li>
</ul>
<p>针对例子2，因为bar函数可以访问foo函数的作用域，因此，在foo函数执行完后，<strong>foo函数的作用域不会被回收</strong>。</p>
<p>以下是闭包的几个例子：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> a <span>=</span> <span>2</span><span>;</span>
  <span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// 2</span>
  <span>}</span>
  <span>bar</span><span>(</span> baz <span>)</span><span>;</span>
<span>}</span>
<span>function</span> <span>bar</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>fn</span><span>(</span><span>)</span><span>;</span> <span>// 闭包</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><pre><code><span>var</span> fn<span>;</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> a <span>=</span> <span>2</span><span>;</span>
  <span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span>
  <span>}</span>
  fn <span>=</span> baz<span>;</span> <span>// 将 baz 分配给全局变量</span>
<span>}</span>
<span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>// 被传递的函数在词法作用域外执行</span>
  <span>// 仍可以对foo函数作用域的访问</span>
  <span>fn</span><span>(</span><span>)</span><span>;</span> <span>// 闭包</span>
<span>}</span>
<span>foo</span><span>(</span><span>)</span><span>;</span>
<span>bar</span><span>(</span><span>)</span><span>;</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code><span>function</span> <span>wait</span><span>(</span><span>message</span><span>)</span> <span>{</span>
  <span>// timer函数被传递给setTimeout，timer保留对wait函数作用域的引用</span>
  <span>setTimeout</span><span>(</span> <span>function</span> <span>timer</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> message <span>)</span><span>;</span>
  <span>}</span><span>,</span> <span>1000</span> <span>)</span><span>;</span>
<span>}</span>
<span>wait</span><span>(</span> <span>"Hello, closure!"</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>function</span> <span>setupBot</span><span>(</span><span>name<span>,</span> selector</span><span>)</span> <span>{</span>
  <span>$</span><span>(</span> selector <span>)</span><span>.</span><span>click</span><span>(</span> <span>function</span> <span>activator</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> <span>"Activating: "</span> <span>+</span> name <span>)</span><span>;</span>
  <span>}</span> <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="循环与闭包"> 循环与闭包</h3>
<p>先来看一个例子：</p>
<div><pre><code><span>for</span> <span>(</span><span>var</span> i<span>=</span><span>1</span><span>;</span> i<span>&lt;=</span><span>5</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>setTimeout</span><span>(</span> <span>function</span> <span>timer</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> i <span>)</span><span>;</span>
  <span>}</span><span>,</span> i<span>*</span><span>1000</span> <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>以上这段代码试图以一秒为间隔打印1-6，但事实是每次打印的结果都是6。</p>
<p>这是因为当定时器被执行时，循环早已结束，此时<code>i = 6</code>。整段代码<strong>从头到尾都只有一个i</strong>。</p>
<p>即使将setTimeout的时间定为0也是如此，因为<strong>setTimeout的任务会重新进入时间循环队列排队</strong>，任务执行时循环已结束。</p>
<p>解决方法：</p>
<div><pre><code><span>for</span> <span>(</span><span>var</span> i<span>=</span><span>1</span><span>;</span> i<span>&lt;=</span><span>5</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>(</span><span>function</span><span>(</span><span>j</span><span>)</span> <span>{</span>
    <span>setTimeout</span><span>(</span> <span>function</span> <span>timer</span><span>(</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span> j <span>)</span><span>;</span>
    <span>}</span><span>,</span> j<span>*</span><span>1000</span> <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>(</span> i <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在迭代的<strong>IIFE 会为每个迭代都生成一个新的作用域</strong>，新的作用域每次迭代都保存了一个新的i值。</p>
<p>也可以使用ES6的块级作用域：</p>
<div><pre><code><span>for</span> <span>(</span><span>let</span> i<span>=</span><span>1</span><span>;</span> i<span>&lt;=</span><span>5</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>// let 会绑定当前块作用域</span>
  <span>setTimeout</span><span>(</span> <span>function</span> <span>timer</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> i <span>)</span><span>;</span>
  <span>}</span><span>,</span> i<span>*</span><span>1000</span> <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="模块"> 模块</h3>
<ul>
<li>
<p>返回公共API</p>
<div><pre><code><span>var</span> foo <span>=</span> <span>(</span><span>function</span> <span>CoolModule</span><span>(</span><span>id</span><span>)</span> <span>{</span>
  <span>function</span> <span>change</span><span>(</span><span>)</span> <span>{</span> <span>// 修改公共 API</span>
    publicAPI<span>.</span>identify <span>=</span> identify2<span>;</span>
  <span>}</span>
  <span>function</span> <span>identify1</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> id <span>)</span><span>;</span>
  <span>}</span>
  <span>function</span> <span>identify2</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> id<span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>)</span><span>;</span>
  <span>}</span>
  <span>var</span> publicAPI <span>=</span> <span>{</span>
    change<span>:</span> change<span>,</span>
    identify<span>:</span> identify1
  <span>}</span><span>;</span>
  <span>return</span> publicAPI<span>;</span>
<span>}</span><span>)</span><span>(</span> <span>"foo module"</span> <span>)</span><span>;</span>

foo<span>.</span><span>identify</span><span>(</span><span>)</span><span>;</span> <span>// foo module</span>
foo<span>.</span><span>change</span><span>(</span><span>)</span><span>;</span>
foo<span>.</span><span>identify</span><span>(</span><span>)</span><span>;</span> <span>// FOO MODULE</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
<li>
<p>定义模块和加载模块</p>
<div><pre><code><span>// 模块管理器</span>
<span>var</span> MyModules <span>=</span> <span>(</span><span>function</span> <span>Manager</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> modules <span>=</span> <span>{</span><span>}</span><span>;</span>
  <span>function</span> <span>define</span><span>(</span><span>name<span>,</span> deps<span>,</span> impl</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>var</span> i<span>=</span><span>0</span><span>;</span> i<span>&lt;</span>deps<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      deps<span>[</span>i<span>]</span> <span>=</span> modules<span>[</span>deps<span>[</span>i<span>]</span><span>]</span><span>;</span>
    <span>}</span>
    modules<span>[</span>name<span>]</span> <span>=</span> <span>impl</span><span>.</span><span>apply</span><span>(</span> impl<span>,</span> deps <span>)</span><span>;</span> <span>// 核心代码</span>
  <span>}</span>
  <span>function</span> <span>get</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>return</span> modules<span>[</span>name<span>]</span><span>;</span>
  <span>}</span>

  <span>return</span> <span>{</span>
    define<span>,</span>
    get
  <span>}</span><span>;</span>
<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>这段代码的核心是 <code>modules[name] = impl.apply(impl, deps)</code>。</p>
<p>为了模块的定义引入了包装函数(可以传入任何依赖)，并且将返回值，也就是模块的 API，储存在一个根据名字来管理的模块列表中。</p>
<div><pre><code><span>// 使用模块</span>
MyModules<span>.</span><span>define</span><span>(</span> <span>"bar"</span><span>,</span> <span>[</span><span>]</span><span>,</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>function</span> <span>hello</span><span>(</span><span>who</span><span>)</span> <span>{</span>
    <span>return</span> <span>"Let me introduce: "</span> <span>+</span> who<span>;</span>
  <span>}</span>
  <span>return</span> <span>{</span>
    hello
  <span>}</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>

MyModules<span>.</span><span>define</span><span>(</span> <span>"foo"</span><span>,</span> <span>[</span><span>"bar"</span><span>]</span><span>,</span> <span>function</span><span>(</span><span>bar</span><span>)</span> <span>{</span>
  <span>var</span> hungry <span>=</span> <span>"hippo"</span><span>;</span>
  <span>function</span> <span>awesome</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> bar<span>.</span><span>hello</span><span>(</span> hungry <span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> <span>{</span>
    awesome
  <span>}</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>


<span>var</span> bar <span>=</span> MyModules<span>.</span><span>get</span><span>(</span> <span>"bar"</span> <span>)</span><span>;</span>
<span>var</span> foo <span>=</span> MyModules<span>.</span><span>get</span><span>(</span> <span>"foo"</span> <span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>bar<span>.</span><span>hello</span><span>(</span> <span>"hippo"</span> <span>)</span><span>)</span><span>;</span> <span>// Let me introduce: hippo foo.awesome(); // LET ME INTRODUCE: HIPPO</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div></li>
<li>
<p><code>CommonJS、ES6</code>等模块机制。</p>
</li>
</ul>
<h2 id="总结"> 总结</h2>
<p><strong>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</strong></p>
<p>如果不了解闭包，有时会产生意料之外的结果，但闭包同时又是很有用的工具，代码中的闭包无处不在。比如可以利用闭包构建模块系统。</p>
<p>模块有两个主要特征:</p>
<ul>
<li>为创建内部作用域而调用了一个包装函数。</li>
<li>包装函数的返回值必须至少包括一个对内部函数的引用，这样就会创建涵盖整个包装函数内部作用域的闭包。</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">声明提升</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-4%20%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-4%20%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87/"/>
    <updated>2021-04-21T13:30:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="声明提升"> 声明提升</h1>
<h2 id="声明提升-2"> 声明提升</h2>
<p>参考如下代码：</p>
<div><pre><code><span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span> <span>// undefined</span>
  <span>var</span> foo <span>=</span> <span>2</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在第二章中提到，JavaScript引擎在执行代码前会对其进行编译，编译阶段中的一部分工作就是<strong>找到所有的声明，并用合适的作用域将它们关联起来</strong>。这正是<strong>词法作用域的核心内容</strong>。</p>
<p>因此，包括<strong>变量和函数在内的所有声明都会在任何代码被执行前首先被处理</strong>。</p>
<p>以上代码相当于：</p>
<div><pre><code><span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> foo<span>;</span>
  console<span>.</span><span>log</span><span>(</span>foo<span>)</span><span>;</span>
  foo <span>=</span> <span>2</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="函数表达式不会被提升"> 函数表达式不会被提升</h3>
<div><pre><code><span>foo</span><span>(</span><span>)</span><span>;</span> <span>// TypeError</span>
<span>bar</span><span>(</span><span>)</span><span>;</span> <span>// ReferenceError</span>
<span>var</span> <span>foo</span> <span>=</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>这个代码片段经过提升后，实际上会被理解为以下形式:</p>
<div><pre><code><span>var</span> foo<span>;</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// TypeError</span>
<span>bar</span><span>(</span><span>)</span><span>;</span> <span>// ReferenceError</span>
<span>foo</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> bar <span>=</span> <span>...</span>self<span>...</span> <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="函数优先于变量提升"> 函数优先于变量提升</h3>
<div><pre><code><span>foo</span><span>(</span><span>)</span><span>;</span> <span>// 3</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>1</span> <span>)</span><span>;</span>
<span>}</span>
<span>var</span> <span>foo</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>2</span> <span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>3</span> <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="总结"> 总结</h2>
<ul>
<li>
<p>JavaScript引擎将<code>var a = 2</code>视为<code>var a</code>和<code>a = 2</code>，第一个是编译阶段的任务，而第二个则是执行阶段的任务。</p>
</li>
<li>
<p>无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。</p>
<p>可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的最顶端，这个过程被称为提升。</p>
</li>
<li>
<p>声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">对象的内容</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-3-2%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AE%B9/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-3-2%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AE%B9/"/>
    <updated>2021-04-21T13:30:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="对象的内容"> 对象的内容</h1>
<h2 id="对象的内容-2"> 对象的内容</h2>
<p>在JavaScript中，对象的内容是由一些存储在特定命名位置的(任意类型的)值组成的，我们称之为<strong>属性</strong>。</p>
<p>在引擎内部，值的存储方式是多种多样的，<strong>一般并不会存在对象容器内部</strong>。</p>
<p>存储在对象容器内部的是这些属性的名称，它们就像指针(从技术角度来说就是引用)一样，指向这些值真正的存储位置。</p>
<p>访问对象对象属性的两种方式：</p>
<ul>
<li>用 . 操作符，称为“属性访问” （常用）</li>
<li>用 [] 操作符，称为“键访问”</li>
</ul>
<p><strong>在对象中，属性名永远都是字符串。</strong></p>
<p>如果你使用 string(字面量)以外的其他值作为属性名，那它首先会被<strong>转换为一个字符串</strong>。即使是数字也不例外。</p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span><span>}</span><span>;</span>
myObject<span>[</span><span>true</span><span>]</span> <span>=</span> <span>"foo"</span><span>;</span>
myObject<span>[</span><span>3</span><span>]</span> <span>=</span> <span>"bar"</span><span>;</span>
myObject<span>[</span>myObject<span>]</span> <span>=</span> <span>"baz"</span><span>;</span>

<span>/* 事实上，就是对属性名调用toString方法 */</span>

 myObject<span>[</span><span>"true"</span><span>]</span><span>;</span> <span>// "foo"</span>
 myObject<span>[</span><span>"3"</span><span>]</span><span>;</span> <span>// "bar"</span>
 myObject<span>[</span><span>"[object Object]"</span><span>]</span><span>;</span> <span>// "baz"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="可计算属性名"> 可计算属性名</h3>
<p>ES6 增加了可计算属性名，用法：</p>
<div><pre><code><span>var</span> s <span>=</span> <span>Symbol</span><span>(</span><span>'s'</span><span>)</span><span>;</span>
<span>var</span> prefix <span>=</span> <span>'prefix-'</span><span>;</span>

<span>var</span> obj <span>=</span> <span>{</span>
  <span>[</span>s<span>]</span><span>:</span> <span>'symbol value'</span><span>,</span>
  <span>[</span>prefix <span>+</span> <span>'suffix'</span><span>]</span><span>:</span> <span>'other computed name'</span>
<span>}</span>

obj<span>[</span>s<span>]</span> <span>// symbol value</span>
obj<span>[</span><span>'prefix-suffix'</span><span>]</span> <span>// other computed name</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="没有-方法-只有-属性"> 没有“方法”只有“属性”</h3>
<p><strong>无论返回值是什么类型，每次访问对象的属性就是属性访问。</strong></p>
<p>如果属性访问返回的是一个 函数，那它也并不是一个“方法”。</p>
<p>属性访问返回的函数和其他函数没有任何区别(除了可能发生的隐式绑定 this)。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"foo"</span> <span>)</span><span>;</span>
<span>}</span>
<span>var</span> someFoo <span>=</span> foo<span>;</span> <span>// 对 foo 的变量引用</span>
<span>var</span> myObject <span>=</span> <span>{</span>
  someFoo<span>:</span> foo
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>someFoo 和 myObject.someFoo 只是对于同一个函数的不同引用，并不能说明这个函数是特别的或者“属于”某个对象。</p>
<h3 id="复制对象"> 复制对象</h3>
<p>要复制一个对象，首先要考虑的是<strong>浅拷贝</strong>还是<strong>深拷贝</strong>。</p>
<p><strong>深拷贝</strong>比较复杂，因为原对象可能有循环引用，深复制可能会造成死循环。</p>
<ul>
<li>
<p>深拷贝</p>
<p>对于 JSON 安全(可以被序列化为一个 JSON 字符串并且可以根据这个字符串解析出一个结构和值完全一样的对象)的对象来说，可用：</p>
<div><pre><code><span>var</span> newObj <span>=</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span> someObj <span>)</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>当然，这种方法需要保证对象是 JSON 安全的，所以只适用于部分情况。</p>
</li>
<li>
<p>浅拷贝</p>
<p>Object.assign 方法的第一个参数是目标对象，之后还可以跟一个或多个源对象。</p>
<p>它会遍历一个或多个源对象的所有<strong>可枚举(enumerable)</strong> 的**自有键(owned key)**并把它们复制(<strong>使用 = 操作符赋值</strong>)到目标对象，最后返回目标对象。</p>
<p><strong>由于 Object.assign 就是使用 = 操作符来赋值，所以源对象属性的一些特性(比如 writable)不会被复制到目标对象。</strong></p>
<div><pre><code><span>function</span> <span>anotherFunction</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>var</span> anotherObject <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>var</span> anotherArray <span>=</span> <span>[</span><span>]</span><span>;</span>

<span>var</span> myObject <span>=</span> <span>{</span>
  a<span>:</span> <span>2</span><span>,</span>
  b<span>:</span> anotherObject<span>,</span> <span>// 引用，不是复本!</span>
  c<span>:</span> anotherArray<span>,</span> <span>// 另一个引用!</span>
  d<span>:</span> anotherFunction
<span>}</span><span>;</span>

<span>var</span> newObj <span>=</span> Object<span>.</span><span>assign</span><span>(</span> <span>{</span><span>}</span><span>,</span> myObject <span>)</span><span>;</span>

newObj<span>.</span>b <span>===</span> anotherObject<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
</ul>
<h2 id="属性描述符"> 属性描述符</h2>
<p>从ES5开始，所有属性都具备了属性描述符。</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span><span>}</span><span>;</span>

Object<span>.</span><span>defineProperty</span><span>(</span>obj<span>,</span> <span>'a'</span><span>,</span> <span>{</span>
  value<span>:</span> <span>2</span><span>,</span>
  writable<span>:</span> <span>true</span><span>,</span>
  enumerable<span>:</span> <span>true</span><span>,</span>
  configurable<span>:</span> <span>true</span>
<span>}</span><span>)</span><span>;</span>

Object<span>.</span><span>getOwnPropertyDescriptor</span><span>(</span>obj<span>,</span> <span>'a'</span><span>)</span><span>;</span>
<span>/*
	{
		value: 2,
		writable: true,
		enumerable: true,
		configurable: true
	}
*/</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li>
<p>writable：可以决定<strong>是否可以修改属性的值</strong>。若为false，对属性值的修改会<strong>静默失败(silently failed)，严格模式下会报错</strong>。</p>
</li>
<li>
<p>configurable</p>
<p>configurable决定<strong>是否可以用defineProperty修改属性描述符</strong>。</p>
<p>不管是不是处于严格模式，尝试修改一个不可配置的属性描述符都会出错。</p>
<p><strong>把 configurable 修改成 false 是单向操作，无法撤销！</strong></p>
<p><strong>configurable:false 还会禁止删除这个属性！</strong></p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span>
  a<span>:</span><span>2</span>
<span>}</span><span>;</span>
myObject<span>.</span>a<span>;</span> <span>// 2</span>
<span>delete</span> myObject<span>.</span>a<span>;</span>
myObject<span>.</span>a<span>;</span> <span>// undefined</span>

Object<span>.</span><span>defineProperty</span><span>(</span> myObject<span>,</span> <span>"a"</span><span>,</span> <span>{</span>
  configurable<span>:</span> <span>false</span>
<span>}</span> <span>)</span><span>;</span>
myObject<span>.</span>a<span>;</span> <span>// 2</span>
<span>delete</span> myObject<span>.</span>a<span>;</span>
myObject<span>.</span>a<span>;</span> <span>// 2 静默失败</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><em>不要把 delete 看作一个释放内存的工具(就像 C/C++ 中那样)，它就是一个删除对象属性的操作，仅此而已。</em></p>
</li>
<li>
<p>enumerable</p>
<p>这个描述符控制的是属性<strong>是否会出现在对象的属性枚举中</strong>（比如 for-in循环）。</p>
<p>如果把 enumerable 设置成 false，这个属性就不会出现在枚举中，虽然仍然可以正常访问它。</p>
</li>
<li>
<p>后面会提到的<strong>访问描述符</strong>（有getter / setter 的属性），也属于属性描述符。</p>
</li>
</ul>
<h2 id="对象的不变性"> 对象的不变性</h2>
<ul>
<li>
<p>对象常量属性</p>
<div><pre><code><span>// 结合 writable:false 和 configurable:false 就可以创建一个真正的常量属性(不可修改、 重定义或者删除)</span>
Object<span>.</span><span>defineProperty</span><span>(</span> <span>{</span><span>}</span><span>,</span> <span>"FAVORITE_NUMBER"</span><span>,</span> <span>{</span>
  value<span>:</span> <span>42</span><span>,</span>
  writable<span>:</span> <span>false</span><span>,</span>
  configurable<span>:</span> <span>false</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>禁止拓展(preventExtensions)</p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span> a<span>:</span> <span>2</span> <span>}</span><span>;</span>
Object<span>.</span><span>preventExtensions</span><span>(</span> myObject <span>)</span><span>;</span> <span>// 禁止一个对象添加新属性并且保留已有属性</span>

<span>/* 在非严格模式下，创建属性 b 会静默失败。
	 在严格模式下，将会抛出 TypeError 错误。 */</span>
myObject<span>.</span>b <span>=</span> <span>3</span><span>;</span>
myObject<span>.</span>b<span>;</span> <span>// undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>密封(seal)</p>
<p><strong>无法拓展、不能配置或删除属性、能修改属性的值</strong>。</p>
<p>Object.seal 会创建一个“密封”的对象，密封之后<strong>不能添加新属性</strong>，也<strong>不能重新配置或者删除任何现有属性</strong>(虽然可以修改属性值)。</p>
<p>这个方法实际上会在一个现有对象上调用 Object.preventExtensions，并把所有现有属性标记为 configurable:false。</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span> a<span>:</span> <span>2</span><span>}</span><span>;</span>
Object<span>.</span><span>seal</span><span>(</span>obj<span>)</span><span>;</span>

obj<span>.</span>b <span>=</span> <span>3</span><span>;</span>
obj<span>.</span>b<span>;</span> <span>// undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>冻结(freeze)</p>
<p><strong>密封基础上再加无法修改值的效果</strong>。</p>
<p>Object.freeze 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用 Object.seal 并把所有“数据访问”属性标记为 writable:false。</p>
<p>这个方法是你可以应用在对象上的<strong>级别最高的不可变性</strong>，它会禁止对于对象本身及其任意直接属性的修改。</p>
</li>
</ul>
<p><strong>以上所有的方法创建的都是浅不变形，也就是说，它们只会影响目标对象和它的直接属性。</strong></p>
<p><strong>如果目标对象引用了其他对象(数组、对象、函数，等)，其他对象的内容不受影响，仍然是可变的。</strong></p>
<p><em>在 JavaScript 程序中很少需要深不可变性。有些特殊情况可能需要这样做，但是根据通用的设计模式，如果你发现需要密封或者冻结所有的对象，那你或许应当退一步，重新思考一下程序的设计，让它能更好地应对对象值的改变。</em></p>
<h3 id="get"> [[Get]]</h3>
<p>在对一个对象进行属性访问时，比如<code>obj.prop</code>，实际上是进行了**[[Get]]操作（类似函数调用[[Get()]]）**。</p>
<p>[[Get]]操作的具体步骤：</p>
<ol>
<li>对象默认的内置 [[Get]] 操作首先在对象中查找是否有名称相同的属性， 如果找到就会返回这个属性的值。</li>
<li>如果没有找到名称相同的属性，按照 [[Get]] 算法的定义，会遍历可能存在的 <strong>[[Prototype]] 链， 也就是原型链</strong>。</li>
<li>如果无论如何都没有找到名称相同的属性，那 [[Get]] 操作会返回值 undefined</li>
</ol>
<h3 id="put"> [[Put]]</h3>
<p>当给对象进行属性赋值时会触发[[Put]]操作。</p>
<p>然而，[[Put]] 被触发时，实际的行为取决于许多因素，包括<strong>对象中是否已经存在这个属性(这是最重要的因素)</strong>。</p>
<ul>
<li>如果已经存在这个属性
<ol>
<li>属性是否是访问描述符（比如<code>{get a() {return 'a'}}</code>）？如果是并且存在setter就调用setter。</li>
<li>属性描述符中writable是否是false？如果是，在非严格模式下静默失败，在严格模式下抛出 TypeError 异常。</li>
<li>如果都不是，将该值设置为属性的值。</li>
</ol>
</li>
<li>如果不存在
<ul>
<li>情况复杂，参考原型链章节。</li>
</ul>
</li>
</ul>
<h3 id="访问描述符-getter-和-setter"> 访问描述符（getter 和 setter）</h3>
<p>对象默认的 [[Put]] 和 [[Get]] 操作分别可以控制属性值的设置和获取。</p>
<p>在 ES5 中可以使用 getter 和 setter 部分改写默认操作，但是只能应用在单个属性上，无法应用在整个对象上。</p>
<p>getter 是一个隐藏函数，会在获取属性值时调用。setter 也是一个隐藏函数，会在设置属性值时调用。</p>
<p>对于访问描述符来说，JavaScript 会<strong>忽略它们的 value 和 writable 特性</strong>，取而代之的是<strong>关心 set 和 get(还有 configurable 和 enumerable)特性</strong>。</p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span>
	<span>get</span> <span>a</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>2</span><span>;</span>
	<span>}</span>
<span>}</span><span>;</span>
Object<span>.</span><span>defineProperty</span><span>(</span>myObject<span>,</span> <span>'b'</span><span>,</span> <span>{</span>
  <span>// 属性描述符</span>
  <span>get</span><span>:</span> <span>function</span><span>(</span><span>)</span><span>{</span> <span>return</span> <span>this</span><span>.</span>a <span>*</span> <span>2</span> <span>}</span><span>,</span>
  enumerable<span>:</span> <span>true</span> <span>// 确保 b 会出现在对象的属性列表中</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>对于<code>myObject.a</code>，如果只进行了getter的定义，那么对属性赋值时会<strong>忽略赋值操作，不会抛出错误</strong>。</p>
<p>即使进行了setter的定义，因为getter限定了返回，setter的操作也是无意义的。</p>
<p>setter 会覆盖单个属性默认的 [[Put]]操作。</p>
<p>通常来说 getter 和 setter 是成对出现的(只定义一个的话 通常会产生意料之外的行为)</p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span>
  <span>get</span> <span>a</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>_a_<span>;</span> <span>// 名称 _a_ 只是一种惯例，没有任何特殊的行为，和其他普通属性 一样。</span>
  <span>}</span><span>,</span>
  <span>set</span> <span>a</span><span>(</span><span>val</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>_a_ <span>=</span> val <span>*</span> <span>2</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
myObject<span>.</span>a <span>=</span> <span>2</span><span>;</span>
myObject<span>.</span>a<span>;</span> <span>// 4</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="判断对象是否有某属性"> 判断对象是否有某属性</h3>
<p>参考如下代码：</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span> a<span>:</span> <span>undefined</span> <span>}</span><span>;</span>

<span>/* 无法判断返回undefined是因为属性不存在
	 还是属性的值是undefined */</span>
obj<span>.</span>a <span>// undefined</span>
obj<span>.</span>b <span>// undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>判断方法：</p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span> a<span>:</span><span>2</span> <span>}</span><span>;</span>

<span>(</span><span>"a"</span> <span>in</span> myObject<span>)</span><span>;</span> <span>// true</span>
<span>(</span><span>"b"</span> <span>in</span> myObject<span>)</span><span>;</span> <span>// false</span>
myObject<span>.</span><span>hasOwnProperty</span><span>(</span> <span>"a"</span> <span>)</span><span>;</span> <span>// true</span>
myObject<span>.</span><span>hasOwnProperty</span><span>(</span> <span>"b"</span> <span>)</span><span>;</span> <span>// false</span>

<span>// 如果hasOwnProperty函数不在对象的原型链上</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span>myObject<span>,</span> <span>"a"</span><span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><strong>in 操作符会检查属性是否在对象及其 [[Prototype]] 原型链中。</strong></p>
<p><strong>hasOwnProperty 只会检查属性是否在对象中，不会检查 [[Prototype]] 链。</strong></p>
<h3 id="枚举"> 枚举</h3>
<p>“可枚举”就相当于“可以出现在<strong>对象属性的遍历中</strong>。</p>
<p><strong>注意，枚举是否检查原型链很重要。</strong></p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span><span>}</span><span>;</span>

Object<span>.</span><span>defineProperty</span><span>(</span>myObject<span>,</span> <span>"a"</span><span>,</span>
  <span>// 让 a 像普通属性一样可以枚举</span>
  <span>{</span> enumerable<span>:</span> <span>true</span><span>,</span> value<span>:</span> <span>2</span> <span>}</span>
<span>)</span><span>;</span>
Object<span>.</span><span>defineProperty</span><span>(</span>myObject<span>,</span> <span>"b"</span><span>,</span>
  <span>// 让b不可枚举</span>
  <span>{</span> enumerable<span>:</span> <span>false</span><span>,</span> value<span>:</span> <span>3</span> <span>}</span>
<span>)</span><span>;</span>

myObject<span>.</span>b<span>;</span> <span>// 3</span>
<span>// 可以通过 in 操作符来判断是否存在</span>
<span>(</span><span>"b"</span> <span>in</span> myObject<span>)</span><span>;</span> <span>// true</span>
myObject<span>.</span><span>hasOwnProperty</span><span>(</span> <span>"b"</span> <span>)</span><span>;</span> <span>// true</span>

<span>for</span> <span>(</span><span>var</span> k <span>in</span> myObject<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> k<span>,</span> myObject<span>[</span>k<span>]</span> <span>)</span><span>;</span> <span>// 只能循环得到a</span>
<span>}</span>

myObject<span>.</span><span>propertyIsEnumerable</span><span>(</span> <span>"a"</span> <span>)</span><span>;</span> <span>// true</span>
myObject<span>.</span><span>propertyIsEnumerable</span><span>(</span> <span>"b"</span> <span>)</span><span>;</span> <span>// false</span>
Object<span>.</span><span>keys</span><span>(</span> myObject <span>)</span><span>;</span> <span>// ["a"]</span>
Object<span>.</span><span>getOwnPropertyNames</span><span>(</span> myObject <span>)</span><span>;</span> <span>// ["a", "b"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><ul>
<li>
<p><code>in</code> 操作符会检查属性是否在对象中，<strong>会检查 [[Prototype]] 链</strong>。</p>
</li>
<li>
<p><code>Object.hasOwnProperty</code> 只会检查属性是否在对象中，<strong>不检查 [[Prototype]] 链</strong>。</p>
</li>
<li>
<p><code>Object.propertyIsEnumerable</code>会检查给定的属性名<strong>是否可枚举，不检查 [[Prototype]] 链</strong>。</p>
</li>
<li>
<p><code>Object.keys</code>会返回一个数组，<strong>包含所有可枚举属性</strong>，<strong>不检查 [[Prototype]] 链</strong>。</p>
</li>
<li>
<p><code>Object.getOwnPropertyNames</code>会返回一个数组，<strong>包含所有属性，无论它们是否可枚举</strong>，<strong>不检查 [[Prototype]] 链</strong>。</p>
</li>
</ul>
<h2 id="小结"> 小结</h2>
<p>JavaScript中创建对象的两种形式：</p>
<ul>
<li>字面形式：<code>var obj = {};</code></li>
<li>构造形式：<code>var arr = new Array();</code></li>
</ul>
<p>JavaScript数据类型：</p>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
<li>symbol</li>
<li>object
<ul>
<li>function</li>
<li>array</li>
<li>error</li>
<li>...</li>
</ul>
</li>
</ul>
<p>对象的属性访问方式：</p>
<ul>
<li>obj.propName</li>
<li>obj['propName']</li>
</ul>
<p>访问属性时，引擎实际上会调用内部的默认 [[Get]] 操作(在设置属性值时是 [[Put]])，</p>
<p>[[Get]] 操作会检查对象本身是否包含这个属性，如果没找到的话还会查找 [[Prototype]] 链。</p>
<p>属性描述符：</p>
<ul>
<li>value</li>
<li>writable</li>
<li>enumerable</li>
<li>configurable</li>
</ul>
<p>设置对象不可变级别：</p>
<ul>
<li>Object.preventExtensions</li>
<li>Object.seal</li>
<li>Object.freeze</li>
</ul>
<p>属性不一定包含值——它们可能是具备 getter/setter 的“访问描述符”。</p>
<p>你可以使用 ES6 的 for..of 语法来遍历数据结构(数组、对象，等等)中的值，for..of 会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">对象</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-3%20%E5%AF%B9%E8%B1%A1/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-3%20%E5%AF%B9%E8%B1%A1/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="对象"> 对象</h1>
<h2 id="对象-2"> 对象</h2>
<p>对象的两种定义形式：</p>
<ul>
<li>
<p>对象字面量：</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span>
  key<span>:</span> value
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>对象构造</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span><span>;</span>
obj<span>.</span>key <span>=</span> value
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
</ul>
<h3 id="javascript类型"> JavaScript类型</h3>
<p>ES6以上版本的JavaScript有7中主要类型：</p>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
<li>symbol</li>
<li>object</li>
</ul>
<p>其中<code>string</code>、<code>number</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>、<code>symbol</code>为<strong>基本类型</strong>。</p>
<p><strong>有一种常见的错误说法是“JavaScript 中万物皆是对象”，这显然是错误的。</strong></p>
<p>JavaScript 中有许多特殊的对象子类型，我们可以称之为复杂基本类型。</p>
<ul>
<li>函数是对象的子类型，是<strong>可调用的对象</strong>。</li>
<li>数组是对象的子类型，<strong>具备一些额外的行为</strong>。比如具有下标。</li>
</ul>
<div><p>Note</p>
<p><code>typeof null</code>返回“object”是JavaScript的一个著名bug。</p>
<p>原理是这样的，不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型。</p>
<p>null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”。</p>
</div>
<h3 id="javascript-内置对象"> JavaScript 内置对象</h3>
<p>JavaScript 中还有一些对象子类型，通常被称为内置对象。</p>
<p><em>内部标签 [object Array] 表示这是对象的子类型数组。</em></p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Object</li>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Error</li>
</ul>
<p>以上这些看起来类似于Java中的类，但是<strong>JavaScript中没有类</strong>。</p>
<p>它们只是可以使用new操作符的<strong>内置函数</strong>。</p>
<div><pre><code><span>var</span> strPrimitive <span>=</span> <span>"I am a string"</span><span>;</span>
<span>typeof</span> strPrimitive<span>;</span> <span>// "string"</span>
strPrimitive <span>instanceof</span> <span>String</span><span>;</span> <span>// 是字符串字面量，不是对象，且值不可变</span>

<span>var</span> strObject <span>=</span> <span>new</span> <span>String</span><span>(</span> <span>"I am a string"</span> <span>)</span><span>;</span>
<span>typeof</span> strObject<span>;</span> <span>// "object"</span>
strObject <span>instanceof</span> <span>String</span><span>;</span> <span>// true</span>

<span>// 检查 sub-type 对象</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> strObject <span>)</span><span>;</span> <span>// [object String]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>原始值 &quot;I am a string&quot; 并不是一个对象，它只是一个字面量，并且是一个不可变的值。</p>
<p>如果要在这个字面量上执行一些操作，比如获取长度、访问其中某个字符等，那需要将其转换为 String 对象。</p>
<p><strong>在必要时语言会自动把字符串字面量转换成一个 String 对象</strong>，称之为&quot;<strong>装箱</strong>&quot;。</p>
<div><pre><code><span>var</span> strPrimitive <span>=</span> <span>"I am a string"</span><span>;</span>

<span>// 字符串字面量是没有属性和方法的</span>
<span>// 引擎自动装箱为String对象</span>
strPrimitive<span>.</span>length <span>// 13</span>
strPrimitive<span>.</span><span>charAt</span><span>(</span> <span>3</span> <span>)</span> <span>// "m"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>
<p><strong>null 和 undefined 没有对应的构造形式，它们只有文字形式。</strong></p>
</li>
<li>
<p><strong>Date 只有构造，没有文字形式。</strong></p>
</li>
<li>
<p>对于 Object、Array、Function 和 RegExp(正则表达式)来说，<strong>无论使用文字形式还是构造形式，它们都是对象，不是字面量</strong>。</p>
</li>
<li>
<p>通常我们<strong>首选更简单的文字形式</strong>。建议只在需要那些额外选项时使用构造形式。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">委托</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-6%20%E5%A7%94%E6%89%98/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-6%20%E5%A7%94%E6%89%98/"/>
    <updated>2021-04-21T13:30:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="委托"> 委托</h1>
<blockquote>
<p>[[Prototype]]机制是指对象的一个内部链接引用另一个对象。</p>
<p><strong>这个机制的本质是对象间的关联关系。</strong></p>
</blockquote>
<h2 id="面向委托的设计"> 面向委托的设计</h2>
<p>面向委托的设计是一种非常不同于面向类的设计模式。</p>
<p>接下来以一个例子介绍它们的不同。</p>
<h3 id="类理论"> 类理论</h3>
<p>类的设计方法可能是这样的:</p>
<ol>
<li>定义一个通用父(基)类，可以将其命名为 Task，在 Task 类中定义所有任务都有的行为。</li>
<li>接着定义子类 XYZ 和 ABC，它们都继承自 Task 并且会添加一些特殊的行为来处理对应的任务。</li>
</ol>
<p><strong>非常重要的是，类设计模式鼓励你在继承时使用方法重写(和多态)。</strong></p>
<p>你会发现许多行为可以先“抽象”到父类然后再用子类进行特殊化(重写)。</p>
<div><pre><code><span>class</span> <span>Task</span> <span>{</span>
  <span>constructor</span><span>(</span><span>id</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
  <span>}</span>
  <span>outputTask</span><span>(</span><span>)</span> <span>{</span> <span>// 子类都有的行为，等待被重写（多态）</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>id<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>XYZ</span> <span>extends</span> <span>Task</span> <span>{</span>
  <span>constructor</span><span>(</span><span>id<span>,</span> label</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>id<span>)</span><span>;</span>
    <span>this</span><span>.</span>label <span>=</span> label<span>;</span>
  <span>}</span>
  <span>outputTask</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>label<span>)</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>ABC</span> <span>extends</span> <span>Task</span> <span>{</span>
  <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="委托理论"> 委托理论</h3>
<div><pre><code><span>const</span> Task <span>=</span> <span>{</span>
  <span>setId</span><span>(</span><span>id</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>id <span>=</span> id<span>;</span>
  <span>}</span>
  <span>outputId</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>id<span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>const</span> <span>XYZ</span> <span>=</span> Object<span>.</span><span>create</span><span>(</span>Task<span>)</span><span>;</span> <span>// 建立关联，实现委托</span>

<span>XYZ</span><span>.</span><span>prepareTask</span> <span>=</span> <span>function</span><span>(</span><span>Id<span>,</span> Label</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>setId</span><span>(</span>Id<span>)</span><span>;</span> <span>// 委托给Task</span>
  <span>this</span><span>.</span>label <span>=</span> Label<span>;</span>
<span>}</span><span>;</span>
<span>XYZ</span><span>.</span><span>outputTaskDetails</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>outputId</span><span>(</span><span>)</span><span>;</span> <span>// 委托给Task</span>
  console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>label <span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// const ABC = Object.create(Task);</span>
<span>// ...</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>委托风格的几个特点：</p>
<ul>
<li>
<p>通常来说，在委托中最好把状态等数据成员保存在委托者(XYZ)上。</p>
</li>
<li>
<p>在类继承中，我们鼓励利用重写多态的优势，使得函数名相同，</p>
<p>但是在委托中，应该避免同名引起的屏蔽（参考原型链查找规则），且提倡使用更有描述性的方法名，尤其是要写清相应对象行为的类型。这样容易理解和维护代码。</p>
</li>
<li>
<p>在调用委托的函数时，比如setId、outputId，触发了this的<em>隐式绑定</em>，这是符合预期的。</p>
</li>
</ul>
<p>委托的几个注意点：</p>
<ul>
<li>
<p>互相委托是禁止的，因为引擎的开发者们发现在设置时检查并禁止一次无限循环引用要更加高效，否则每次从对象中查找属性时都需要进行检查。</p>
</li>
<li>
<p>当你使用对象关联风格来编写行为委托设计模式时，并不需要关注是谁“构造了”对象。</p>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>var</span> a1 <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span><span>;</span>

<span>// chrome</span>
a1<span>;</span> <span>// Foo {}</span>

<span>// firefox</span>
a1<span>;</span> <span>// Object {}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
</ul>
<p><strong>这是一种极其强大的设计模式，和父类、子类、继承、多态等概念完全不同。</strong></p>
<p>在你的脑海中对象并不是按照父类到子类的关系垂直组织的，而是通过任意方向的委托关联并排组织的。</p>
<h3 id="两者比较-委托更简洁"> 两者比较：委托更简洁</h3>
<p>参考以下两段代码：</p>
<ul>
<li>
<p>典型的基于原型的面向对象</p>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>who</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>me <span>=</span> who<span>;</span>
<span>}</span>
<span>Foo</span><span>.</span>prototype<span>.</span><span>identify</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>"I am "</span> <span>+</span> <span>this</span><span>.</span>me<span>;</span>
<span>}</span><span>;</span>

<span>function</span> <span>Bar</span><span>(</span><span>who</span><span>)</span> <span>{</span>
  <span>Foo</span><span>.</span><span>call</span><span>(</span> <span>this</span><span>,</span> who <span>)</span><span>;</span>
<span>}</span>
<span>Bar</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span> <span>Foo</span><span>.</span>prototype <span>)</span><span>;</span> <span>// “继承”</span>

<span>Bar</span><span>.</span>prototype<span>.</span><span>speak</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>alert</span><span>(</span> <span>"Hello, "</span> <span>+</span> <span>this</span><span>.</span><span>identify</span><span>(</span><span>)</span> <span>+</span> <span>"."</span> <span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>var</span> b1 <span>=</span> <span>new</span> <span>Bar</span><span>(</span> <span>"b1"</span> <span>)</span><span>;</span>
<span>var</span> b2 <span>=</span> <span>new</span> <span>Bar</span><span>(</span> <span>"b2"</span> <span>)</span><span>;</span>
b1<span>.</span><span>speak</span><span>(</span><span>)</span><span>;</span>
b2<span>.</span><span>speak</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>因为<code>原型、prototype属性、constructor</code>等的指向关系，</p>
<p>使得<code>Foo、Bar、Foo.prototype、Bar.prototype、Function、Function.prototype、Object.prototype</code>间的关系变得非常复杂。</p>
<p>(仔细整理一下下图的节点排列位置有利于看清它们间的关系。)</p>
<Mermaid id="mermaid_64a570a2" :graph="$dataBlock.mermaid_64a570a2"></Mermaid></li>
<li>
<p>委托风格</p>
<div><pre><code><span>const</span> Foo <span>=</span> <span>{</span>
  <span>init</span><span>:</span> <span>function</span><span>(</span><span>who</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>me <span>=</span> who<span>;</span>
  <span>}</span><span>,</span>
  <span>identify</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>"I am "</span> <span>+</span> <span>this</span><span>.</span>me<span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>const</span> Bar <span>=</span> Object<span>.</span><span>create</span><span>(</span> Foo <span>)</span><span>;</span> <span>// 委托</span>
Bar<span>.</span><span>speak</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>alert</span><span>(</span> <span>"Hello, "</span> <span>+</span> <span>this</span><span>.</span><span>identify</span><span>(</span><span>)</span> <span>+</span> <span>"."</span> <span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>let</span> b1 <span>=</span> Object<span>.</span><span>create</span><span>(</span> Bar <span>)</span><span>;</span>
<span>let</span> b2 <span>=</span> Object<span>.</span><span>create</span><span>(</span> Bar <span>)</span><span>;</span>
b1<span>.</span><span>init</span><span>(</span> <span>"b1"</span> <span>)</span><span>;</span>
b2<span>.</span><span>init</span><span>(</span> <span>"b2"</span> <span>)</span><span>;</span>
b1<span>.</span><span>speak</span><span>(</span><span>)</span><span>;</span>
b2<span>.</span><span>speak</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>通过比较可以看出，对象关联风格的代码显然更加简洁，因为这种代码只关注一件事：<strong>对象之间的关联关系</strong>。</p>
<p>其他的“类”技巧都是非常复杂并且令人困惑的。去掉它们之后，事情会变得简单许多 (同时保留所有功能)。</p>
<Mermaid id="mermaid_64a5705e" :graph="$dataBlock.mermaid_64a5705e"></Mermaid></li>
</ul>
<h2 id="类与委托实现控件-按钮控件实例"> 类与委托实现控件（按钮控件实例）</h2>
<h3 id="控件-类-实现"> 控件“类”实现</h3>
<div><pre><code><span>// 父类</span>
<span>function</span> <span>Widget</span><span>(</span><span>width<span>,</span>height</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>width <span>=</span> width <span>||</span> <span>50</span><span>;</span>
  <span>this</span><span>.</span>height <span>=</span> height <span>||</span> <span>50</span><span>;</span>
  <span>this</span><span>.</span>$elem <span>=</span> <span>null</span><span>;</span>
<span>}</span>
<span>Widget</span><span>.</span>prototype<span>.</span><span>render</span> <span>=</span> <span>function</span><span>(</span><span>$where</span><span>)</span><span>{</span>
  <span>if</span> <span>(</span><span>this</span><span>.</span>$elem<span>)</span> <span>{</span>
		<span>this</span><span>.</span>$elem<span>.</span><span>css</span><span>(</span> <span>{</span>
      width<span>:</span> <span>this</span><span>.</span>width <span>+</span> <span>"px"</span><span>,</span>
      height<span>:</span> <span>this</span><span>.</span>height <span>+</span> <span>"px"</span>
    <span>}</span> <span>)</span><span>.</span><span>appendTo</span><span>(</span> $where <span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
<span>// 子类</span>
<span>function</span> <span>Button</span><span>(</span><span>width<span>,</span>height<span>,</span>label</span><span>)</span> <span>{</span>
  <span>Widget</span><span>.</span><span>call</span><span>(</span> <span>this</span><span>,</span> width<span>,</span> height <span>)</span><span>;</span> <span>// 调用“super”构造函数</span>
  <span>this</span><span>.</span>label <span>=</span> label <span>||</span> <span>"Default"</span><span>;</span>
  <span>this</span><span>.</span>$elem <span>=</span> <span>$</span><span>(</span> <span>"&lt;button>"</span> <span>)</span><span>.</span><span>text</span><span>(</span> <span>this</span><span>.</span>label <span>)</span><span>;</span>
<span>}</span>

<span>Button</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span> <span>Widget</span><span>.</span>prototype <span>)</span><span>;</span> <span>// 让 Button“继承”Widget</span>
<span>// 重写 render</span>
<span>Button</span><span>.</span>prototype<span>.</span><span>render</span> <span>=</span> <span>function</span><span>(</span><span>$where</span><span>)</span> <span>{</span>
  <span>Widget</span><span>.</span>prototype<span>.</span><span>render</span><span>.</span><span>call</span><span>(</span> <span>this</span><span>,</span> $where <span>)</span><span>;</span> <span>//“super”调用</span>
  <span>this</span><span>.</span>$elem<span>.</span><span>click</span><span>(</span> <span>this</span><span>.</span><span>onClick</span><span>.</span><span>bind</span><span>(</span> <span>this</span> <span>)</span> <span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>Button</span><span>.</span>prototype<span>.</span><span>onClick</span> <span>=</span> <span>function</span><span>(</span><span>evt</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"Button '"</span> <span>+</span> <span>this</span><span>.</span>label <span>+</span> <span>"' clicked!"</span> <span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>$</span><span>(</span> document <span>)</span><span>.</span><span>ready</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span>
  <span>var</span> $body <span>=</span> <span>$</span><span>(</span> document<span>.</span>body <span>)</span><span>;</span>
  <span>var</span> btn1 <span>=</span> <span>new</span> <span>Button</span><span>(</span> <span>125</span><span>,</span> <span>30</span><span>,</span> <span>"Hello"</span> <span>)</span><span>;</span>
  <span>var</span> btn2 <span>=</span> <span>new</span> <span>Button</span><span>(</span> <span>150</span><span>,</span> <span>40</span><span>,</span> <span>"World"</span> <span>)</span><span>;</span>
  btn1<span>.</span><span>render</span><span>(</span> $body <span>)</span><span>;</span>
  btn2<span>.</span><span>render</span><span>(</span> $body <span>)</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><div><pre><code><span>class</span> <span>Widget</span> <span>{</span>
  <span>constructor</span><span>(</span><span>width<span>,</span>height</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>width <span>=</span> width <span>||</span> <span>50</span><span>;</span>
    <span>this</span><span>.</span>height <span>=</span> height <span>||</span> <span>50</span><span>;</span>
    <span>this</span><span>.</span>$elem <span>=</span> <span>null</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>$where</span><span>)</span><span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>$elem<span>)</span> <span>{</span>
      <span>this</span><span>.</span>$elem<span>.</span><span>css</span><span>(</span> <span>{</span>
        width<span>:</span> <span>this</span><span>.</span>width <span>+</span> <span>"px"</span><span>,</span>
        height<span>:</span> <span>this</span><span>.</span>height <span>+</span> <span>"px"</span>
      <span>}</span> <span>)</span><span>.</span><span>appendTo</span><span>(</span> $where <span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
<span>class</span> <span>Button</span> <span>extends</span> <span>Widget</span> <span>{</span>
  <span>constructor</span><span>(</span><span>width<span>,</span>height<span>,</span>label</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span> width<span>,</span> height <span>)</span><span>;</span>
    <span>this</span><span>.</span>label <span>=</span> label <span>||</span> <span>"Default"</span><span>;</span>
    <span>this</span><span>.</span>$elem <span>=</span> <span>$</span><span>(</span> <span>"&lt;button>"</span> <span>)</span><span>.</span><span>text</span><span>(</span> <span>this</span><span>.</span>label <span>)</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>$where</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span> $where <span>)</span><span>;</span>
    <span>this</span><span>.</span>$elem<span>.</span><span>click</span><span>(</span> <span>this</span><span>.</span><span>onClick</span><span>.</span><span>bind</span><span>(</span> <span>this</span> <span>)</span> <span>)</span><span>;</span>
  <span>}</span>
  <span>onClick</span><span>(</span><span>evt</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> <span>"Button '"</span> <span>+</span> <span>this</span><span>.</span>label <span>+</span> <span>"' clicked!"</span> <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>使用“基于原型的继承“代码中，除了有上一小节提到的关系混乱的缺点外，还有伪多态带来的麻烦，</p>
<p>比如<code>Widget. prototype.render.call</code> 从“子类”方法中引用“父类”中的基础方法。</p>
<p>在ES6的代码中<code>super函数</code>缓解了这个问题，但是这里并没有真正的类，<strong>class 仍然是通过 [[Prototype]] 机制实现的</strong>。</p>
<p>无论你使用的是传统的原型语法还是 ES6 中的新语法糖，你仍然需要用“类”的概念来对问题(UI 控件)进行建模。</p>
<h3 id="委托对象实现"> 委托对象实现</h3>
<div><pre><code><span>var</span> Widget <span>=</span> <span>{</span>
  <span>init</span><span>:</span> <span>function</span><span>(</span><span>width<span>,</span>height</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>width <span>=</span> width <span>||</span> <span>50</span><span>;</span>
    <span>this</span><span>.</span>height <span>=</span> height <span>||</span> <span>50</span><span>;</span>
    <span>this</span><span>.</span>$elem <span>=</span> <span>null</span><span>;</span>
  <span>}</span><span>,</span>
  <span>insert</span><span>:</span> <span>function</span><span>(</span><span>$where</span><span>)</span><span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>$elem<span>)</span> <span>{</span>
      <span>this</span><span>.</span>$elem<span>.</span><span>css</span><span>(</span> <span>{</span>
        width<span>:</span> <span>this</span><span>.</span>width <span>+</span> <span>"px"</span><span>,</span>
        height<span>:</span> <span>this</span><span>.</span>height <span>+</span> <span>"px"</span> <span>}</span> <span>)</span><span>.</span><span>appendTo</span><span>(</span> $where <span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>var</span> Button <span>=</span> Object<span>.</span><span>create</span><span>(</span> Widget <span>)</span><span>;</span>
Button<span>.</span><span>setup</span> <span>=</span> <span>function</span><span>(</span><span>width<span>,</span>height<span>,</span>label</span><span>)</span><span>{</span> <span>// 委托调用</span>
  <span>this</span><span>.</span><span>init</span><span>(</span> width<span>,</span> height <span>)</span><span>;</span>
  <span>this</span><span>.</span>label <span>=</span> label <span>||</span> <span>"Default"</span><span>;</span>
  <span>this</span><span>.</span>$elem <span>=</span> <span>$</span><span>(</span> <span>"&lt;button>"</span> <span>)</span><span>.</span><span>text</span><span>(</span> <span>this</span><span>.</span>label <span>)</span><span>;</span> <span>}</span><span>;</span>
Button<span>.</span><span>build</span> <span>=</span> <span>function</span><span>(</span><span>$where</span><span>)</span> <span>{</span>
  <span>// 委托调用</span>
  <span>this</span><span>.</span><span>insert</span><span>(</span> $where <span>)</span><span>;</span>
  <span>this</span><span>.</span>$elem<span>.</span><span>click</span><span>(</span> <span>this</span><span>.</span><span>onClick</span><span>.</span><span>bind</span><span>(</span> <span>this</span> <span>)</span> <span>)</span><span>;</span>
<span>}</span><span>;</span>
Button<span>.</span><span>onClick</span> <span>=</span> <span>function</span><span>(</span><span>evt</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"Button '"</span> <span>+</span> <span>this</span><span>.</span>label <span>+</span> <span>"' clicked!"</span> <span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>$</span><span>(</span> document <span>)</span><span>.</span><span>ready</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span>
  <span>var</span> $body <span>=</span> <span>$</span><span>(</span> document<span>.</span>body <span>)</span><span>;</span>
  <span>var</span> btn1 <span>=</span> Object<span>.</span><span>create</span><span>(</span> Button <span>)</span><span>;</span>
  <span>var</span> btn2 <span>=</span> Object<span>.</span><span>create</span><span>(</span> Button <span>)</span><span>;</span>
  btn1<span>.</span><span>setup</span><span>(</span> <span>125</span><span>,</span> <span>30</span><span>,</span> <span>"Hello"</span> <span>)</span><span>;</span>
  btn2<span>.</span><span>setup</span><span>(</span> <span>150</span><span>,</span> <span>40</span><span>,</span> <span>"World"</span> <span>)</span><span>;</span>
  btn1<span>.</span><span>build</span><span>(</span> $body <span>)</span><span>;</span>
  btn2<span>.</span><span>build</span><span>(</span> $body <span>)</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>同样地，我们建议在委托与被委托者间尽量不用同名函数，比如 <code>insert / build</code>，<code>init / setup</code>。</p>
<p>另外，与“类”实现相比，委托实现在调用<code>setup</code>函数前，不会被初始化。</p>
<p><strong>对象关联可以更好地支持关注分离(separation of concerns)原则，创建和初始化并不需要合并为一个步骤。</strong></p>
<h3 id="更简洁的代码-登录和验证实例"> 更简洁的代码（登录和验证实例）</h3>
<p>对象关联除了能让代码看起来更简洁并且更具扩展性外还可以通过行为委托模式简化代码结构。</p>
<p>我们来看最后一个例子，它展示了对象关联如何简化整体设计。</p>
<p>在这个场景中我们有两个控制器对象，一个用来操作网页中的登录表单，另一个用来与服 务器进行验证(通信)。</p>
<h4 id="类方法"> “类方法”</h4>
<div><pre><code><span>// 父类</span>
<span>function</span> <span>Controller</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>errors <span>=</span> <span>[</span><span>]</span><span>;</span>
<span>}</span>
<span>Controller</span><span>.</span>prototype<span>.</span><span>showDialog</span> <span>=</span> <span>function</span> <span>(</span><span>title<span>,</span> msg</span><span>)</span> <span>{</span><span>}</span><span>;</span> <span>// 给用户显示标题和消息</span>
<span>Controller</span><span>.</span>prototype<span>.</span><span>success</span> <span>=</span> <span>function</span> <span>(</span><span>msg</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>showDialog</span><span>(</span><span>"Success"</span><span>,</span> msg<span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>Controller</span><span>.</span>prototype<span>.</span><span>failure</span> <span>=</span> <span>function</span> <span>(</span><span>err</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>errors<span>.</span><span>push</span><span>(</span>err<span>)</span><span>;</span>
  <span>this</span><span>.</span><span>showDialog</span><span>(</span><span>"Error"</span><span>,</span> err<span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>// 子类</span>
<span>function</span> <span>LoginController</span><span>(</span><span>)</span> <span>{</span>
  <span>Controller</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span><span>;</span>
<span>}</span>

<span>// 把子类关联到父类</span>
<span>LoginController</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Controller</span><span>.</span>prototype<span>)</span><span>;</span>
<span>LoginController</span><span>.</span>prototype<span>.</span><span>getUser</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>return</span> document<span>.</span><span>getElementById</span><span>(</span><span>"login_username"</span><span>)</span><span>.</span>value<span>;</span>
<span>}</span><span>;</span>
<span>LoginController</span><span>.</span>prototype<span>.</span><span>getPassword</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>return</span> document<span>.</span><span>getElementById</span><span>(</span><span>"login_password"</span><span>)</span><span>.</span>value<span>;</span>
<span>}</span><span>;</span>
<span>LoginController</span><span>.</span>prototype<span>.</span><span>validateEntry</span> <span>=</span> <span>function</span> <span>(</span><span>user<span>,</span> pw</span><span>)</span> <span>{</span>
  user <span>=</span> user <span>||</span> <span>this</span><span>.</span><span>getUser</span><span>(</span><span>)</span><span>;</span>
  pw <span>=</span> pw <span>||</span> <span>this</span><span>.</span><span>getPassword</span><span>(</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span><span>!</span><span>(</span>user <span>&amp;&amp;</span> pw<span>)</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>failure</span><span>(</span>
      <span>"Please enter a username &amp; password!"</span>
    <span>)</span><span>;</span>
  <span>}</span>
  <span>else</span> <span>if</span> <span>(</span>user<span>.</span>length <span>&lt;</span> <span>5</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>failure</span><span>(</span>
      <span>"Password must be 5+ characters!"</span>
    <span>)</span><span>;</span>
  <span>}</span>
  <span>// 如果执行到这里说明通过验证</span>
  <span>return</span> <span>true</span><span>;</span>
<span>}</span><span>;</span>
<span>// 重写基础的 failure()</span>
<span>LoginController</span><span>.</span>prototype<span>.</span><span>failure</span> <span>=</span> <span>function</span><span>(</span><span>err</span><span>)</span> <span>{</span>
  <span>Controller</span><span>.</span>prototype<span>.</span><span>failure</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>"Login invalid: "</span> <span>+</span> err<span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>// 子类</span>
<span>function</span> <span>AuthController</span><span>(</span><span>login</span><span>)</span> <span>{</span>
  <span>Controller</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span><span>;</span> <span>// 合成</span>
  <span>this</span><span>.</span>login <span>=</span> login<span>;</span>
<span>}</span>
<span>// 把子类关联到父类</span>
<span>AuthController</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Controller</span><span>.</span>prototype<span>)</span><span>;</span>
<span>AuthController</span><span>.</span>prototype<span>.</span><span>server</span> <span>=</span> <span>function</span> <span>(</span><span>url<span>,</span> data</span><span>)</span> <span>{</span>
  <span>return</span> $<span>.</span><span>ajax</span><span>(</span><span>{</span>
    url<span>:</span> url<span>,</span>
    data<span>:</span> data
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>AuthController</span><span>.</span>prototype<span>.</span><span>checkAuth</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>var</span> user <span>=</span> <span>this</span><span>.</span>login<span>.</span><span>getUser</span><span>(</span><span>)</span><span>;</span>
  <span>var</span> pw <span>=</span> <span>this</span><span>.</span>login<span>.</span><span>getPassword</span><span>(</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span><span>this</span><span>.</span>login<span>.</span><span>validateEntry</span><span>(</span>user<span>,</span> pw<span>)</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>server</span><span>(</span><span>"/check-auth"</span><span>,</span> <span>{</span>
      user<span>:</span> user<span>,</span>
      pw<span>:</span> pw
    <span>}</span><span>)</span>
      <span>.</span><span>then</span><span>(</span><span>this</span><span>.</span><span>success</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span>
      <span>.</span><span>fail</span><span>(</span><span>this</span><span>.</span><span>failure</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
<span>// 重写基础的 success()</span>
<span>AuthController</span><span>.</span>prototype<span>.</span><span>success</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>Controller</span><span>.</span>prototype<span>.</span><span>success</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>"Authenticated!"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>// 重写基础的 failure()</span>
<span>AuthController</span><span>.</span>prototype<span>.</span><span>failure</span> <span>=</span> <span>function</span><span>(</span><span>err</span><span>)</span> <span>{</span>
  <span>Controller</span><span>.</span>prototype<span>.</span><span>failure</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>"Auth Failed: "</span> <span>+</span> err<span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>var</span> auth <span>=</span> <span>new</span> <span>AuthController</span><span>(</span><span>)</span><span>;</span>
auth<span>.</span><span>checkAuth</span><span>(</span><span>new</span> <span>LoginController</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// 除了继承，我们还需要合成</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br></div></div><p>AuthController 需要使用 LoginController，因此我们实例化后者(new LoginController)并用一个类成员属性 this.login 来引用它，这样 AuthController 就可以调用 LoginController 的行为。</p>
<p>你可能想让 AuthController 继承 LoginController 或者相反，这样我们就通 过继承链实现了真正的合成。</p>
<p>但是这就是类继承在问题领域建模时会产生的问题，因为 AuthController 和 LoginController 都不具备对方的基础行为， 所以这种<strong>继承关系是不恰当的</strong>。我们的解决办法是进行一些简单的合成从而让它们既不必互相继承又可以互相合作。</p>
<h4 id="委托-2"> 委托</h4>
<div><pre><code><span>var</span> LoginController <span>=</span> <span>{</span>
  errors<span>:</span> <span>[</span><span>]</span><span>,</span>
  <span>getUser</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>return</span> document<span>.</span><span>getElementById</span><span>(</span><span>"login_username"</span><span>)</span><span>.</span>value<span>;</span>
  <span>}</span><span>,</span>
  <span>getPassword</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>return</span> document<span>.</span><span>getElementById</span><span>(</span><span>"login_password"</span><span>)</span><span>.</span>value<span>;</span>
  <span>}</span><span>,</span>
  <span>validateEntry</span><span>:</span> <span>function</span> <span>(</span><span>user<span>,</span> pw</span><span>)</span> <span>{</span>
    user <span>=</span> user <span>||</span> <span>this</span><span>.</span><span>getUser</span><span>(</span><span>)</span><span>;</span>
    pw <span>=</span> pw <span>||</span> <span>this</span><span>.</span><span>getPassword</span><span>(</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span><span>!</span><span>(</span>user <span>&amp;&amp;</span> pw<span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>failure</span><span>(</span><span>"Please enter a username &amp; password!"</span><span>)</span><span>;</span>
    <span>}</span>
    <span>else</span> <span>if</span> <span>(</span>user<span>.</span>length <span>&lt;</span> <span>5</span><span>)</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>failure</span><span>(</span><span>"Password must be 5+ characters!"</span><span>)</span><span>;</span>
    <span>}</span>
    <span>// 如果执行到这里说明通过验证</span>
    <span>return</span> <span>true</span><span>;</span>
  <span>}</span><span>,</span>
  <span>showDialog</span><span>:</span> <span>function</span> <span>(</span><span>title<span>,</span> msg</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>// 给用户显示标题和消息</span>
  <span>failure</span><span>:</span> <span>function</span> <span>(</span><span>err</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>errors<span>.</span><span>push</span><span>(</span>err<span>)</span><span>;</span>
    <span>this</span><span>.</span><span>showDialog</span><span>(</span><span>"Error"</span><span>,</span> <span>"Login invalid: "</span> <span>+</span> err<span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>// 让 AuthController 委托 LoginController</span>
<span>var</span> AuthController <span>=</span> Object<span>.</span><span>create</span><span>(</span>LoginController<span>)</span><span>;</span>
AuthController<span>.</span>errors <span>=</span> <span>[</span><span>]</span><span>;</span>
AuthController<span>.</span><span>checkAuth</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>var</span> user <span>=</span> <span>this</span><span>.</span><span>getUser</span><span>(</span><span>)</span><span>;</span>
  <span>var</span> pw <span>=</span> <span>this</span><span>.</span><span>getPassword</span><span>(</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span><span>this</span><span>.</span><span>validateEntry</span><span>(</span>user<span>,</span> pw<span>)</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>server</span><span>(</span><span>"/check-auth"</span><span>,</span> <span>{</span>
      user<span>:</span> user<span>,</span>
      pw<span>:</span> pw
    <span>}</span><span>)</span>
    <span>.</span><span>then</span><span>(</span><span>this</span><span>.</span><span>accepted</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span>
    <span>.</span><span>fail</span><span>(</span><span>this</span><span>.</span><span>rejected</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
AuthController<span>.</span><span>server</span> <span>=</span> <span>function</span> <span>(</span><span>url<span>,</span> data</span><span>)</span> <span>{</span>
  <span>return</span> $<span>.</span><span>ajax</span><span>(</span><span>{</span>
    url<span>:</span> url<span>,</span>
    data<span>:</span> data
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
AuthController<span>.</span><span>accepted</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>showDialog</span><span>(</span><span>"Success"</span><span>,</span> <span>"Authenticated!"</span><span>)</span>
<span>}</span><span>;</span>
AuthController<span>.</span><span>rejected</span> <span>=</span> <span>function</span> <span>(</span><span>err</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>failure</span><span>(</span><span>"Auth Failed: "</span> <span>+</span> err<span>)</span><span>;</span>
<span>}</span><span>;</span>

AuthController<span>.</span><span>checkAuth</span><span>(</span><span>)</span><span>;</span>
<span>// 多个实例</span>
<span>var</span> controller1 <span>=</span> Object<span>.</span><span>create</span><span>(</span> AuthController <span>)</span><span>;</span>
<span>var</span> controller2 <span>=</span> Object<span>.</span><span>create</span><span>(</span> AuthController <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br></div></div><p>在行为委托模式中，AuthController 和 LoginController 只是对象，它们之间是兄弟关系， 并不是父类和子类的关系。</p>
<p>代码中 AuthController 委托了 LoginController，<em><strong>反向委托也完全没问题</strong></em>。</p>
<p>这种模式的重点在于只需要两个实体(LoginController 和 AuthController)，而之前的模式需要三个。</p>
<p>总结：我们用一种(极其)简单的设计实现了同样的功能，这就是对象关联风格代码和行为委托设计模式的力量。</p>
<h2 id="es6简洁语法"> ES6简洁语法</h2>
<p>可以利用ES6中的<code>Object.setPrototypeOf</code>来设置原型，替代原本的<code>Object.create</code>。</p>
<div><pre><code><span>let</span> AuthController <span>=</span> <span>{</span>
  <span>// ...</span>
<span>}</span>
<span>// 现在把 AuthController 关联到 LoginController</span>
Object<span>.</span><span>setPrototypeOf</span><span>(</span> AuthController<span>,</span> LoginController <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>ES6函数简洁语法的一个缺点：</p>
<div><pre><code><span>var</span> Foo <span>=</span> <span>{</span>
  <span>bar</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>baz</span><span>:</span> <span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span><span>;</span>
<span>// 去掉语法糖之后的代码</span>
<span>var</span> Foo <span>=</span> <span>{</span>
  <span>bar</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>// 匿名函数</span>
  <span>baz</span><span>:</span> <span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>匿名函数没有 name 标识符，这会导致:</p>
<ol>
<li>调试栈更难追踪;</li>
<li>自我引用(递归、事件(解除)绑定，等等)更难;</li>
<li>代码(稍微)更难理解。</li>
</ol>
<p>简洁方法无法避免第 2 个缺点，它们不具备可以自我引用的词法标识符。</p>
<p>如果你需要自我引用的话，那最好使用传统的具名函数表达式来定义对应的函数，不要使用简洁方法。</p>
<div><pre><code><span>var</span> Foo <span>=</span> <span>{</span>
  <span>bar</span><span>:</span> <span>function</span><span>(</span><span>x</span><span>)</span> <span>{</span>
    <span>if</span><span>(</span>x<span>&lt;</span><span>10</span><span>)</span><span>{</span>
      <span>return</span> Foo<span>.</span><span>bar</span><span>(</span> x <span>*</span> <span>2</span> <span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> x<span>;</span>
  <span>}</span><span>,</span>
  <span>baz</span><span>:</span> <span>function</span> <span>baz</span><span>(</span><span>x</span><span>)</span> <span>{</span>
    <span>if</span><span>(</span>x <span>&lt;</span> <span>10</span><span>)</span><span>{</span>
      <span>return</span> <span>baz</span><span>(</span> x <span>*</span> <span>2</span> <span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> x<span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="内省-判断a是否是b的实例或原型"> 内省(判断a是否是b的实例或原型)</h2>
<p>在面向类的程序中，内省的意思是检查实例的类型。</p>
<p>类实例的自省主要目的是通过创建方式来判断对象的结构和功能。</p>
<p>判断方法：</p>
<ul>
<li>
<p>第五章提到了<code>instanceof</code>操作符，这不是一个好的方法，容易让人误解。</p>
</li>
<li>
<p>鸭子类型，比如promise会有then方法，但有then方法的对象不一定是promise对象。</p>
</li>
<li>
<p><code>a.isPrototypeOf(b)</code>，这个方法回答a是否在b的原型链上。</p>
<div><pre><code><span>var</span> Foo <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>var</span> Bar <span>=</span> Object<span>.</span><span>create</span><span>(</span> Foo <span>)</span><span>;</span>
<span>var</span> b1 <span>=</span> Object<span>.</span><span>create</span><span>(</span> Bar <span>)</span><span>;</span>

Foo<span>.</span><span>isPrototypeOf</span><span>(</span> Bar <span>)</span><span>;</span> <span>// true</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span> Bar <span>)</span> <span>===</span> Foo<span>;</span> <span>// true</span>
<span>// 让b1关联到Foo和Bar</span>
Foo<span>.</span><span>isPrototypeOf</span><span>(</span> b1 <span>)</span><span>;</span> <span>// true</span>
Bar<span>.</span><span>isPrototypeOf</span><span>(</span> b1 <span>)</span><span>;</span> <span>// true</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span> b1 <span>)</span> <span>===</span> Bar<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
</ul>
<h2 id="小结"> 小结</h2>
<p>在软件架构中你可以选择是否使用类和继承设计模式。</p>
<p><strong>行为委托</strong>是比类少见但是更强大的设计模式。行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。</p>
<p><strong>JavaScript 的 [[Prototype]] 机制本质上就是行为委托机制。</strong></p>
<p>也就是说，我们可以选择在 JavaScript 中努力实现类机制(参见第 4 和第 5 章)，也可以拥抱更自然的 [[Prototype]] 委托机制。</p>
<p>只用对象来设计代码，可以让语法更加简洁，代码结构更加清晰。</p>
<p>对象关联是一种编码风格，它倡导的是<strong>直接创建和关联对象，不把它们抽象成类</strong>。</p>
<p>对象关联可以用基于 [[Prototype]] 的行为委托非常自然地实现。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">this详解</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-2%20this%E8%AF%A6%E8%A7%A3/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-2%20this%E8%AF%A6%E8%A7%A3/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="this详解"> this详解</h1>
<h2 id="绑定规则"> 绑定规则</h2>
<h3 id="默认绑定"> 默认绑定</h3>
<p><strong>独立函数调用</strong>作为最常用的函数调用类型，其应用的通常是<strong>默认绑定</strong>。</p>
<p><strong>当函数不带任何修饰被调用时，会应用默认绑定</strong>。比如<code>fn()</code>。</p>
<p><strong>默认绑定</strong>是无法应用其他规则时的默认规则。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>a<span>)</span><span>;</span> <span>// 默认绑定，this指向全局对象window</span>
<span>}</span>

<span>var</span> a <span>=</span> <span>2</span><span>;</span> <span>// 相当于window.a = 2;</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>需要注意的是，<strong>严格模式(strict mode)，那么全局对象将无法使用默认绑定</strong>。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>"use strict"</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>a <span>)</span><span>;</span>
<span>}</span>
<span>var</span> a <span>=</span> <span>2</span><span>;</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// TypeError: this is undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="隐式绑定"> 隐式绑定</h3>
<p>当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>a <span>)</span><span>;</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span>
  a<span>:</span> <span>2</span><span>,</span>
  foo
<span>}</span><span>;</span>
<span>// 隐式绑定，foo函数以 obj.foo 形式执行时，this隐式指向上下文对象obj。</span>
obj<span>.</span><span>foo</span><span>(</span><span>)</span><span>;</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id="隐式丢失"> 隐式丢失</h4>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>a <span>)</span><span>;</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span>
  a<span>:</span> <span>2</span><span>,</span>
  foo<span>:</span> foo
<span>}</span><span>;</span>
<span>var</span> bar <span>=</span> obj<span>.</span>foo<span>;</span> <span>// 函数别名!不带任何修饰被调用</span>
<span>var</span> a <span>=</span> <span>"oops, global"</span><span>;</span> <span>// a 是全局对象的属性</span>
<span>bar</span><span>(</span><span>)</span><span>;</span> <span>// "oops, global"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>a <span>)</span><span>;</span>
<span>}</span>
<span>function</span> <span>doFoo</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>// fn 其实引用的是 foo</span>
  <span>fn</span><span>(</span><span>)</span><span>;</span> <span>// &lt;-- 调用位置!</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span>
  a<span>:</span> <span>2</span><span>,</span>
  foo<span>:</span> foo
<span>}</span><span>;</span>
<span>var</span> a <span>=</span> <span>"oops, global"</span><span>;</span> <span>// a 是全局对象的属性</span>
<span>doFoo</span><span>(</span> obj<span>.</span>foo <span>)</span><span>;</span> <span>// "oops, global"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><strong>回调函数丢失this是非常常见的</strong>。</p>
<p>比如<code>setTimeout( obj.foo, 100 )</code>，因为JavaScript 环境中内置的 setTimeout() 函数实现和下面的伪代码类似:</p>
<div><pre><code><span>function</span> <span>setTimeout</span><span>(</span><span>fn<span>,</span>delay</span><span>)</span> <span>{</span> <span>// 等待 delay 毫秒</span>
  <span>fn</span><span>(</span><span>)</span><span>;</span> <span>// &lt;-- 调用位置!</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="显式绑定"> 显式绑定</h3>
<h4 id="call-apply"> <strong>call / apply</strong></h4>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>a <span>)</span><span>;</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span>
  a<span>:</span><span>2</span>
<span>}</span><span>;</span>

<span>// call / apply 将foo函数的 this 显示地绑定到 obj 上。</span>
<span>foo</span><span>.</span><span>call</span><span>(</span> obj <span>)</span><span>;</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><p>Tips</p>
<p>如果你传入了一个原始值(字符串类型、布尔类型或者数字类型)来当作 this 的绑定对象，这个原始值会被转换成它的对象形式(也就是new String()、new Boolean()或者 new Number())。</p>
<p>这通常被称为<strong>装箱</strong>。</p>
</div>
<p>call / apply 虽然可以指定一个函数的 this 指向，但是 foo 函数仍可以被作为值传递，引发 <strong>隐式丢失</strong> 的问题（参考上一小节）。</p>
<p>可以用 <strong>硬绑定</strong> 来强制指定 foo 函数的 this 指向。</p>
<ul>
<li>
<p>硬绑定 <code>bind</code></p>
<p><strong>硬绑定的典型应用场景就是创建一个包裹函数，传入所有的参数并返回接收到的所有值</strong></p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>something</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>a<span>,</span> something <span>)</span><span>;</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span>
  a<span>:</span><span>2</span>
<span>}</span><span>;</span>

<span>// 只将bar暴露出去，无法通过bar改变foo的this。</span>
<span>var</span> <span>bar</span> <span>=</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
  <span>return</span> <span>foo</span><span>.</span><span>apply</span><span>(</span> obj<span>,</span> args <span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>bar</span><span>(</span> <span>'arg'</span> <span>)</span><span>;</span> <span>// 打印 2 arg</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>另一个办法是创建一个辅助的 <strong>bind函数</strong>。</p>
<div><pre><code><span>// 简单的辅助绑定函数</span>
<span>function</span> <span>bind</span><span>(</span><span>fn<span>,</span> obj</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>fn</span><span>.</span><span>apply</span><span>(</span> obj<span>,</span> arguments <span>)</span><span>;</span>
  <span>}</span><span>;</span>
<span>}</span>

<span>var</span> bar <span>=</span> <span>bind</span><span>(</span> foo<span>,</span> obj <span>)</span><span>;</span>
<span>bar</span><span>(</span><span>'arg'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>由于硬绑定是非常常用的模式，ES5 中提供了内置的方法 <code>Function.prototype.bind</code>，</p>
<p>bind函数会返回一个硬编码的新函数，它会把参数设置为 this 的上下文并调用原始函数。</p>
<div><pre><code><span>var</span> bar <span>=</span> <span>foo</span><span>.</span><span>bind</span><span>(</span> obj <span>)</span>
<span>bar</span><span>(</span><span>'arg'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>指定API调用的上下文</p>
<p>第三方库的许多函数，以及 JavaScript 语言和宿主环境中许多新的内置函数，都提供了一 个可选的参数，通常被称为“上下文”(context)，其作用和 bind 一样，确保你的回调函数使用指定的 this。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>el</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> el<span>,</span> <span>this</span><span>.</span>id <span>)</span><span>;</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span>
  id<span>:</span> <span>"id"</span>
<span>}</span><span>;</span>

<span>// 实际上就是通过 call 或者 apply 实现了显式绑定，少写些代码</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>forEach</span><span>(</span> foo<span>,</span> <span>/* 把 this 绑定到obj */</span> obj <span>)</span><span>;</span> <span>// 1 id 2 id 3 id</span>

<span>// 如果不传入obj给forEach，foo函数的this会应用默认绑定，指向window</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>forEach</span><span>(</span> foo <span>)</span><span>;</span> <span>// 1 undefined 2 undefined 3 undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
</ul>
<h3 id="new-绑定"> new 绑定</h3>
<h4 id="关于new的误解"> 关于new的误解</h4>
<p><strong>JavaScript 中 new 的机制实际上和面向类的语言完全不同。</strong></p>
<p>new 操作符后面跟的函数，不是一个类，也不是什么特殊类型的函数，<strong>它只是被 new 操作符调用的普通函数而已</strong>。</p>
<p><strong>实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”</strong>。</p>
<div><p>Info</p>
<p>可以认为new操作符是为了模仿传统面向类语言而加入的，JavaScript中只有对象和函数，没有类。</p>
<p>但是为了便于理解，可以将它们称为类、构造函数。</p>
</div>
<p>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作：</p>
<ol>
<li>创建(或者说构造)一个全新的对象。</li>
<li>这个新对象会被执行[[原型]]连接。</li>
<li><strong>这个新对象会绑定到函数调用的this。</strong></li>
<li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。</li>
</ol>
<p>第三步就是所谓的“new 绑定”。</p>
<h2 id="绑定规则的优先级"> 绑定规则的优先级</h2>
<p>总结来说就是<strong>new绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</strong>。</p>
<ol>
<li>
<p>函数是否在new中调用(new绑定)? 如果是的话this绑定的是新创建的对象。</p>
<div><pre><code><span>var</span> bar <span>=</span> <span>new</span> <span>foo</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>函数是否通过call、apply(显式绑定)或者硬绑定调用?如果是的话，this绑定的是指定的对象。</p>
<div><pre><code><span>var</span> bar <span>=</span> <span>foo</span><span>.</span><span>call</span><span>(</span>obj2<span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>函数是否在某个上下文对象中调用(隐式绑定)?如果是的话，this 绑定的是那个上下文对象。</p>
<div><pre><code><span>var</span> bar <span>=</span> obj1<span>.</span><span>foo</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到全局对象。</p>
<div><pre><code><span>var</span> bar <span>=</span> <span>foo</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
</ol>
<p>针对 new绑定 &gt; 显式绑定 可以详细说下。</p>
<p>MDN 提供的一种bind实现：</p>
<div><pre><code><span>if</span> <span>(</span><span>!</span><span>Function</span><span>.</span>prototype<span>.</span>bind<span>)</span> <span>{</span>
  <span>Function</span><span>.</span>prototype<span>.</span><span>bind</span> <span>=</span> <span>function</span><span>(</span><span>oThis</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>typeof</span> <span>this</span> <span>!==</span> <span>"function"</span><span>)</span> <span>{</span>
      <span>// 与 ECMAScript 5 最接近的</span>
      <span>// 内部 IsCallable 函数</span>
      <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span>
        <span>"Function.prototype.bind - what is trying "</span> <span>+</span> <span>"to be bound is not callable"</span>
      <span>)</span><span>;</span>
    <span>}</span>

    <span>var</span> aArgs <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span> arguments<span>,</span> <span>1</span> <span>)</span><span>,</span>
        fToBind <span>=</span> <span>this</span><span>,</span>
        <span>fNOP</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>,</span>
        <span>fBound</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
          <span>return</span> <span>fToBind</span><span>.</span><span>apply</span><span>(</span>
            <span>// 判断硬绑定函数是否是被 new 调用，如果是的话就会使用新创建 的 this 替换硬绑定的 this</span>
            <span>(</span><span>this</span> <span>instanceof</span> <span>fNOP</span> <span>&amp;&amp;</span> oThis <span>?</span> <span>this</span> <span>:</span> oThis<span>)</span><span>,</span>
             aArgs<span>.</span><span>concat</span><span>(</span><span>Array</span><span>.</span>prototype<span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span> arguments <span>)</span>
          <span>)</span><span>;</span>
        <span>}</span><span>;</span>
    
    fNOP<span>.</span>prototype <span>=</span> <span>this</span><span>.</span>prototype<span>;</span>
    fBound<span>.</span>prototype <span>=</span> <span>new</span> <span>fNOP</span><span>(</span><span>)</span><span>;</span>
    
    <span>return</span> fBound<span>;</span>
  <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="绑定例外"> 绑定例外</h2>
<p>前面提到，用 <code>call / apply</code> 可以显式绑定一个对象。</p>
<p>但是把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值</p>
<p>在调用时会被忽略，实际应用的是<strong>默认绑定规则</strong>。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>a<span>,</span>b</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"a:"</span> <span>+</span> a <span>+</span> <span>", b:"</span> <span>+</span> b <span>)</span><span>;</span>
<span>}</span>

<span>// 使用 bind(..) 进行柯里化</span>
<span>var</span> bar <span>=</span> <span>foo</span><span>.</span><span>bind</span><span>(</span> <span>null</span><span>,</span> <span>2</span> <span>)</span><span>;</span>
<span>bar</span><span>(</span> <span>3</span> <span>)</span><span>;</span> <span>// a:2, b:3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在上面这个例子中，为了对函数柯里化，需要传入一个参数当作 this 的绑定对象。</p>
<p>如果函数并不关心 this 的话，你仍然需要传入一个占位值，这时 null 可能是一个不错的选择。</p>
<p>事实上，如果对一些第三方函数柯里化，而这个函数又关心this，就会出现不可预测的结果。</p>
<p>为此，可以传入一个DMZ”(demilitarized zone，非军事区)对象。</p>
<div><pre><code><span>// Object.create(null) 和 {} 很像，但是并不会创建 Object.prototype 这个委托，所以它比 {}“更空”</span>
<span>var</span> <span>DMZ</span> <span>=</span> Object<span>.</span><span>create</span><span>(</span> <span>null</span> <span>)</span><span>;</span>
<span>var</span> bar <span>=</span> <span>foo</span><span>.</span><span>bind</span><span>(</span> <span>DMZ</span><span>,</span> <span>2</span> <span>)</span><span>;</span>
<span>bar</span><span>(</span> <span>3</span> <span>)</span><span>;</span> <span>// a:2, b:3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="软绑定"> 软绑定</h3>
<p>使用<strong>硬绑定</strong>可以把this强制绑定到指定对象，防止函数调用应用默认绑定规则。</p>
<p>但是这会大大降低函数的灵活性，<strong>硬绑定后无法使用隐式绑定或者显式绑定来修改 this</strong>。</p>
<p>如果可以给默认绑定指定一个<strong>全局对象和 undefined 以外</strong>的值，那就可以实现和硬绑定相同的效果，同时保留隐式绑定或者显式绑定修改 this 的能力。</p>
<div><pre><code><span>if</span> <span>(</span><span>!</span><span>Function</span><span>.</span>prototype<span>.</span>softBind<span>)</span> <span>{</span>
  <span>Function</span><span>.</span>prototype<span>.</span><span>softBind</span> <span>=</span> <span>function</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
    <span>var</span> fn <span>=</span> <span>this</span><span>;</span>
    <span>// 捕获所有 curried 参数</span>
    <span>var</span> curried <span>=</span> <span>[</span><span>]</span><span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span> arguments<span>,</span> <span>1</span> <span>)</span><span>;</span>
    <span>var</span> <span>bound</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>fn</span><span>.</span><span>apply</span><span>(</span>
        <span>/* 检查调用时的 this，如果 this 绑定到全局对象或者 undefined，
           那就把指定的默认对象 obj 绑定到 this，否则不会修改 this。 */</span>
        <span>(</span><span>!</span><span>this</span> <span>||</span> <span>this</span> <span>===</span> <span>(</span>window <span>||</span> global<span>)</span><span>)</span> <span>?</span> obj <span>:</span> <span>this</span><span>,</span>
        curried<span>.</span><span>concat</span><span>.</span><span>apply</span><span>(</span> curried<span>,</span> arguments <span>)</span>
      <span>)</span><span>;</span>
    <span>}</span><span>;</span>

    bound<span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span> fn<span>.</span>prototype <span>)</span><span>;</span>
    <span>return</span> bound<span>;</span>
  <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>软绑定的例子：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"name: "</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span><span>;</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span> name<span>:</span> <span>"obj"</span> <span>}</span><span>,</span>
    obj2 <span>=</span> <span>{</span> name<span>:</span> <span>"obj2"</span> <span>}</span><span>,</span>
    obj3 <span>=</span> <span>{</span> name<span>:</span> <span>"obj3"</span> <span>}</span><span>;</span>

<span>var</span> fooOBJ <span>=</span> foo<span>.</span><span>softBind</span><span>(</span> obj <span>)</span><span>;</span>
<span>fooOBJ</span><span>(</span><span>)</span><span>;</span> <span>// name: obj</span>

obj2<span>.</span>foo <span>=</span> foo<span>.</span><span>softBind</span><span>(</span>obj<span>)</span><span>;</span>
obj2<span>.</span><span>foo</span><span>(</span><span>)</span><span>;</span> <span>// name: obj2 &lt;---- 看!!!</span>

<span>fooOBJ</span><span>.</span><span>call</span><span>(</span> obj3 <span>)</span><span>;</span> <span>// name: obj3 &lt;---- 看!</span>
<span>setTimeout</span><span>(</span> obj2<span>.</span>foo<span>,</span> <span>10</span> <span>)</span><span>;</span>
<span>// name: obj &lt;---- 应用了软绑定</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="箭头函数与this"> 箭头函数与this</h3>
<p><strong>箭头函数不使用 this 的四种标准规则，而是根据外层(函数或者全局)作用域来决定 this</strong>。</p>
<p><em>new 操作符也不能改变箭头函数的 this 指向</em>。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span><span>a</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> <span>this</span><span>.</span>a <span>)</span><span>;</span> <span>//this 继承自 foo()</span>
  <span>}</span><span>;</span>
<span>}</span>
<span>var</span> obj1 <span>=</span> <span>{</span> a<span>:</span><span>2</span> <span>}</span><span>;</span>
<span>var</span> obj2 <span>=</span> <span>{</span> a<span>:</span><span>3</span> <span>}</span><span>;</span>

<span>var</span> bar <span>=</span> <span>foo</span><span>.</span><span>call</span><span>(</span> obj1 <span>)</span><span>;</span> <span>// foo() 内部创建的箭头函数会捕获调用时 foo() 的 this</span>
<span>bar</span><span>.</span><span>call</span><span>(</span> obj2 <span>)</span><span>;</span> <span>// 2, 不是 3, this指向obj1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>如果你经常编写 this 风格的代码，但是绝大部分时候都会使用 self = this 或者箭头函数来否定 this 机制，那你或许应当:</p>
<ol>
<li>只使用词法作用域并完全抛弃错误this风格的代码;</li>
<li>完全采用 this 风格，在必要时使用 bind，尽量避免使用 self = this 和箭头函数。</li>
</ol>
<h2 id="小结"> 小结</h2>
<p>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。</p>
<p>找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p>
<ul>
<li>由new调用?绑定到新创建的对象。</li>
<li>由call或者apply(或者bind)调用?绑定到指定的对象。</li>
<li>由上下文对象调用?绑定到那个上下文对象。</li>
<li>默认:在严格模式下绑定到undefined，否则绑定到全局对象。</li>
</ul>
<p>一定要注意，有些调用可能在无意中使用默认绑定规则。</p>
<p>如果想“更安全”地忽略 this 绑 定，你可以使用一个 DMZ 对象，比如 ø = Object.create(null)，以保护全局对象。</p>
<p>ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定(无论 this 绑定到什么)。这其实和 ES6 之前代码中的 self = this 机制一样。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">动态作用域</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%95/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%95/"/>
    <updated>2021-04-21T13:30:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="动态作用域"> 动态作用域</h2>
<p>词法作用域是一套关于<strong>引擎如何寻找变量以及会在何处找到变量的规则</strong>。</p>
<p>词法作用域最重要的特征是<strong>它的定义过程发生在代码的书写阶段</strong>(假设你没有使用 eval() 或 with)。</p>
<p>词法作用域是在写代码或者说<strong>定义时确定</strong>的，而动态作用域是在<strong>运行时确定</strong>的。(this 也是!)</p>
<p>词法作用域关注函数<strong>在何处声明</strong>，而动态作用域关注函数<strong>从何处调用</strong>。</p>
<h2 id="es6中的class"> ES6中的Class</h2>
<p>一句话总结本书第二部分的第4-6章：<strong>类是一种可选的设计模式，而且在 JavaScript 这样的 [[Prototype]] 语言中实现类是很别扭的</strong>。</p>
<p>别扭的原因：</p>
<ul>
<li>
<p>语法原因</p>
<ul>
<li>繁琐杂乱的 .prototype 引用</li>
<li>试图调用原型链上层同名函数时的显式伪多态(参见第 4 章)<code>FatherClass.prototype.foo.call(this)</code>。</li>
<li>不可靠、不美观而且容易被误解成“构造函数”的constructor。</li>
</ul>
</li>
<li>
<p>传统面向类的语言中父类和子类、子类和实例之间其实是复制操作，但是在 [[Prototype]] 中并没有复制，相反，它们之间只有委托关联。</p>
</li>
</ul>
<h3 id="class语法解决的问题"> class语法解决的问题</h3>
<ul>
<li>
<p>语法变简洁</p>
<ul>
<li>没有杂乱的prototype</li>
<li>提供了extends关键字来“继承”，取代了原来的<code>Object.create</code>或<code>Object.setPrototypeOf</code></li>
</ul>
</li>
<li>
<p>可以通过<code>super</code>来实现相对多态，方便引用原型链上层的同名方法。</p>
<p>这可以解决第 4 章提到的: 构造函数不属于类，所以无法互相引用。</p>
<p>super() 可以完美解决构造函数的问题。</p>
</li>
<li>
<p><strong>class 字面语法不能声明属性只能声明方法</strong>。这可以帮助你避免犯错。</p>
</li>
<li>
<p>可以通过extends很自然地扩展对象类型，甚至是内置的对象，比如 Array 或 RegExp。</p>
<p>没有 extends 语法时，想实现这一点是非常困难的，基本上只有框架的作者才能搞清楚这一点。但是现在可以轻而易举地做到。</p>
</li>
</ul>
<h3 id="class语法带来的问题"> class语法带来的问题</h3>
<p><strong>class 基本上只是现有 [[Prototype]]机制的一种语法糖。</strong></p>
<ul>
<li>
<p>class 并不会像传统面向类的语言一样在声明时静态复制所有行为。</p>
<p>对“父类”方法的修改会影响到所有子类和实例。传统的面向类语言在类定义后便不可修改。</p>
<div><pre><code><span>class</span> <span>C</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>rand</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'foo'</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>
<span>var</span> c1 <span>=</span> <span>new</span> <span>C</span><span>(</span><span>)</span><span>;</span>
c1<span>.</span><span>rand</span><span>(</span><span>)</span><span>;</span> <span>// foo</span>
<span>C</span><span>.</span>prototype<span>.</span><span>rand</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span> <span>// 仍是基于原型的设计</span>
  console<span>.</span><span>log</span><span>(</span> <span>'bar'</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
<span>var</span> c2 <span>=</span> <span>new</span> <span>C</span><span>(</span><span>)</span><span>;</span>
c2<span>.</span><span>rand</span><span>(</span><span>)</span><span>;</span> <span>// bar</span>
ci<span>.</span><span>rand</span><span>(</span><span>)</span><span>;</span> <span>// bar 已创建的实例也被影响到</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>class 语法无法定义类成员属性(只能定义方法)。如果实在要跟踪实例之间共享状态，只好挂在prototype上。</p>
<div><pre><code><span>class</span> <span>C</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>// 确保修改的是共享状态而不是在实例上创建一个屏蔽属性!</span>
    <span>C</span><span>.</span>prototype<span>.</span>count<span>++</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span> <span>"Hello: "</span> <span>+</span> <span>this</span><span>.</span>count <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>// 直接向 prototype 对象上添加一个共享状态</span>
<span>C</span><span>.</span>prototype<span>.</span>count <span>=</span> <span>0</span><span>;</span>
<span>var</span> c1 <span>=</span> <span>new</span> <span>C</span><span>(</span><span>)</span><span>;</span> <span>// Hello: 1</span>
<span>var</span> c2 <span>=</span> <span>new</span> <span>C</span><span>(</span><span>)</span><span>;</span> <span>// Hello: 2</span>
c1<span>.</span>count <span>===</span> <span>2</span><span>;</span> <span>// true</span>
c1<span>.</span>count <span>===</span> c2<span>.</span>count<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>这种方法最大的问题是，它违背了 class 语法的本意，在实现中暴露了 prototype。</p>
<p>如果使用 this.count++ 的话，我们会很惊讶地发现在对象 c1 和 c2 上都创建了 .count 属性，而不是更新共享状态。</p>
<p>class 没有办法解决这个问题，并且干脆就不提供相应的语法支持，<strong>所以你根本就不应该这样做</strong>。</p>
</li>
<li>
<p>属性屏蔽方法</p>
<div><pre><code><span>class</span> <span>C</span> <span>{</span>
  <span>constructor</span><span>(</span><span>id</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>id <span>=</span> id<span>;</span> <span>// id属性屏蔽了id方法</span>
  <span>}</span>
  <span>id</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span>
c1<span>.</span><span>id</span><span>(</span><span>)</span><span>;</span> <span>// TypeError</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>super函数的绑定</p>
<p><strong>super 并不是动态绑定的，它会在声明时“静态”绑定。</strong></p>
<div><pre><code><span>class</span> <span>P</span> <span>{</span>
  <span>foo</span><span>(</span><span>)</span> <span>{</span> console<span>.</span><span>log</span><span>(</span> <span>"P.foo"</span> <span>)</span><span>;</span> <span>}</span>
<span>}</span>
<span>class</span> <span>C</span> <span>extends</span> <span>P</span> <span>{</span>
  <span>foo</span><span>(</span><span>)</span> <span>{</span> <span>super</span><span>(</span><span>)</span><span>;</span> <span>}</span>
<span>}</span>
<span>var</span> c1 <span>=</span> <span>new</span> <span>C</span><span>(</span><span>)</span><span>;</span>
c1<span>.</span><span>foo</span><span>(</span><span>)</span><span>;</span> <span>// "P.foo" 符合预期</span>
<span>var</span> <span>D</span> <span>=</span> <span>{</span>
  <span>foo</span><span>(</span><span>)</span> <span>{</span> console<span>.</span><span>log</span><span>(</span> <span>"D.foo"</span> <span>)</span><span>;</span> <span>}</span>
<span>}</span><span>;</span>
<span>var</span> <span>E</span> <span>=</span> <span>{</span>
  foo<span>:</span> <span>C</span><span>.</span>prototype<span>.</span>foo
<span>}</span><span>;</span>

Object<span>.</span><span>setPrototypeOf</span><span>(</span> <span>E</span><span>,</span> <span>D</span> <span>)</span><span>;</span>
<span>// E的原型是D，按动态绑定super来说E.foo中的super应该调用D.foo</span>
<span>E</span><span>.</span><span>foo</span><span>(</span><span>)</span><span>;</span> <span>// "P.foo"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p><strong>出于性能考虑，super 并不像 this 一样是晚绑定(late bound，或者说动态绑定)的，它在 [[HomeObject]].[[Prototype]] 上，[[HomeObject]] 会在创建时静态绑定。</strong></p>
<p>在本例中，super() 会调用 P.foo()，因为super的 [[HomeObject]] 仍然是 C，C.[[Prototype]] 是 P。</p>
<p>解决办法：</p>
<p>toMethod 会复制方法并把 homeObject 当作第一个参数，第二个参数(可选)是新方法的名称(默认是原方法名)。</p>
<div><pre><code><span>var</span> <span>E</span> <span>=</span> <span>{</span>
  foo<span>:</span> <span>C</span><span>.</span>prototype<span>.</span>foo<span>.</span><span>toMethod</span><span>(</span> <span>E</span><span>,</span> <span>"foo"</span> <span>)</span><span>;</span> <span>// 将HomeObject改为E</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h3 id="class的静态与动态问题"> class的静态与动态问题</h3>
<p>在传统面向类的语言中，类定义之后就不会进行修改，所以类的设计模式就不支持修改。</p>
<p>但是 JavaScript 最强大的特性之一就是它的动态性，任何对象的定义都可以修改(除非你把它设置成不可变)。</p>
<p>class 似乎不赞成这样做，所以强制让你使用丑陋的 prototype 语法以及 super 。</p>
<p>而且对于这种动态产生的问题，class 基本上都没有提供解决方案。</p>
<p>总地来说，ES6 的 class 想伪装成一种很好的语法问题的解决方案，但是实际上却让问题更难解决而且让 JavaScript 更加难以理解。</p>
<h2 id="小结"> 小结</h2>
<p>class 很好地伪装成 JavaScript 中类和继承设计模式的解决方案，但是它实际上起到了反作用:它隐藏了许多问题并且带来了更多更细小但是危险的问题。</p>
<p>class 加深了过去 20 年中对于 JavaScript 中“类”的误解，在某些方面，它产生的问题比解决的多，而且让本来优雅简洁的 [[Prototype]]机制变得非常别扭。</p>
<p>结论：ES6 的 class 让 [[Prototype]] 变得更加难用而且隐藏了 JavaScript 对象最重要的机制——对象之间的实时委托关联，应该抵制这种设计模式。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">深入编程</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/1-1%20%E6%B7%B1%E5%85%A5%E7%BC%96%E7%A8%8B/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/1-1%20%E6%B7%B1%E5%85%A5%E7%BC%96%E7%A8%8B/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="深入编程"> 深入编程</h1>
<p>本部分介绍了编程中的一系列基本概念，并有助于你更好地理解本系列其余几本书的内 容。</p>
<p>第 1 章总结了深入学习和实践编程所需要的知识。</p>
<p>在熟悉了常用的基础编程概念后，第 2 章将帮助你熟悉 JavaScript 的编程风格。</p>
<p>（第1，2章不详细记录，只记录下目录）</p>
<ol>
<li>代码</li>
<li>表达式</li>
<li>实践</li>
<li>运算符</li>
<li>值与类型</li>
<li>代码注释</li>
<li>变量</li>
<li>块</li>
<li>条件判断</li>
<li>循环</li>
<li>函数</li>
<li>实践</li>
</ol>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">深入JavaScript</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/1-2%20%E6%B7%B1%E5%85%A5JavaScript/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/1-2%20%E6%B7%B1%E5%85%A5JavaScript/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="深入javascript"> 深入JavaScript</h1>
<ol>
<li>值与类型</li>
<li>变量</li>
<li>条件判断</li>
<li>严格模式</li>
<li>作为值的函数</li>
<li>this标识符</li>
<li>原型</li>
<li>旧与新</li>
<li>非JavaScript</li>
</ol>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">深入“你不知道的JavaScript系列”</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/1-3%20YDKJS%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/1-3%20YDKJS%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="深入-你不知道的javascript系列"> 深入“你不知道的JavaScript系列”</h1>
<p>简单地说，《你不知道的JavaScript系列》这个系列视学习<strong>全部的 JavaScript</strong> 为一个严肃的任务，不仅仅是这门语言中被称为“精髓”的某个子集，也不是你完成工作所需要的最小集合。</p>
<h2 id="作用域与闭包"> 作用域与闭包</h2>
<p>变量的作用域到底是如何在 JavaScript 中工作的？这可能是你需要快速理解的一个最基础的事情了。</p>
<p>“作用域和闭包”这部分从批判 JavaScript 是“解释性语言”因而无法编译这一常见误解开始。事实并非如此。</p>
<p>JavaScript 引擎在执行前(有时是执行中)就编译了代码。因此，通过深入理解编译器对代码的处理方式，我们可以尝试理解它是如何找到并处理变量和函数声明的。沿着这条路，我们看到了 <strong>JavaScript 变量作用域管理的常见方式——“提升”</strong>。</p>
<p><strong>对“词法作用域”的关键理解是研究闭包的基础</strong>。闭包可能是 JavaScript 所有概念中最重要的一个，但如果你没有深刻了解作用域的工作原理， 那么很可能就无法理解闭包。</p>
<p>正如我们在第 2 章中简单提到的那样，闭包的一个重要应用就是<strong>模块模式</strong>。模块模式可能是 JavaScript 所有代码组织模式中最普遍的方法。<strong>深入理解模块模式应该是你最高优先级的任务之一</strong>。</p>
<h2 id="this-和对象原型"> this 和对象原型</h2>
<p>有关 JavaScript 流传最广、最持久的不实论点是，关键词 this 指向它所在的函数。这简直错得离谱。</p>
<p><strong>关键词 this 是根据相关函数的执行方式而动态绑定的</strong>。事实证明，可以通过 4 条简单的规则理解并完全确定 this 绑定。</p>
<ul>
<li>由new调用?绑定到新创建的对象。</li>
<li>由call或者apply(或者bind)调用?绑定到指定的对象。</li>
<li>由上下文对象调用?绑定到那个上下文对象。</li>
<li>默认:在严格模式下绑定到undefined，否则绑定到全局对象。</li>
</ul>
<p>与 this 紧密关联的是对象原型机制，这种机制是一个<strong>属性查找链</strong>，与寻找词法作用域变量的方式类似。但在原型中进行封装，即模拟类和继承，是<strong>对 JavaScript 的另一个重大误用</strong>。</p>
<p>不幸的是，将类和继承的设计模式思维带入 JavaScript 的想法是你所做的最坏的事情，因为语法可能会让你迷惑不已，让你以为真的有类这样的东西存在，<strong>实际上原型机制与类的行为特性是完全相反的</strong>。</p>
<p>对象原型系统真实的工作方式可以被更合理地命名为“行为委托”。</p>
<p>这不只是语法偏好的问题。<strong>委托是完全不同的设计模式，也更加强大，它取代了需要类和继承的设计</strong>。</p>
<h2 id="类型和语法"> 类型和语法</h2>
<p>“类型和语法”这部分主要关注另一个高度争议的主题:强制类型转换。</p>
<p>类型转换是非常有用且被低估了的工具，你应该在自己的代码中使用它。在我看来，如果能够正确使用的话，类型转换不仅能够工作，而且也会让你的代码质量更高。</p>
<h2 id="异步和性能"> 异步和性能</h2>
<p><em>作用域和闭包</em> <em>this 和 对象原型</em> 以及 <em>类型和语法</em> 关注的都是<strong>语言的核心机制</strong>，而 <em>异步和性能</em> 则稍微偏重于<strong>在语言机制之上处理异步编程的模式</strong>。异步不只是对应用的性能至关重要，而且正在慢慢成为代码易写性和可维护性方面的关键因素。</p>
<p><em>异步</em> 和 <em>性能</em> 部分一开始明确了大量的术语和概念，如 <em>异步</em> <em>并行</em> 和 <em>并发</em> 这些概念，并深入解释了这些概念为什么适用或不适用于 JavaScript。</p>
<p>然后我们查看了回调这个使得异步成为可能的基本方法。但我们很快就看到，单独使用回调完全不足以满足当代异步编程的需求。我们确定了两种只用回调编码的缺陷:控制反转 (Inversion of Control，IoC)信任缺失和线性理解能力的缺失。</p>
<p>为了避免这两个主要的缺陷，ES6 引入了新的机制(实际上是模式):promise 和生成器。</p>
<p>promise 是对“未来值”的与时间无关的封装，使得不管这个值是否已经可用，你都可以推导和组合使用它们。另外，通过一种可信任的、可组合的 promise 机制，分发回调它们也有效地解决了 IoC 信任问题。</p>
<p>生成器为 JavaScript 函数引入了一种新的执行模式，其中生成器可以暂停在 yield 点上， 并在之后被异步继续。暂停与继续的能力使得生成器中同步的、看似连续的代码可以在后台异步执行。通过这种方式，我们解决了回调的非线性、非局部跳转引发的代码混乱问题，因而让我们的异步代码看似同步，更容易追踪。</p>
<p>但是，promise 和生成器的组合“暂缓”了我们最有效的异步编码模式进入 JavaScript 的日程。实际上，ES7 及更新版本中即将出现的异步的高级机制很大程度上是建立在这个基础上的。要想在异步的世界中严肃地对待程序效率，你需要非常熟悉 promise 和生成器的组合。</p>
<p>如果说 promise 和生成器与表达模式有关，这种模式使得我们的程序可以更加并发地运行， 因此能在更短的时间内处理完毕，那么 JavaScript 还有很多其他的性能优化因素值得探讨。</p>
<p>第 5 章探讨了通过 Web Worker 实现程序并行和通过 SIMD 实现数据并行的主题，以及像 ASM.js 这样的底层优化技术。第 6 章从合适的测评技术角度介绍了性能优化，其中包括哪些类型的性能需要关注，哪些可以忽略。</p>
<p>编写高效的 JavaScript 代码意味着，你编写的代码可以打破不同浏览器和环境的壁垒，达到动态运行。这要求大量复杂而详细的计划和努力，只有这样，才能让程序从“可以运行”到“可以很好地运行”。</p>
<p>“异步和性能”部分的目的是，为你提供编写合理、高性能 JavaScript 代码所需要的所有工具和技巧。</p>
<h2 id="es6-及更新版本"> ES6 及更新版本</h2>
<p>参考本书第二部分。</p>
<p>预先列出令人兴奋的 ES6 特性:解构、默认参数值、符号、简洁方法、计算属性、箭头函 数、块作用域、promise、生成器、迭代器、模块、代理、WeakMap、...</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">语法</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-2%20%E8%AF%AD%E6%B3%95/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-2%20%E8%AF%AD%E6%B3%95/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="语法"> 语法</h1>
<h2 id="块作用域声明"> 块作用域声明</h2>
<p>你很可能已经了解，JavaScript 中变量作用域的基本单元一直是 function。如果需要创建一个块作用域，最普遍的方法除了普通的函数声明之外，就是立即调用函数表达式 (IIFE)。</p>
<div><pre><code><span>(</span><span>function</span> <span>IIFE</span><span>(</span><span>)</span><span>{</span>
  <span>var</span> a <span>=</span> <span>3</span><span>;</span>
<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="let-声明"> let 声明</h3>
<div><pre><code><span>var</span> a <span>=</span> <span>2</span><span>;</span>
<span>{</span>
  <span>let</span> a <span>=</span> <span>3</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// 3</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>过早访问 let / const 声明的引用导致的这个 ReferenceError 严格说叫作临时死亡区(Temporal Dead Zone，TDZ)错误，意味着你在访问一个已经声明但没有初始化的变量。</p>
<div><pre><code><span>{</span>
  <span>typeof</span> a<span>;</span> <span>// undefined</span>
  <span>// b声明了，但还处于TDZ</span>
  <span>typeof</span> b<span>;</span> <span>// ReferenceError</span>
  <span>let</span> b<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="const-声明"> const 声明</h3>
<p><code>const</code> 变量的值在声明时设定之后就不允许改变。const 声明必须要有显式的初始化。如果需要一个值为 undefined 的常量，就要声明 <code>const a = undefined</code>。</p>
<p>**常量不是对这个值本身的限制，而是对赋值的那个变量的限制。**换句话说，这个值并没有因为 const 被锁定或者不可变，只是赋值本身不可变。如果这个值是复杂值，比如对象或者数组，其内容仍然是可以修改的。</p>
<div><pre><code><span>{</span>
  <span>const</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>;</span>
  arr<span>.</span><span>push</span><span>(</span><span>3</span><span>)</span><span>;</span> <span>// [1, 2, 3]</span>
  arr <span>=</span> <span>4</span><span>;</span> <span>// TypeError</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>关于“是否使用 const，什么时候使用const”的问题，这里建议<strong>只对你有意表明或强调不会改变的变量使用 const</strong>。</p>
<h3 id="块作用域函数"> 块作用域函数</h3>
<p>从 ES6 开始，块内声明的函数，其作用域在这个块内。但是要注意函数声明提升的问题。</p>
<div><pre><code><span>{</span>
  <span>foo</span><span>(</span><span>)</span><span>;</span>
  <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// 被提升到当前块作用域前部</span>
<span>}</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// ReferenceError</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>考虑以下代码：</p>
<div><pre><code><span>if</span><span>(</span>something<span>)</span> <span>{</span>
  <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// ??</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在前 ES6 环境中，不管 something 的值是什么，foo() 都会打印出2，因为两个函数声明都被提升到了块外，第二个总是会胜出。
而在 ES6 中，最后一行会抛出一个 ReferenceError。</p>
<h2 id="spread-rest"> spread / rest</h2>
<p>ES6引入了一个新的运算符<code>...</code>，称为 <em>spread / rest （展开 / 收集）</em> 运算符，它的作用取决于它的用法。</p>
<ul>
<li>
<p>spread展开</p>
<p>当 <code>...</code> 用在任何 iterable，它会把这个变量展开为各个独立的值。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>x<span>,</span>y<span>,</span>z</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> x<span>,</span> y<span>,</span> z <span>)</span><span>;</span>
<span>}</span>
<span>foo</span><span>(</span> <span>...</span><span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span> <span>)</span><span>;</span> <span>// 1 2 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>rest收集</p>
<p><code>...</code> 的另外一种常见用法基本上可以被看作反向的行为，与把一个值展开不同，<code>...</code> 把一系列值收集到一起成为一个数组。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>x<span>,</span> y<span>,</span> <span>...</span>z</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> x<span>,</span> y<span>,</span> z <span>)</span><span>;</span>
<span>}</span>
<span>foo</span><span>(</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span> <span>)</span><span>;</span> <span>// 1 2 [3, 4, 5]</span>

<span>function</span> <span>foo</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span> <span>// arguments类数组的可靠用法</span>
  console<span>.</span><span>log</span><span>(</span> args <span>)</span><span>;</span>
<span>}</span>
<span>foo</span><span>(</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>)</span><span>;</span> <span>// [1,2,3,4,5]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
</ul>
<p><em><code>...</code> 运算符可以很好的运用到数组的展开、收集操作中，但是对对象的操作仍在提案阶段。</em></p>
<h2 id="默认参数值"> 默认参数值</h2>
<p>ES6之前的默认参数写法：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>
  x <span>=</span> x <span>||</span> <span>11</span><span>;</span>
  y <span>=</span> y <span>||</span> <span>31</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span> x <span>+</span> y <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>上面这种写法非常不可靠，特别是当参数值有0、null、false、undefined之类的“假值”时，很容易出错，当然可以在函数起始位置做大量的判断来容错，但是这样不方便而且容易遗漏。</p>
<div><p>Info</p>
<p>这里应用了一个很重要的需要记住的 JavaScrpt 设计原则：undefined 意味着缺失。也就是说，undefined 和缺失是无法区别的，至少对于函数参数来说是如此。</p>
</div>
<p>ES6默认参数：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>x <span>=</span> <span>11</span><span>,</span> y <span>=</span> <span>31</span></span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> x <span>+</span> y <span>)</span><span>;</span>
<span>}</span>
<span>foo</span><span>(</span> <span>0</span><span>,</span> <span>42</span> <span>)</span><span>;</span> <span>// 42</span>
<span>foo</span><span>(</span> <span>5</span> <span>)</span><span>;</span> <span>// 36</span>
<span>foo</span><span>(</span> <span>undefined</span><span>,</span> <span>6</span> <span>)</span><span>;</span> <span>// 17 丢了undefined</span>
<span>foo</span><span>(</span> <span>null</span><span>,</span> <span>6</span> <span>)</span><span>;</span> <span>// 5 null被强制转换为0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="默认值表达式"> 默认值表达式</h3>
<p>函数默认值可以不只是简单值，它们可以是任意合法表达式，甚至是函数调用。</p>
<div><pre><code><span>function</span> <span>bar</span><span>(</span><span>val</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"bar called!"</span> <span>)</span><span>;</span>
  <span>return</span> y <span>+</span> val<span>;</span>
<span>}</span>
<span>function</span> <span>foo</span><span>(</span><span>x <span>=</span> y <span>+</span> <span>3</span><span>,</span> z <span>=</span> <span>bar</span><span>(</span> x <span>)</span></span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> x<span>,</span> z <span>)</span><span>;</span>
<span>}</span>
<span>var</span> y <span>=</span> <span>5</span><span>;</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// bar called 8 13</span>
<span>foo</span><span>(</span> <span>10</span> <span>)</span><span>;</span> <span>// bar called 10 15</span>

y <span>=</span> <span>6</span><span>;</span>
<span>foo</span><span>(</span> <span>undefined</span><span>,</span> <span>10</span> <span>)</span><span>;</span> <span>// 9 10</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>可以看到，默认值表达式是惰性求值的，这意味着它们只在需要的时候运行——也就是说，是在参数的值省略或者为 undefined 的候。</p>
<p>这里有一个微妙的细节，<strong>注意函数声明中形式参数是在它们自己的作用域中(可以看作是函数声明的()的作用域中)，而不是在函数体作用域中</strong>。这意味着在默认值表达式中的标识符引用首先匹配到形式参数作用域，然后才会搜索外层作用域。</p>
<div><pre><code><span>var</span> w <span>=</span> <span>1</span><span>,</span> z <span>=</span> <span>2</span><span>;</span>
<span>// 从左到右计算默认值，顺序为x、y、z</span>
<span>function</span> <span>foo</span><span>(</span> <span>x <span>=</span> w <span>+</span> <span>1</span><span>,</span> y <span>=</span> x <span>+</span> <span>1</span><span>,</span> z <span>=</span> z <span>+</span> <span>1</span></span> <span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> x<span>,</span> y<span>,</span> z <span>)</span><span>;</span>
<span>}</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// ReferenceError</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>w + 1 默认值表达式中的 w 在形式参数列表作用域中寻找 w，但是没有找到，所以就使用外层作用域的w。</p>
<p>接下来，x + 1默认值表达式中的x找到了形式参数作用域中的x，很幸运这里 x 已经初始化了，所以对 y 的赋值可以正常工作。</p>
<p>但是，z + 1中的z发现z是一个此刻还没初始化的参数变量，所以它<strong>永远不会试图从外层作用域寻找 z</strong>。</p>
<p>正如之前章节提到的，ES6 引入了 TDZ，它防止变量在未初始化的状态下被访问。<strong>ES6函数声明的括号范围内形成了TDZ</strong>， 因此，z + 1 会抛出一个 ReferenceError 。</p>
<h2 id="解构"> 解构</h2>
<p>ES6 为解构新增了一个专门语法，专用于数组解构和对象解构。</p>
<p>在解构赋值中，等号左侧为 <em>模式</em>，右侧为 <em>被解构的对象</em>。</p>
<div><pre><code><span>var</span> <span>[</span> a<span>,</span> b<span>,</span> cAlias <span>]</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>
<span>var</span> <span>{</span> x<span>,</span> y<span>,</span> z<span>:</span> zAlias <span>}</span> <span>=</span> <span>{</span> x<span>:</span> <span>4</span><span>,</span> y<span>:</span> <span>5</span><span>,</span> z<span>:</span> <span>6</span> <span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> a<span>,</span> b<span>,</span> cAlias <span>)</span><span>;</span> <span>// 1 2 3</span>
console<span>.</span><span>log</span><span>(</span> x<span>,</span> y<span>,</span> zAlias <span>)</span><span>;</span> <span>// 4 5 6</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>实际上，模式中并不必须是变量标识符。任何合法的赋值表达式都可以。</p>
<div><pre><code><span>var</span> o <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>[</span>o<span>.</span>a<span>,</span> o<span>.</span>b<span>]</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>;</span>
<span>(</span> <span>{</span> x<span>:</span> o<span>.</span>x<span>,</span> y<span>:</span> o<span>.</span>y<span>}</span> <span>=</span> <span>{</span> x<span>:</span> <span>4</span><span>,</span> y<span>:</span> <span>5</span> <span>}</span> <span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> o <span>)</span><span>;</span> <span>// { a: 1, b: 2, x: 4, y: 5 }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>再举个稍微复杂的例子：</p>
<div><pre><code><span>var</span> a1 <span>=</span> <span>[</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span> <span>]</span><span>,</span>
o2 <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>[</span> o2<span>.</span>a<span>,</span> o2<span>.</span>b<span>,</span> o2<span>.</span>c <span>]</span> <span>=</span> a1<span>;</span> <span>// 相当于 o2.a = a1[0]</span>
console<span>.</span><span>log</span><span>(</span> o2<span>.</span>a<span>,</span> o2<span>.</span>b<span>,</span> o2<span>.</span>c <span>)</span><span>;</span> <span>// 1 2 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code><span>var</span> a1 <span>=</span> <span>[</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span> <span>]</span><span>,</span>
a2 <span>=</span> <span>[</span><span>]</span><span>;</span>
<span>[</span> a2<span>[</span><span>2</span><span>]</span><span>,</span> a2<span>[</span><span>0</span><span>]</span><span>,</span> a2<span>[</span><span>1</span><span>]</span> <span>]</span> <span>=</span> a1<span>;</span> <span>// 相当于 a2[2] = a1[0]...</span>
console<span>.</span><span>log</span><span>(</span> a2 <span>)</span><span>;</span> <span>// [2,3,1]</span>

<span>var</span> x <span>=</span> <span>10</span><span>,</span> y <span>=</span> <span>20</span><span>;</span>
<span>[</span> y<span>,</span> x <span>]</span> <span>=</span> <span>[</span> x<span>,</span> y <span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> x<span>,</span> y <span>)</span><span>;</span> <span>// 20 10</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="重复赋值"> 重复赋值</h3>
<p>对象解构形式允许多次列出同一个源属性(持有值类型任意)。</p>
<div><pre><code><span>var</span> <span>{</span> a<span>:</span> <span>{</span> x<span>:</span> <span>X</span><span>,</span> x<span>:</span> <span>Y</span> <span>}</span><span>,</span> a <span>}</span> <span>=</span> <span>{</span> a<span>:</span> <span>{</span> x<span>:</span> <span>1</span> <span>}</span> <span>}</span><span>;</span>
<span>X</span><span>;</span>  <span>// 1</span>
<span>Y</span><span>;</span>  <span>// 1</span>
a<span>;</span>  <span>// { x: 1 }</span>

<span>(</span> <span>{</span> a<span>:</span> <span>X</span><span>,</span> a<span>:</span> <span>Y</span><span>,</span> a<span>:</span> <span>[</span> <span>Z</span> <span>]</span> <span>}</span> <span>=</span> <span>{</span> a<span>:</span> <span>[</span> <span>1</span> <span>]</span> <span>}</span> <span>)</span><span>;</span> <span>// X,Y指向同一数组[1]</span>
<span>X</span><span>.</span><span>push</span><span>(</span> <span>2</span> <span>)</span><span>;</span>
<span>Y</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>10</span><span>;</span>
<span>X</span><span>;</span>  <span>// [10,2]</span>
<span>Y</span><span>;</span>  <span>// [10,2]</span>
<span>Z</span><span>;</span>  <span>// 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>需要注意的一点是，对象或者数组解构的赋值表达式的完成值是所有右侧对象 / 数组的值。</p>
<div><pre><code><span>var</span> o <span>=</span> <span>{</span> a<span>:</span><span>1</span><span>,</span> b<span>:</span><span>2</span><span>,</span> c<span>:</span><span>3</span> <span>}</span><span>,</span>
        a<span>,</span> b<span>,</span> c<span>,</span> p<span>;</span>
p <span>=</span> <span>{</span> a<span>,</span> b<span>,</span> c <span>}</span> <span>=</span> o<span>;</span> <span>// p 赋值为对象 o 的引用，而不是 a、b、c 的值之一</span>
console<span>.</span><span>log</span><span>(</span> a<span>,</span> b<span>,</span> c <span>)</span><span>;</span> <span>// 1 2 3</span>
p <span>===</span> o<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>##解构赋值的其他用法</p>
<p>对于数组解构赋值和对象解构赋值来说，你不需要把存在的所有值都用来赋值。</p>
<div><pre><code><span>// 不需要的值可以省略，多余的值被赋值为undefined</span>
<span>var</span> <span>[</span><span>,</span><span>,</span>c<span>,</span>d<span>]</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>
<span>var</span> <span>{</span> w<span>,</span> z <span>}</span> <span>=</span> <span>{</span> x<span>:</span><span>4</span><span>,</span> y<span>:</span><span>5</span><span>,</span> z<span>:</span><span>6</span> <span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> c<span>,</span> z <span>)</span><span>;</span> <span>// 3 6</span>
console<span>.</span><span>log</span><span>(</span> d<span>,</span> w <span>)</span><span>;</span> <span>// undefined undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>除了在函数声明中的 gather/rest 用法，<code>...</code> 也可以执行解构赋值同样的动作。</p>
<div><pre><code><span>var</span> <span>[</span> a<span>,</span> <span>...</span>c <span>]</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> a<span>,</span> c <span>)</span><span>;</span> <span>// 1 [2, 3]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="默认值赋值"> 默认值赋值</h3>
<p>使用与前面默认函数参数值类似的语法，解构也可以提供默认值。</p>
<div><pre><code><span>var</span> <span>{</span> x<span>,</span> y<span>,</span> w<span>:</span> <span>WW</span> <span>=</span> <span>20</span> <span>}</span> <span>=</span> <span>{</span> x<span>:</span> <span>4</span><span>,</span> y<span>:</span> <span>5</span> <span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>WW</span><span>)</span><span>;</span> <span>// 20</span>

<span>var</span> <span>{</span> x<span>,</span> w <span>=</span> <span>{</span> a<span>:</span> <span>1</span> <span>}</span><span>}</span> <span>=</span> <span>{</span> x<span>:</span> <span>1</span> <span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>w<span>)</span><span>;</span> <span>// { a: 1 }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><em>注意，如果使用对象作为默认值，代码上很可能绕晕（对象和解构都使用花括号），要谨慎使用。</em></p>
<h3 id="嵌套解构"> 嵌套解构</h3>
<p>如果解构的值中有嵌套的对象或者数组，也可以解构这些嵌套的值。</p>
<div><pre><code><span>var</span> App <span>=</span> <span>{</span>
  model<span>:</span> <span>{</span>
    <span>User</span><span>:</span> <span>function</span><span>(</span><span>)</span><span>{</span> <span>.</span><span>.</span> <span>}</span>
  <span>}</span>
<span>}</span><span>;</span>
<span>// 不用: var User = App.model.User;</span>
<span>var</span> <span>{</span> model<span>:</span> <span>{</span> User <span>}</span> <span>}</span> <span>=</span> App<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="解构参数"> 解构参数</h3>
<p>解构赋值也可以用在函数的参数上：</p>
<div><pre><code><span>function</span> <span>f1</span><span>(</span><span><span>[</span> x<span>=</span><span>2</span><span>,</span> y<span>=</span><span>3</span><span>,</span> z <span>]</span></span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>f2</span><span>(</span><span><span>[</span> x<span>,</span> y<span>,</span> <span>...</span>z<span>]</span><span>,</span> w</span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>f3</span><span>(</span><span><span>[</span> x<span>,</span> y<span>,</span> <span>...</span>z<span>]</span><span>,</span> <span>...</span>w</span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>f4</span><span>(</span><span><span>{</span> x<span>:</span> <span>X</span><span>,</span> y <span>}</span></span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>f5</span><span>(</span><span><span>{</span> x<span>:</span> <span>X</span> <span>=</span> <span>10</span><span>,</span> y <span>=</span> <span>20</span> <span>}</span></span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>f6</span><span>(</span><span><span>{</span> x <span>=</span> <span>10</span> <span>}</span> <span>=</span> <span>{</span><span>}</span><span>,</span> <span>{</span> y <span>}</span> <span>=</span> <span>{</span> y<span>:</span> <span>10</span> <span>}</span></span><span>)</span> <span>{</span><span>}</span>

<span>f3</span><span>(</span> <span>[</span><span>]</span> <span>)</span><span>;</span> <span>// undefined undefined [] []</span>
<span>f3</span><span>(</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>]</span><span>,</span> <span>5</span><span>,</span> <span>6</span> <span>)</span><span>;</span> <span>// 1 2 [3,4] [5,6]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id="解构默认值-参数默认值"> 解构默认值+参数默认值</h4>
<div><pre><code><span>function</span> <span>f6</span><span>(</span><span><span>{</span> x <span>=</span> <span>10</span> <span>}</span> <span>=</span> <span>{</span><span>}</span><span>,</span> <span>{</span> y <span>}</span> <span>=</span> <span>{</span> y<span>:</span> <span>10</span> <span>}</span></span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> x<span>,</span> y <span>)</span><span>;</span>
<span>}</span>
<span>f6</span><span>(</span><span>)</span><span>;</span> <span>// 10 10</span>
<span>f6</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>{</span><span>}</span><span>)</span><span>;</span> <span>// 10 undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id="解构-重组-实现配置合并"> 解构 + 重组 实现配置合并</h4>
<p>假设你有一个名为 config 的对象，已经有了一部分值，但可能不是全部，现在你想要把所有空槽的位置用默认值设定，但又不想覆盖已经存在的部分：</p>
<div><pre><code><span>var</span> defaults <span>=</span> <span>{</span>
  options<span>:</span> <span>{</span>
     remove<span>:</span> <span>true</span><span>,</span>
     enable<span>:</span> <span>false</span><span>,</span>
     instance<span>:</span> <span>{</span><span>}</span>
  <span>}</span><span>,</span>
  log<span>:</span> <span>{</span>
    warn<span>:</span> <span>true</span><span>,</span>
    error<span>:</span> <span>true</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>// 用以下配置替换defaults的默认配置，不提供项的不替换</span>
<span>var</span> config <span>=</span> <span>{</span>
  options<span>:</span> <span>{</span>
     remove<span>:</span> <span>false</span><span>,</span>
     instance<span>:</span> <span>null</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>不用解构默认值的做法：</p>
<div><pre><code><span>// 手动判断</span>
config<span>.</span>options <span>=</span> config<span>.</span>options <span>||</span> <span>{</span><span>}</span><span>;</span>
config<span>.</span>options<span>.</span>remove <span>=</span> <span>(</span>config<span>.</span>options<span>.</span>remove <span>!==</span> <span>undefined</span><span>)</span> <span>?</span>
  config<span>.</span>options<span>.</span>remove <span>:</span> defaults<span>.</span>options<span>.</span>remove<span>;</span>
config<span>.</span>options<span>.</span>enable <span>=</span> <span>(</span>config<span>.</span>options<span>.</span>enable <span>!==</span> <span>undefined</span><span>)</span> <span>?</span>
  config<span>.</span>options<span>.</span>enable <span>:</span> defaults<span>.</span>options<span>.</span>enable<span>;</span>
<span>// ...</span>

<span>// Object.assign</span>
config <span>=</span> Object<span>.</span><span>assign</span><span>(</span> <span>{</span><span>}</span><span>,</span> defaults<span>,</span> config <span>)</span><span>;</span>

<span>// 写一个常见的merge函数</span>
<span>let</span> mergeOption <span>=</span> <span>merge</span><span>(</span>defaults<span>,</span> config<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p><code>Object.assign</code> 存在一个严重问题！ <code>Object.assign</code> 是浅操作，也就是说在复制 defaults.options 的时候，只会复制对象引用，而不会深层复制这个对象的属性到 config.options 对象。需要在对象树的所有层次(某种“递归”)上应用 <code>Object. assign</code> 才能得到期望的深层克隆。</p>
<p>运用解构 + 重组：</p>
<div><pre><code><span>// 把defaults合并进config</span>
<span>{</span> <span>// 悬置的临时变量会污染作用域。所以，我们用一个{ }把这块包起来成为 一个块作用域</span>
  <span>// (带默认值赋值的)解构</span>
  <span>let</span> <span>{</span>
    options<span>:</span> <span>{</span>
      remove <span>=</span> defaults<span>.</span>options<span>.</span>remove<span>,</span>
      enable <span>=</span> defaults<span>.</span>options<span>.</span>enable<span>,</span>
      instance <span>=</span> defaults<span>.</span>options<span>.</span>instance
    <span>}</span> <span>=</span> <span>{</span><span>}</span><span>,</span>
    log<span>:</span> <span>{</span>
      warn <span>=</span> defaults<span>.</span>log<span>.</span>warn<span>,</span>
      error <span>=</span> defaults<span>.</span>log<span>.</span>error
    <span>}</span> <span>=</span> <span>{</span><span>}</span>
  <span>}</span> <span>=</span> config<span>;</span>
  <span>// 重组</span>
  config <span>=</span> <span>{</span>
    options<span>:</span> <span>{</span> remove<span>,</span> enable<span>,</span> instance <span>}</span><span>,</span>
    log<span>:</span> <span>{</span> warn<span>,</span> error <span>}</span>
  <span>}</span><span>;</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p><em>还可以用箭头 IIFE 代替一般的 { } 块和 let 声明来实现块封装。解构 赋值 / 默认值会被放在参数列表中，而重组的过程会被放在函数体的 return 语句中。</em></p>
<h2 id="对象字面量拓展"> 对象字面量拓展</h2>
<h3 id="简洁属性、方法"> 简洁属性、方法</h3>
<div><pre><code><span>var</span> foo <span>=</span> <span>0</span><span>;</span>
<span>var</span> obj <span>=</span> <span>{</span>
  foo<span>,</span>
  <span>bar</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// 相当于 bar: function() {}</span>
  <span>*</span><span>baz</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>注意一下代码，something函数不能用简洁写法：</p>
<div><pre><code><span>function</span> <span>runSomething</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>var</span> x <span>=</span> Math<span>.</span><span>random</span><span>(</span><span>)</span><span>,</span>
      y <span>=</span> Math<span>.</span><span>random</span><span>(</span><span>)</span><span>;</span>
  <span>return</span> o<span>.</span><span>something</span><span>(</span> x<span>,</span> y <span>)</span><span>;</span>
<span>}</span>
<span>runSomething</span><span>(</span> <span>{</span>
  <span>something</span><span>:</span> <span>function</span> <span>something</span><span>(</span><span>x<span>,</span>y</span><span>)</span> <span>{</span>
    <span>return</span> x <span>></span> y
      <span>?</span> <span>something</span><span>(</span> y<span>,</span> x <span>)</span> <span>// 这里需要递归</span>
    	<span>:</span> y <span>-</span> x<span>;</span>
  <span>}</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>简洁方法很方便，但是应该只在<strong>不需要它们执行递归或者事件绑定/解绑定</strong>的时候使用。</p>
<p>否则的话，就按照老式的<code>something: function something()</code> 方法来定义吧。</p>
<h3 id="计算属性名"> 计算属性名</h3>
<div><pre><code><span>var</span> prefix <span>=</span> <span>'pre'</span>
<span>var</span> o <span>=</span> <span>{</span>
  <span>[</span>prefix <span>+</span> <span>'foo'</span><span>]</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>[</span>Symbol<span>.</span>toStringTag<span>]</span><span>:</span> <span>"really cool thing"</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="设定-prototype"> 设定 [[Prototype]]</h3>
<p>有时候在声明对象字面量的时候设定这个对象的 [[Prototype]] 是有用的。下面的用法在很多 JavaScript 引擎中已经作为非标准扩展有一段时间了，而在 ES6 中这已经标准化了：</p>
<div><pre><code><span>var</span> proto <span>=</span> <span>{</span><span>}</span>
<span>var</span> o <span>=</span> <span>{</span> __proto__<span>:</span> proto <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>不推荐使用上面的方法设置对象的原型，建议使用<code>Object.setPrototypeOf(obj, proto)</code>。</p>
<h3 id="super-对象"> super 对象</h3>
<p>通常把 super 看作只与类相关。但是，鉴于 JavaScript 的原型类而非类对象的本质，super对于普通对象的简洁方法也一样有效，特性也基本相同。</p>
<div><pre><code><span>var</span> o1 <span>=</span> <span>{</span>
  <span>foo</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> <span>"o1:foo"</span> <span>)</span><span>;</span>
   <span>}</span>
<span>}</span><span>;</span>
<span>var</span> o2 <span>=</span> <span>{</span>
  <span>foo</span><span>(</span><span>)</span> <span>{</span>
    <span>// super 只允许在简洁方法中出现，而不允许在普通函数表达式属性中出现。</span>
    <span>// 也只允许以 super.XXX 的形式(用于属性 / 方法访问)出现，而不能以 super() 的形式出现。</span>
    <span>super</span><span>.</span><span>foo</span><span>(</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span> <span>"o2:foo"</span> <span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
Object<span>.</span><span>setPrototypeOf</span><span>(</span> o2<span>,</span> o1 <span>)</span><span>;</span>
o2<span>.</span><span>foo</span><span>(</span><span>)</span><span>;</span>       <span>// o1:foo o2:foo</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="模板字面量"> 模板字面量</h2>
<p>称之为 <em>模板</em> 或许不太准确，可以将其称为 <em>插入字符串字面量（interpoliteral）</em>。</p>
<div><pre><code><span>function</span> <span>upper</span><span>(</span><span>s</span><span>)</span> <span>{</span>
  <span>return</span> s<span>.</span><span>toUppercase</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
<span>var</span> name <span>=</span> <span>"world"</span><span>;</span>
<span>var</span> greeting <span>=</span> <span><span>`</span><span>hello </span><span><span>${</span><span>upper</span><span>(</span>name<span>)</span><span>}</span></span><span>`</span></span><span>;</span>
console<span>.</span><span>log</span><span>(</span>greeting<span>)</span><span>;</span> <span>// hello WORLD</span>
console<span>.</span><span>log</span><span>(</span><span>typeof</span> greeting<span>)</span><span>;</span> <span>// "string"</span>
<span>// 模板字符串字面量更像是IIFE，它会自动展开求值。一个模板字符串字面量的结果就是一个字符串。</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><p>Info</p>
<p>插入字符串字面量中的换行(新行)会在字符串值中被保留。</p>
<p>在字面量值中，除非作为明确的转义序列出现，\r 回车符(码点 U+000D)的值或者回车换行符 \r\n (码点 U+000D 和 U+000A)都会被标准化为 \n 换行符(码点 U+000A)。但是别担心，这种标准化非常少见，很可能只有在复制粘贴文本到 JavaScript 文件的时候才会出现。</p>
</div>
<p>###标签模板字面量</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>strings<span>,</span> <span>...</span>values</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> strings <span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span> values <span>)</span><span>;</span>
<span>}</span>

<span>var</span> desc <span>=</span> <span>"awesome"</span><span>;</span>
foo<span><span>`</span><span>Everything is </span><span><span>${</span>desc<span>}</span></span><span>!</span><span>`</span></span><span>;</span>
<span>// [ "Everything is ", "!"]</span>
<span>// [ "awesome" ]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>本质上说，这是一类不需要括号的特殊函数调用。标签(tag)部分是一个要调用的函数值。实际上，它可以是任意结果为函数的表达式。</p>
<div><pre><code><span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> foo<span>;</span>
<span>}</span>
<span>bar</span><span>(</span><span>)</span><span><span>`</span><span>Everything is </span><span><span>${</span>desc<span>}</span></span><span>!</span><span>`</span></span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>那么有哪些实际应用呢？有许多高级应用已经超出了本部分的讨论范围。但是，这里还是给出了一个简单的思路用来把数字格式化为美    元表示法。</p>
<div><pre><code><span>function</span> <span>dollabillsyall</span><span>(</span><span>strings<span>,</span> <span>...</span>values</span><span>)</span> <span>{</span>
  <span>return</span> strings<span>.</span><span>reduce</span><span>(</span> <span>(</span><span>s<span>,</span> v<span>,</span> idx</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>idx <span>></span> <span>0</span><span>)</span> <span>{</span>
      <span>var</span> cur <span>=</span> values<span>[</span>idx <span>-</span> <span>1</span><span>]</span><span>;</span>
      s <span>+=</span> <span>typeof</span> cur <span>==</span> <span>"number"</span> <span>// 遇到number就加个'$'</span>
      	<span>?</span> <span><span>`</span><span>$</span><span><span>${</span>cur<span>.</span><span>toFixed</span><span>(</span> <span>2</span> <span>)</span><span>}</span></span><span>`</span></span>
        <span>:</span> cur<span>;</span>
    <span>}</span>
    <span>return</span> s <span>+</span> v<span>;</span>
  <span>}</span><span>,</span> <span>''</span> <span>)</span><span>;</span>
<span>}</span>
<span>var</span> amt1 <span>=</span> <span>11.99</span><span>;</span>
<span>var</span> amt2 <span>=</span> amt1 <span>*</span> <span>1.08</span><span>;</span>
dollabillsyall<span><span>`</span><span>amt1: </span><span><span>${</span>amt1<span>}</span></span><span>, amt2: </span><span><span>${</span>amt2<span>}</span></span><span>`</span></span> <span>// "amt1: $11.99, amt2: $12.95"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h4 id="原始-raw-字符串"> 原始(raw)字符串</h4>
<p>在前面的代码中，标签函数接收第一个名为 strings 的参数，这是一个数组。还包括了一些额外的数据：所有字符串的原始未处理版本。</p>
<div><pre><code><span>function</span> <span>showraw</span><span>(</span><span>strings<span>,</span> <span>...</span>values</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> strings <span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span> strings<span>.</span>raw <span>)</span><span>;</span>
<span>}</span>
showraw<span><span>`</span><span>Hello\nWorld</span><span>`</span></span><span>;</span>
<span>// [ "Hello</span>
<span>// World" ]</span>
<span>// [ "Hello\nWorld" ]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>原始版本的值保留了原始的转义码 \n 序列(\ 和 n 是独立的字符)，而处理过的版本把它当作是一个单独的换行符。二者都会应用前面提到过的行结束标准化过程。</p>
<p>ES6 提供了一个内建函数可以用作字符串字面量标签：String.raw(..)。它就是传出 strings 的原始版本</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span> <span><span>`</span><span>Hello\nWorld</span><span>`</span></span> <span>)</span><span>;</span>
<span>// Hello</span>
<span>// World</span>
console<span>.</span><span>log</span><span>(</span> String<span>.</span>raw<span><span>`</span><span>Hello\nWorld</span><span>`</span></span> <span>)</span><span>;</span>
<span>// Hello\nWorld</span>
String<span>.</span>raw<span><span>`</span><span>Hello\nWorld</span><span>`</span></span><span>.</span>length<span>;</span>
<span>// 12</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>字符串字面量标签的其他应用包括全球化、本地化等的特殊处理。</p>
<h2 id="箭头函数"> 箭头函数</h2>
<p><strong>箭头函数总是函数表达式，并不存在箭头函数声明</strong>。我们还应清楚<strong>箭头函数是匿名函数表达式</strong>——它们没有用于递归或者事件绑定 / 解绑定的命名引用。</p>
<div><pre><code><span>var</span> <span>f1</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>12</span><span>;</span>
<span>var</span> <span>f2</span> <span>=</span> <span>x</span> <span>=></span> x <span>*</span> <span>2</span><span>;</span>
<span>var</span> <span>f3</span> <span>=</span> <span>(</span><span>x<span>,</span>y</span><span>)</span> <span>=></span> <span>{</span>
	<span>return</span> x <span>+</span> y<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>Info</p>
<p>箭头函数支持普通函数参数的所有功能，包括默认值、解构、rest 参数，等等。</p>
</div>
<p>然而，使用箭头函数语法替代其他普通的多行函数，特别是那些通常会被自然表达为函数声明的情况，是不合理的。</p>
<p>虽然不是一条严格的规律，但我认为箭头函数转变带来的可读性提升与被转化函数的长度<strong>负相关</strong>。这个函数越长，箭头函数的好处就越小；函数越短，好处越大。</p>
<p>更合理的做法是<strong>只在确实需要简短的在线函数表达式的时候才采用箭头函数</strong>，而对于那些 一般长度的函数则无需改变。</p>
<h3 id="箭头函数的this绑定"> 箭头函数的this绑定</h3>
<p>实际上，箭头函数的主要设计目的就是以特定的方式改变 this 的行为特性， 解决 this 相关编码的一个特殊而又常见的痛点。</p>
<p><strong>在箭头函数内部，this 绑定不是动态的，而是词法的。</strong></p>
<div><pre><code><span>var</span> controller <span>=</span> <span>{</span>
  <span>makeRequest</span><span>(</span><span>)</span><span>{</span>
     btn<span>.</span><span>addEventListener</span><span>(</span> <span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
       <span>this</span><span>.</span><span>makeRequest</span><span>(</span><span>)</span><span>;</span>
   <span>}</span><span>,</span> <span>false</span> <span>)</span><span>;</span>
<span>}</span> <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="for-of循环"> for-of循环</h2>
<p>ES6 在把 JavaScript 中我们熟悉的 for 和 for-in 循环组合起来的基础上，又新增了一个for-of 循环，在迭代器产生的一系列值上循环。</p>
<p>for-of 循环的值必须是一个 iterable（实现了[Symbol.iterator]方法的对象），或者说它必须是可以转换 / 封箱到一个 iterable 对象的值。</p>
<div><pre><code><span>for</span> <span>(</span><span>var</span> c <span>of</span> <span>"hello"</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> c <span>)</span><span>;</span> <span>// 原生字符串 "hello" 被强制类型转换 / 封箱到等价的 String 封装对象中</span>
<span>}</span>
<span>// "h" "e" "l" "l" "o"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在 for (XYZ of ABC) 中，和for以及for-in循环中的语句一样，XYZ语句可以是赋值表达式也可以是声明。</p>
<div><pre><code><span>var</span> o <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>for</span> <span>(</span>o<span>.</span>a <span>of</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> o<span>.</span>a <span>)</span><span>;</span>
<span>}</span> <span>// 1 2 3</span>

<span>for</span> <span>(</span><span>{</span>x<span>:</span> o<span>.</span>a<span>}</span> <span>of</span> <span>[</span> <span>{</span>x<span>:</span> <span>1</span><span>}</span><span>,</span> <span>{</span>x<span>:</span> <span>2</span><span>}</span><span>,</span> <span>{</span>x<span>:</span> <span>3</span><span>}</span> <span>]</span><span>)</span> <span>{</span> <span>// 可以解构赋值</span>
  console<span>.</span><span>log</span><span>(</span> o<span>.</span>a <span>)</span><span>;</span>
<span>}</span> <span>// 1 2 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="正则表达式、数字字面量扩展、symbol"> 正则表达式、数字字面量扩展、symbol</h2>
<p>参考 <a href=""><strong>ECMAScript 6</strong> 入门</a></p>
<h2 id="unicode"> Unicode</h2>
<p>Unicode 字符范围从 0x0000 到 0xFFFF，包含可能看到和接触到的所有标准打印字符。这组字符称为<strong>基本多语言平面(Basic Multilingual Plane，BMP)</strong>。BMP 甚至包含了像雪人这样的有趣的符号: (U+2603)。</p>
<p>在 BMP 集之外还有很多其他扩展 Unicode 字符，范围直到 <strong>0x10FFFF</strong>。这些符号通常是星形符号(astral symbol)。</p>
<h2 id="小结"> 小结</h2>
<p>ES6 为 JavaScript 增加了很多新的语法形式，他们的设计目的都是消除常见编程技巧中的痛点，比如为函数参数设定默认值以及把参数的“其余”部分收集到数组中。解构是一个强有力的工具，用于更精确地表达从数组和嵌套对象中赋值。</p>
<p>扩展 Unicode 支持、新的正则表达式技巧，甚至新的基本类型 symbol 都使 ES6 的语法发展的更加完善。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">ES现在与未来</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-1%20ES%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-1%20ES%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="es现在与未来"> ES现在与未来</h1>
<p>回顾下本系列的上卷和中卷：</p>
<ul>
<li>
<p>作用域和闭包</p>
<p>你知道 JavaScript 的词法作用域是基于编译器(而非解释器!)语义的吗? 你能解释词法作用域和作为值的函数这两者的直接结果之一就是闭包吗?</p>
</li>
<li>
<p>this 和对象原型</p>
<p>你能复述 this 绑定的四条基本原则吗？你是否还在用 JavaScript 的 “伪”类应付了事，而没有采用更简洁的“行为委托”设计模式？你听说过连接到其他对象的对象(objects linked to other objects，OLOO)吗?</p>
</li>
<li>
<p>类型和语法</p>
<p>你了解 JavaScript 中的内置类型吗？更重要的是，你了解如何正确安全地使用类型间强制转换吗？对于 JavaScript 语法 / 句法中的微妙细节，你的熟悉程度又如何？</p>
</li>
<li>
<p>异步和性能</p>
<p>你还在使用回调管理异步吗？你能解释 promise 是什么以及它为什么 / 如何能够解决“回调地狱”这个问题吗？你知道如何应用生成器来使得异步代码更加清晰吗？对 JavaScript 程序和具体运算的深度优化到底由哪些方面构成？</p>
</li>
</ul>
<p>与 ES5 不同，ES6 并不仅仅是为这个语言新增一组 API。它包括一组新的语法形式，其中的一部分可能是要花些时间才能理解和熟悉的。它还包括各种各样的新的组织形式和操作各种数据类型的新的辅助 API。</p>
<div><p>Tips</p>
<p>关于ES6的内容同时可参考<a href="">ES6入门</a>，本章有部分内容会省略笔记。</p>
</div>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">集合</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-5%20%E9%9B%86%E5%90%88/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-5%20%E9%9B%86%E5%90%88/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="集合"> 集合</h1>
<h2 id="typedarray"> TypedArray</h2>
<h2 id="map"> Map</h2>
<h2 id="weakmap"> WeakMap</h2>
<h2 id="set"> Set</h2>
<h2 id="weakset"> WeakSet</h2>
<h2 id="小结"> 小结</h2>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">新增API</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-6%20%E6%96%B0%E5%A2%9EAPI/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-6%20%E6%96%B0%E5%A2%9EAPI/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="新增api"> 新增API</h1>
<h2 id="array"> Array</h2>
<h2 id="object"> Object</h2>
<h2 id="math"> Math</h2>
<h2 id="number"> Number</h2>
<h2 id="字符串"> 字符串</h2>
<h2 id="小结"> 小结</h2>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">ES6+</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-8%20ES6+/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-8%20ES6+/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="es6"> ES6+</h1>
<h2 id="异步函数"> 异步函数</h2>
<h2 id="object-observe"> Object.observe</h2>
<h2 id="幂运算符"> 幂运算符</h2>
<h2 id="对象属性与"> 对象属性与 <code>...</code></h2>
<h2 id="array-includes"> Array#includes</h2>
<h2 id="simd"> SIMD</h2>
<h2 id="webassembly-wasm"> WebAssembly(WASM)</h2>
<h2 id="小结"> 小结</h2>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">元编程</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-7%20%E5%85%83%E7%BC%96%E7%A8%8B/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-7%20%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="元编程"> 元编程</h1>
<h2 id="函数名称"> 函数名称</h2>
<h2 id="元属性"> 元属性</h2>
<h2 id="公开符号"> 公开符号</h2>
<h2 id="代理"> 代理</h2>
<h2 id="尾递归调用"> 尾递归调用</h2>
<h2 id="小结"> 小结</h2>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">类型</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-1%20%E7%B1%BB%E5%9E%8B/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-1%20%E7%B1%BB%E5%9E%8B/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="类型"> 类型</h1>
<p><a href="http://www.ecma-international.org/ecma-262/5.1/" target="_blank" rel="noopener noreferrer">ES5.1</a>中对<em>类型</em>的定义：</p>
<blockquote>
<p>本规范中的运算法则所操纵的值均有相应的类型。本节中定义了所有可能出现的类型。ECMAScript 类型又进一步细分为语言类型和规范类型。</p>
<p>ECMAScript 语言中所有的值都有一个对应的语言类型。ECMAScript 语言类型包括 Undefined、Null、Boolean、String、Number 和 Object。</p>
</blockquote>
<p>本书中，我们这样来定义“类型”(与规范类似):</p>
<blockquote>
<p>对语言引擎和开发人员来说，类型是值的内部特征，它定义了值的行为，以使其区别于其他值。</p>
</blockquote>
<h2 id="理解类型的作用"> 理解类型的作用</h2>
<p><strong>要正确合理地进行类型转换(第 4 章)，我们必须掌握 JavaScript 中的各个类型及其内在行为。</strong></p>
<p>几乎所有的 JavaScript 程序都会涉及某种形式的强制类型转换，处理这些情况时我们需要有充分的把握和自信。</p>
<p>强制类型转换形式多样，有时方便，有时危险。全面掌握 JavaScript 的类型之后，才能正确对待和使用它们。</p>
<h2 id="内置类型和typeof操作"> 内置类型和<code>typeof</code>操作</h2>
<p>JavaScript 有七种内置类型：</p>
<ul>
<li>string</li>
<li>boolean</li>
<li>number</li>
<li>undefined</li>
<li>null</li>
<li>symbol</li>
<li>object</li>
</ul>
<div><p>Tips</p>
<p>除对象外，其余称为<strong>基本类型</strong></p>
</div>
<p>typeof总是会返回一个字符串，用typeof检查值的类型：</p>
<div><pre><code><span>typeof</span> string       <span>// "string"</span>
<span>typeof</span> boolean      <span>// "boolean"</span>
<span>typeof</span> number       <span>// "number"</span>
<span>typeof</span> <span>undefined</span>    <span>// "undefined"</span>
<span>typeof</span> <span>Symbol</span><span>(</span><span>)</span>     <span>// "symbol"</span>
<span>typeof</span> <span>{</span><span>}</span>           <span>// "object"</span>

<span>// 对象的子类型基本都返回 object</span>
<span>typeof</span> <span>[</span><span>]</span>           <span>// "object"</span>
<span>typeof</span> <span>/</span>regexp<span>/</span>     <span>// "object"</span>
<span>typeof</span> <span>new</span> <span>Error</span><span>(</span><span>)</span>  <span>// "object"</span>
<span>typeof</span> <span>new</span> <span>String</span><span>(</span><span>)</span> <span>// "object"</span>

<span>// 一些特殊情况</span>
<span>typeof</span> <span>null</span>         <span>// "object"</span>
<span>typeof</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span> <span>// "function"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>
<li>
<p><code>typeof null === 'object'</code> 是一个由来已久的bug，但因为牵涉到太多的 Web 系统，一直未被修复。</p>
<p>可用<code>(!a &amp;&amp; typeof a === &quot;object&quot;)</code>判断null类型。</p>
</li>
<li>
<p><strong>function类型是 object 的一个“子类型”。</strong></p>
<p>具体来说，<strong>函数是“可调用对象”，它有一个内部属性 [[Call]]，该属性使其可以被调用。</strong></p>
</li>
<li>
<p>数组类型也是 object 的一个“子类型”。</p>
</li>
</ul>
<h2 id="值和类型"> 值和类型</h2>
<p><strong>JavaScript 中的变量是没有类型的，只有值才有。</strong></p>
<p><strong>变量可以随时持有任何类型的值。</strong></p>
<p>在对变量执行 typeof 操作时，得到的并不是该变量的类型，而是<strong>该变量持有的值的类型</strong>，因为 JavaScript 中的变量没有类型。</p>
<h3 id="undefined-和-undeclared"> undefined 和 undeclared</h3>
<p>已在作用域中声明但还没有赋值的变量，是 <code>undefined</code> 的。</p>
<p>相反，还没有在作用域中声明过的变量，是 <code>undeclared</code> 的。</p>
<div><pre><code><span>var</span> a<span>;</span>

a<span>;</span> <span>// undefined</span>
b<span>;</span> <span>// ReferenceError: b is not defined</span>

<span>typeof</span> a<span>;</span> <span>// "undefined"</span>
<span>typeof</span> b<span>;</span> <span>// "undefined"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="typeof的安全防范机制"> typeof的安全防范机制</h3>
<p><code>typeof 一个未声明的变量</code> 返回 <code>undefined</code> 而不是报错或返回 <code>undeclared</code>之类的信息，这是因为typeof的安全防范机制。</p>
<p>在实际开发中，经常需要判断某个变量是否存在，这时这个安全防范机制就很有帮助。</p>
<p>参考以下代码：</p>
<div><pre><code><span>// 这样会抛出错误</span>
<span>if</span> <span>(</span>atob<span>)</span> <span>{</span> <span>// ReferenceError: atob is not defined</span>
  <span>// 依赖atob的代码</span>
<span>}</span>
<span>// 这样是安全的</span>
<span>if</span> <span>(</span><span>typeof</span> atob <span>===</span> <span>"undefined"</span><span>)</span> <span>{</span>
  <span>// 不写成 var atob = function() {} 是为了防止声明提升</span>
	<span>atob</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span> <span>/*..*/</span> <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>从技术角度来说，typeof 的安全防范机制对于非全局变量也很管用，虽然这种情况并不多见，也有一些开发人员不大愿意这样做。</p>
<div><pre><code><span>void</span> <span>function</span><span>(</span><span>)</span><span>{</span>
  <span>function</span> <span>FeatureXYZ</span><span>(</span><span>)</span> <span>{</span> <span>/*.. my XYZ feature ..*/</span> <span>}</span>
  
  <span>// 其他程序可能只复制了doSomethingCool的代码，这会让FeatureXYZ为undefined</span>
	<span>function</span> <span>doSomethingCool</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> helper <span>=</span>
       <span>(</span><span>typeof</span> FeatureXYZ <span>!==</span> <span>"undefined"</span><span>)</span> <span>?</span>
       <span>FeatureXYZ</span> <span>:</span>
       <span>function</span><span>(</span><span>)</span> <span>{</span> <span>/*.. default feature ..*/</span> <span>}</span><span>;</span>
    <span>var</span> val <span>=</span> <span>helper</span><span>(</span><span>)</span><span>;</span>
    <span>// ..</span>
  <span>}</span>
<span>}</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>其他模块和程序引入 doSomethingCool 时，会检查 FeatureXYZ 是否已经在宿主程序中定义过，如果是，就用现成的，否则自己定义。</p>
<p>也可以用“依赖注入“的设计模式，就是将依赖通过参数显式地传递到函数中：</p>
<div><pre><code><span>function</span> <span>doSomethingCool</span><span>(</span><span>FeatureXYZ</span><span>)</span> <span>{</span>
  <span>var</span> helper <span>=</span> FeatureXYZ <span>||</span>
     <span>function</span><span>(</span><span>)</span> <span>{</span> <span>/*.. default feature ..*/</span> <span>}</span><span>;</span>
  <span>var</span> val <span>=</span> <span>helper</span><span>(</span><span>)</span><span>;</span>
  <span>// ..</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>上述种种选择和方法各有利弊。好在 typeof 的安全防范机制为我们提供了更多选择。</p>
<h2 id="小结"> 小结</h2>
<p>JavaScript 有七种内置类型：null、undefined、boolean、number、string、object 和symbol，可以使用 typeof 运算符来查看。</p>
<p><strong>变量没有类型，但它们持有的值有类型。类型定义了值的行为特征。</strong></p>
<p>在 JavaScript 中 undefined 和 undeclared 是两码事。 undefined 是值的一种。undeclared 则表示变量还没有被声明过。</p>
<p>遗憾的是，JavaScript 却将它们混为一谈，在我们试图访问 &quot;undeclared&quot; 变量时报错：ReferenceError: a is not defined，
并且 typeof 对 undefined 和 undeclared 变量都返回 &quot;undefined&quot;。</p>
<p>然而，通过 typeof 的安全防范机制(阻止报错)来检查 undeclared 变量，有时是个不错的办法。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">值</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-2%20%E5%80%BC/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-2%20%E5%80%BC/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="值"> 值</h1>
<h2 id="数组"> 数组</h2>
<ul>
<li>
<p>与其他强类型语言不同，在 JavaScript 中，数组可以容纳任何类型的值。</p>
</li>
<li>
<p>未设置值的元素和设置为undefined是有区别的。</p>
</li>
<li>
<p>字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。</p>
</li>
<li>
<p>在数组中加入字符串键值 / 属性并不是一个好主意。建议使用对象来存放键值 / 属性值， 用数组来存放数字索引值。</p>
</li>
</ul>
<div><pre><code><span>var</span> arr <span>=</span> <span>[</span><span>12</span><span>,</span> <span>'str'</span><span>,</span> <span>false</span><span>,</span> <span>[</span><span>4</span><span>]</span><span>]</span><span>;</span>
arr<span>[</span><span>5</span><span>]</span> <span>=</span> <span>'arr5'</span><span>;</span> <span>// 注意这里跳过了arr[4]</span>
arr<span>[</span><span>'6'</span><span>]</span> <span>=</span> <span>'arr6'</span><span>;</span> <span>// 字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理。</span>
arr<span>[</span><span>'不能转换为十进制数字的字符串'</span><span>]</span> <span>=</span> <span>'foo'</span><span>;</span> <span>// 如果不能转为数字，则类似对象的键值对，此时lenth不增加</span>

arr<span>[</span><span>4</span><span>]</span> <span>// undefined</span>
arr<span>[</span><span>6</span><span>]</span> <span>// 'arr6'</span>
arr<span>[</span><span>'不能转换为十进制数字的字符串'</span><span>]</span> <span>// 'foo'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="类数组"> 类数组</h3>
<p><strong>类数组是拥有length属性，可通过下标访问元素的列表。</strong></p>
<p>但是类数组没有push、slice等数组方法，因为<strong>类数组的原型链上没有Array.prototype。</strong></p>
<p>常见的 <em>类数组</em> 的例子：</p>
<ul>
<li>DOM 查询操作返回的 DOM 元素列表</li>
<li>argument 对象（ES6 已废止）</li>
</ul>
<div><pre><code><span>var</span> nodes <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span>'.class'</span><span>)</span><span>;</span>

nodes<span>;</span> <span>// NodeList []</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>nodes<span>)</span> <span>===</span> <span>NodeList</span><span>.</span>prototype<span>;</span> <span>// true</span>
<span>typeof</span> NodeList<span>;</span> <span>// 'function'</span>

<span>var</span> foo<span>;</span>
<span>void</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  foo <span>=</span> arguments<span>;</span>
<span>}</span><span>(</span><span>)</span>

foo<span>;</span> <span>// Arguments [callee: ƒ, Symbol(Symbol.iterator): ƒ]</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>foo<span>)</span> <span>===</span> <span>Object</span><span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>一些数组函数可以用于将类数组转为数组，比如：<code>Array.prototype.slice.call( arguments )</code>、<code>Array.from( arguments )</code>；</p>
<h2 id="字符串"> 字符串</h2>
<p>请记住一个重要结论：<strong>JavaScript 中字符串是不可变的</strong>。</p>
<ul>
<li>
<p>虽然看起来很相似，但<strong>字符串和字符数组不是一回事。</strong></p>
<div><pre><code><span>var</span> a <span>=</span> <span>'foo'</span>
<span>var</span> b <span>=</span> <span>[</span><span>'f'</span><span>,</span> <span>'o'</span><span>,</span> <span>'o'</span><span>]</span>
a<span>.</span><span>indexOf</span><span>(</span> <span>"o"</span> <span>)</span><span>;</span> <span>// 1</span>
b<span>.</span><span>indexOf</span><span>(</span> <span>"o"</span> <span>)</span><span>;</span> <span>// 1</span>
<span>var</span> c <span>=</span> a<span>.</span><span>concat</span><span>(</span> <span>"bar"</span> <span>)</span><span>;</span> <span>// 'foobar'</span>
<span>var</span> d <span>=</span> b<span>.</span><span>concat</span><span>(</span> <span>[</span><span>"b"</span><span>,</span><span>"a"</span><span>,</span><span>"r"</span><span>]</span> <span>)</span><span>;</span>  <span>// ["f","o","o","b","a","r"]</span>

<span>// 一个是字符串，另一个是数组</span>
a <span>===</span> c<span>;</span> <span>// false</span>
b <span>===</span> d<span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<p><strong>JavaScript 中字符串是不可变的，而数组是可变的。</strong></p>
<p>字符串不可变是指字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串。</p>
<p>而数组的成员函数都是在其原始值上进行操作。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>'foo'</span>
<span>var</span> b <span>=</span> <span>[</span><span>'f'</span><span>,</span> <span>'o'</span><span>,</span> <span>'o'</span><span>]</span>

a<span>[</span><span>1</span><span>]</span> <span>=</span> <span>"x"</span><span>;</span> <span>// 正确取法是 a.charAt(1)</span>
b<span>[</span><span>1</span><span>]</span> <span>=</span> <span>"x"</span><span>;</span>
a<span>;</span> <span>// "foo" 字符串不可变</span>
b<span>;</span> <span>// ["f","x","o"]</span>

<span>var</span> c <span>=</span> a<span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>;</span> <span>// 不改变其原始值，而是创建并返回一个新的字符串</span>
a <span>===</span> c<span>;</span> <span>// false</span>
a<span>;</span> <span>// "foo"</span>
c<span>;</span> <span>// "FOO"</span>

b<span>.</span><span>push</span><span>(</span> <span>"!"</span> <span>)</span><span>;</span> <span>// 在其原始值上进行操作</span>
b<span>;</span> <span>// ["f","O","o","!"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<p>字符串可借用数组的一些函数</p>
<div><pre><code><span>var</span> a <span>=</span> <span>'foo'</span><span>;</span>
<span>var</span> c <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>join</span><span>.</span><span>call</span><span>(</span> a<span>,</span> <span>"-"</span> <span>)</span><span>;</span>
<span>var</span> d <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>map</span><span>.</span><span>call</span><span>(</span> a<span>,</span> <span>function</span><span>(</span><span>v</span><span>)</span><span>{</span>
  <span>return</span> v<span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>+</span> <span>"."</span><span>;</span>
<span>}</span> <span>)</span><span>.</span><span>join</span><span>(</span> <span>""</span> <span>)</span><span>;</span>
c<span>;</span> <span>// "f-o-o"</span>
d<span>;</span> <span>// "F.O.O."</span>

<span>// 字符串没有reverse函数，数组有，但是不能直接借用</span>
<span>Array</span><span>.</span>prototype<span>.</span><span>reverse</span><span>.</span><span>call</span><span>(</span> a <span>)</span><span>;</span> <span>// 返回值仍然是字符串"foo"的一个封装对象(</span>
<span>// 解决办法</span>
a<span>.</span><span>split</span><span>(</span><span>''</span><span>)</span><span>.</span><span>reverse</span><span>(</span><span>)</span><span>.</span><span>join</span><span>(</span><span>''</span><span>)</span><span>;</span> <span>// 'oof'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
</ul>
<h2 id="数字"> 数字</h2>
<p>**JavaScript 没有真正意义上的整数，只有数值类型number。**包括“整数”和带小数的十进制数。</p>
<p>JavaScript 中的“整数”就是没有小数的十进制数。所以 42.0 即等同于“整数”42。</p>
<p>与大部分现代编程语言(包括几乎所有的脚本语言)一样，JavaScript 中的数字类型是基于 <a href="https://www.zhihu.com/question/21711083" target="_blank" rel="noopener noreferrer">IEEE754</a> 标准来实现的，该标准通常也被称为“浮点数”。</p>
<p>JavaScript 使用的是“双精度”格式(即 64 位二进制)。</p>
<h3 id="数字的语法"> 数字的语法</h3>
<ul>
<li>
<p>数字的一些写法</p>
<div><pre><code><span>var</span> num <span>=</span> <span>42.0</span>

<span>// 前后的0可以省略，事实上，按平常写法即可</span>
<span>42.</span> <span>===</span> <span>42.0</span> <span>// true</span>
<span>.42</span> <span>===</span> <span>0.42</span> <span>// true</span>

<span>42.300</span> <span>===</span> <span>42.3</span><span>;</span> <span>// true</span>
<span>42.0</span> <span>===</span> <span>42</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>数字的相关函数</p>
<div><pre><code><span>// Number.prototype.toExponential</span>
<span>var</span> a <span>=</span> <span>5E10</span><span>;</span>
a<span>;</span>                  <span>// 50000000000</span>
a<span>.</span><span>toExponential</span><span>(</span><span>)</span><span>;</span>  <span>// "5e+10"</span>

a <span>*</span> a<span>;</span> <span>// 2.5e+21</span>
<span>1</span> <span>/</span> a<span>;</span> <span>// 2e-11</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>// Number.prototype.toFixed</span>
<span>var</span> a <span>=</span> <span>42.59</span><span>;</span>
a<span>.</span><span>toFixed</span><span>(</span> <span>0</span> <span>)</span><span>;</span> <span>// "43"</span>
a<span>.</span><span>toFixed</span><span>(</span> <span>1</span> <span>)</span><span>;</span> <span>// "42.6"</span>
a<span>.</span><span>toFixed</span><span>(</span> <span>2</span> <span>)</span><span>;</span> <span>// "42.59"</span>
a<span>.</span><span>toFixed</span><span>(</span> <span>3</span> <span>)</span><span>;</span> <span>// "42.590"</span>
a<span>.</span><span>toFixed</span><span>(</span> <span>4</span> <span>)</span><span>;</span> <span>// "42.5900"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>其他进制</p>
<div><pre><code><span>243</span><span>;</span> <span>// 243的十进制</span>
<span>0xf3</span><span>;</span> <span>// 243的十六进制</span>
<span>0o363</span><span>;</span> <span>// 243的八进制</span>
<span>0b11110011</span><span>;</span> <span>// 243的二进制</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
</ul>
<h3 id="较小的数值"> 较小的数值</h3>
<p>二进制浮点数最大的问题(不仅 JavaScript，所有遵循 IEEE 754 规范的语言都是如此)，是会出现如下情况:</p>
<div><pre><code><span>0.1</span> <span>+</span> <span>0.2</span> <span>===</span> <span>0.3</span> <span>// false</span>
</code></pre>
<div><span>1</span><br></div></div><p>简单来说，<strong>二进制浮点数中的 0.1 和 0.2 并不是十分精确</strong>，它们相加的结果并非刚好等于 0.3，而是一个比较接近的数字 0.30000000000000004，所以条件判断结果为 false。</p>
<p>最常见的方法是<strong>设置一个误差范围值，通常称为“机器精度”(machine epsilon)</strong>，对JavaScript 的数字来说，这个值通常是 2^-52 (2.220446049250313e-16)。</p>
<div><pre><code><span>// ES6版本前的兼容</span>
<span>if</span> <span>(</span><span>!</span>Number<span>.</span><span>EPSILON</span><span>)</span> <span>{</span>
  Number<span>.</span><span>EPSILON</span> <span>=</span> Math<span>.</span><span>pow</span><span>(</span><span>2</span><span>,</span> <span>-</span><span>52</span><span>)</span><span>;</span>
<span>}</span>

<span>function</span> <span>numbersCloseEnoughToEqual</span><span>(</span><span>n1<span>,</span>n2</span><span>)</span> <span>{</span>
  <span>return</span> Math<span>.</span><span>abs</span><span>(</span> n1 <span>-</span> n2 <span>)</span> <span>&lt;</span> Number<span>.</span><span>EPSILON</span><span>;</span>
<span>}</span>

<span>numbersCloseEnoughToEqual</span><span>(</span> <span>0.1</span> <span>+</span> <span>0.2</span><span>,</span> <span>0.3</span> <span>)</span><span>;</span> <span>// true</span>
<span>numbersCloseEnoughToEqual</span><span>(</span> <span>0.0000001</span><span>,</span> <span>0.0000002</span> <span>)</span><span>;</span>  <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><div><pre><code><span>// 最大浮点数</span>
Number<span>.</span><span>MAX_VALUE</span> <span>// 1.7976931348623157e+308</span>

<span>// 最小浮点数 无限接近于0</span>
Number<span>.</span><span>MIN_VALUE</span> <span>// 5e-324</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="整数的安全范围"> 整数的安全范围</h3>
<p>数字的呈现方式决定了“整数”的安全值范围远远小于 Number.MAX_VALUE。</p>
<div><pre><code>Number<span>.</span><span>MAX_SAFE_INTEGER</span> <span>// 2^53 - 1</span>
Number<span>.</span><span>MIN_SAFE_INTEGER</span> <span>// - 2^53 + 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在处理大数值整数时，可以将其转为字符串进行处理。将来 JavaScript 也许会加入对大数值的支持。</p>
<h3 id="整数检测"> 整数检测</h3>
<div><pre><code><span>// ES6之前版本的polyfill</span>
<span>if</span> <span>(</span><span>!</span>Number<span>.</span>isInteger<span>)</span> <span>{</span>
  Number<span>.</span><span>isInteger</span> <span>=</span> <span>function</span><span>(</span><span>num</span><span>)</span> <span>{</span>
     <span>return</span> <span>typeof</span> num <span>==</span> <span>"number"</span> <span>&amp;&amp;</span> num <span>%</span> <span>1</span> <span>==</span> <span>0</span><span>;</span>
  <span>}</span><span>;</span>
<span>}</span>
Number<span>.</span><span>isInteger</span><span>(</span> <span>42</span> <span>)</span><span>;</span>     <span>// true</span>
Number<span>.</span><span>isInteger</span><span>(</span> <span>42.000</span> <span>)</span><span>;</span> <span>// true</span>
Number<span>.</span><span>isInteger</span><span>(</span> <span>42.3</span> <span>)</span><span>;</span>   <span>// false</span>

<span>// ES6之前版本的polyfill</span>
<span>if</span> <span>(</span><span>!</span>Number<span>.</span>isSafeInteger<span>)</span> <span>{</span>
  Number<span>.</span><span>isSafeInteger</span> <span>=</span> <span>function</span><span>(</span><span>num</span><span>)</span> <span>{</span>
     <span>return</span> Number<span>.</span><span>isInteger</span><span>(</span> num <span>)</span> <span>&amp;&amp;</span>
         Math<span>.</span><span>abs</span><span>(</span> num <span>)</span> <span>&lt;=</span> Number<span>.</span><span>MAX_SAFE_INTEGER</span><span>;</span>
  <span>}</span><span>;</span>
<span>}</span>
<span>// 检测是否为安全的整数</span>
Number<span>.</span><span>isSafeInteger</span><span>(</span> Number<span>.</span><span>MAX_SAFE_INTEGER</span> <span>)</span><span>;</span> <span>// true</span>
Number<span>.</span><span>isSafeInteger</span><span>(</span> Math<span>.</span><span>pow</span><span>(</span> <span>2</span><span>,</span> <span>53</span> <span>)</span> <span>)</span><span>;</span> <span>// false</span>
Number<span>.</span><span>isSafeInteger</span><span>(</span> Math<span>.</span><span>pow</span><span>(</span> <span>2</span><span>,</span> <span>53</span> <span>)</span> <span>-</span> <span>1</span> <span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="特殊数值"> 特殊数值</h2>
<p>以下内容介绍几个特殊数值：<code>undefined</code>、<code>NaN</code>、<code>正负0</code>、<code>正负无穷</code>。</p>
<h3 id="undefined与null"> undefined与null</h3>
<p>undefined 类型只有一个值，即 undefined。null 类型也只有一个值，即 null。它们的名称既是类型也是值。</p>
<p>undefined 和 null 常被用来表示“空的”值或“不是值”的值。二者之间有一些细微的差别。例如:</p>
<ul>
<li>
<p>null 指空值(empty value)</p>
</li>
<li>
<p>undefined 指没有值(missing value)</p>
<p>或者:</p>
</li>
<li>
<p>undefined 指从未赋值</p>
</li>
<li>
<p>null 指曾赋过值，但是目前没有值</p>
</li>
</ul>
<p>null 是一个特殊关键字，不是标识符，我们不能将其当作变量来使用和赋值。</p>
<p><strong>undefined 是一个内置标识符，可以被当作变量来使用和赋值。（糟糕的设计）</strong></p>
<h3 id="全局标识符undefined"> 全局标识符undefined</h3>
<p>非严格模式下可以为全局标识符undefined赋值，也可定义一个局部变量叫undefined：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>undefined</span> <span>=</span> <span>2</span><span>;</span> <span>// 修改全局标识符undefined，非常糟糕的做法!</span>
<span>}</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>"use strict"</span><span>;</span>
  <span>undefined</span> <span>=</span> <span>2</span><span>;</span> <span>// TypeError!</span>
<span>}</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>"use strict"</span><span>;</span>
  <span>var</span> <span>undefined</span> <span>=</span> <span>2</span><span>;</span> <span>// 定义局部变量名叫undefined</span>
  console<span>.</span><span>log</span><span>(</span> <span>undefined</span> <span>)</span><span>;</span> <span>// 2</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><strong>永远不要重新定义 undefined。</strong></p>
<p><em>我们可以通过 <code>void 0</code> 获得undefined的值，其他 void 表达式也可以，void 0、void 1 和 undefined 之间并没有实质上的区别。</em></p>
<h3 id="特殊的数字"> 特殊的数字</h3>
<ul>
<li>
<p>NaN</p>
<p>NaN可以理解为“无效的数值”，但它是<strong>数字类型</strong>。</p>
<div><pre><code><span>var</span> nan <span>=</span> <span>1</span> <span>/</span> <span>'foo'</span><span>;</span> <span>// NaN</span>
<span>typeof</span> nan<span>;</span> <span>// 'number'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>NaN是一个特殊值，它和自身不相等，事实上，<strong>NaN不等于任何值</strong>。</p>
<div><pre><code><span>NaN</span> <span>===</span> <span>NaN</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br></div></div><p>可以通过ES6的 <code>Number.isNaN</code> 函数判断一个值是否是NaN。</p>
<div><pre><code><span>// polyfill</span>
<span>if</span> <span>(</span><span>!</span>Number<span>.</span>isNaN<span>)</span> <span>{</span>
  Number<span>.</span><span>isNaN</span> <span>=</span> <span>function</span><span>(</span><span>n</span><span>)</span> <span>{</span>
    <span>return</span> n <span>!==</span> n<span>;</span> <span>// 利用NaN不等于自身的特性</span>
  <span>}</span><span>;</span>
<span>}</span>

Number<span>.</span><span>isNaN</span><span>(</span> <span>NaN</span> <span>)</span><span>;</span> <span>// true</span>
Number<span>.</span><span>isNaN</span><span>(</span> <span>'foo'</span> <span>)</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>无穷数</p>
<div><pre><code><span>var</span> a <span>=</span> <span>1</span> <span>/</span> <span>0</span><span>;</span>  <span>// Infinity</span>
<span>var</span> b <span>=</span> <span>-</span><span>1</span> <span>/</span> <span>0</span><span>;</span> <span>// -Infinity</span>

Number<span>.</span><span>POSITIVE_INFINITY</span> <span>// Infinity</span>
Number<span>.</span><span>NEGATIVE_INFINITY</span> <span>// -Infinity</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>JavaScript 使用有限数字表示法(finite numeric representation，即之前介绍过的 IEEE 754 浮点数)，所以和纯粹的数学运算不同，JavaScript 的运算结果有可能溢出，此时结果为 Infinity 或者 -Infinity。</p>
<div><pre><code><span>var</span> a <span>=</span> Number<span>.</span><span>MAX_VALUE</span><span>;</span> <span>// 1.7976931348623157e+308</span>
a <span>+</span> a<span>;</span> <span>// Infinity</span>
a <span>+</span> Math<span>.</span><span>pow</span><span>(</span> <span>2</span><span>,</span> <span>970</span> <span>)</span><span>;</span> <span>// Infinity</span>
a <span>+</span> Math<span>.</span><span>pow</span><span>(</span> <span>2</span><span>,</span> <span>969</span> <span>)</span><span>;</span> <span>// 1.7976931348623157e+308</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>规范规定，如果数学运算的结果超出处理范围，则由 IEEE 754 规范中的“就近取整”(round-to-nearest)模式来决定最后的结果。</p>
<p>例如，相对于 Infinity，Number.MAX_ VALUE + Math.pow(2, 969)与Number.MAX_VALUE更为接近，因此它被“向下取整”(round down);而 Number.MAX_VALUE + Math.pow(2, 970) 与 Infinity 更为接近，所以它被“向上取整”(round up)。</p>
<p><strong>计算结果一旦溢出为无穷数(infinity)就无法再得到有穷数。换句话说，就是你可以从有穷走向无穷，但无法从无穷回到有穷。</strong></p>
</li>
<li>
<p>零值</p>
<p>JavaScript 有一个常规的 0 (也叫作 +0)和一个 <code>-0</code>。</p>
<p>-0的情况很令人费解，这里仅简单介绍。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>0</span> <span>/</span> <span>-</span><span>3</span><span>;</span> <span>// -0</span>
<span>var</span> b <span>=</span> <span>0</span> <span>*</span> <span>-</span><span>3</span><span>;</span> <span>// -0</span>

<span>// 加减法不会得到-0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>区分-0的方法：</p>
<div><pre><code><span>function</span> <span>isNegZero</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  n <span>=</span> <span>Number</span><span>(</span> n <span>)</span><span>;</span>
  <span>return</span> <span>(</span>n <span>===</span> <span>0</span><span>)</span> <span>&amp;&amp;</span> <span>(</span><span>1</span> <span>/</span> n <span>===</span> <span>-</span><span>Infinity</span><span>)</span><span>;</span>
<span>}</span>

<span>isNegZero</span><span>(</span> <span>-</span><span>0</span> <span>)</span><span>;</span> <span>// true</span>
<span>isNegZero</span><span>(</span> <span>0</span> <span>/</span> <span>-</span><span>3</span> <span>)</span><span>;</span> <span>// true</span>
<span>isNegZero</span><span>(</span> <span>0</span> <span>)</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>为什么需要负0：</p>
<blockquote>
<p>有些应用程序中的数据需要以级数形式来表示(比如动画帧的移动速度)，数字的符号位 (sign)用来代表其他信息(比如移动的方向)。此时如果一个值为 0 的变量失去了它的符号位，它的方向信息就会丢失。所以保留 0 值的符号位可以防止这类情况发生。</p>
</blockquote>
</li>
</ul>
<h3 id="特殊等式"> 特殊等式</h3>
<p>NaN 和 -0 在相等比较时的表现有些特别，我们可以用ES6的<code>Object.is</code>函数来判断。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>2</span> <span>/</span> <span>"foo"</span><span>;</span> <span>// NaN</span>
<span>var</span> b <span>=</span> <span>-</span><span>3</span> <span>*</span> <span>0</span><span>;</span> <span>// -0</span>

Object<span>.</span><span>is</span><span>(</span> a<span>,</span> <span>NaN</span> <span>)</span><span>;</span> <span>// true</span>
Object<span>.</span><span>is</span><span>(</span> b<span>,</span> <span>-</span><span>0</span> <span>)</span><span>;</span> <span>// true</span>
Object<span>.</span><span>is</span><span>(</span> b<span>,</span> <span>0</span> <span>)</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>能使用 == 和 ===时就尽量不要使用 Object.is，因为前者效率更高、更为通用。</p>
<p>Object.is主要用来处理那些特殊的相等比较。</p>
<h2 id="值和引用"> 值和引用</h2>
<blockquote>
<p>在 C++ 中如果要向函数传递一个数字并在函数中更改它的值，就可以这样来声明参 数int&amp; myNum，即如果传递的变量是x，myNum就是指向x的引用。引用就像一种特殊的指针，是来指向变量的指针(别名)。如果参数不声明为引用的话，参数值总是通过值复制 的方式传递，即便对复杂的对象值也是如此。</p>
<p>（总结就是C++可以有引用的引用）</p>
</blockquote>
<ul>
<li>
<p><strong>JavaScript 中没有指针</strong>，引用的工作机制也不尽相同。在 JavaScript 中变量不可能成为指向另一个变量的引用。</p>
</li>
<li>
<p><strong>JavaScript 引用指向的是值</strong>。如果一个值有 10 个引用，这些引用指向的都是同一个值，它们相互之间没有引用 / 指向关系。</p>
</li>
<li>
<p>我们无法自行决定使用值复制还是引用复制，<strong>一切由值的类型来决定</strong>。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>2</span><span>;</span>
<span>var</span> b <span>=</span> a<span>;</span> <span>// b是a的值的一个副本</span>
b<span>++</span><span>;</span>
a<span>;</span> <span>// 2</span>
b<span>;</span> <span>// 3</span>

<span>var</span> c <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>;</span>
<span>var</span> d <span>=</span> c<span>;</span> <span>// d是[1,2,3]的一个引用</span>
d<span>.</span><span>push</span><span>(</span> <span>4</span> <span>)</span><span>;</span>
c<span>;</span> <span>// [1,2,3,4]</span>
d<span>;</span> <span>// [1,2,3,4]</span>

<span>// 一个引用无法更改另一个引用的指向</span>
d <span>=</span> <span>[</span><span>]</span><span>;</span>
c<span>;</span> <span>// [1,2,3,4]</span>
d<span>;</span> <span>// []</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
<li>
<p>简单值总是通过<strong>值复制的方式</strong>来赋值 / 传递，包括 null、undefined、字符串、数字、布尔和 ES6 中的 symbol。</p>
</li>
<li>
<p>复合值对象和函数等，则总是通过<strong>引用复制</strong>的方式来赋值 / 传递。</p>
</li>
</ul>
<h2 id="小结"> 小结</h2>
<p>字符串和字符数组类似，但是它们不是一个东西，在将字符串作为数组来处理时需要特别小心。</p>
<p>JavaScript中没有“整数”，只有“数字类型”，“整数”其实就是不带小数的浮点数。</p>
<p>基本类型中定义了几个特殊的值：</p>
<ul>
<li>null 类型只有一个值 null，undefined 类型也只有一个值 undefined。void 运算符返回 undefined。</li>
</ul>
<p>数字类型有几个特殊值：</p>
<ul>
<li>NaN</li>
<li>+Infinity、-Infinity</li>
<li>-0</li>
</ul>
<p>简单标量基本类型值(字符串和数字等)通过值复制来赋值 / 传递，而复合值(对象等) 通过引用复制来赋值 / 传递。</p>
<p>JavaScript 中的引用和其他语言中的引用 / 指针不同，它们不能指向别的变量 / 引用，<strong>只能指向值</strong>。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">原生函数</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-3%20%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-3%20%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="原生函数"> 原生函数</h1>
<p>原生函数（native function）又称内建函数（built-in function）。</p>
<p>常用的原生函数有：</p>
<ul>
<li>String()</li>
<li>Number()</li>
<li>Boolean()</li>
<li>Array()</li>
<li>Object()</li>
<li>Function()</li>
<li>RegExp()</li>
<li>Date()</li>
<li>Error()</li>
<li>Symbol()</li>
</ul>
<p>以String为例：</p>
<div><pre><code><span>var</span> foo <span>=</span> <span>new</span> <span>String</span><span>(</span><span>'abc'</span><span>)</span>
<span>typeof</span> foo <span>// 'object'</span>
foo <span>instanceof</span> <span>String</span> <span>// true</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> foo <span>)</span><span>;</span> <span>// "[object String]"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><strong><code>new String(&quot;abc&quot;)</code> 创建的是字符串 &quot;abc&quot; 的封装对象，而非基本类型值 &quot;abc&quot;。</strong></p>
<h2 id="内部属性-class"> 内部属性[[class]]</h2>
<p>所有 typeof 返回值为 &quot;object&quot; 的对象(如数组)都包含一个内部属性 <code>[[Class]]</code>。</p>
<p>这个属性无法直接访问， 一般通过 <code>Object.prototype.toString</code> 来查看。</p>
<div><pre><code><span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span> <span>)</span><span>;</span> <span>// "[object Array]"</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> <span><span>/</span><span>regex-literal</span><span>/</span><span>i</span></span> <span>)</span><span>;</span> <span>// "[object RegExp]"</span>

<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> <span>null</span> <span>)</span><span>;</span> <span>// "[object Null]"</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> <span>undefined</span> <span>)</span><span>;</span> <span>// "[object Undefined]"</span>

<span>// 基本类型值被各自的封装对象自动包装，所以它们的内部 [[Class]] 属性值分别为 "String"、"Number" 和 "Boolean"</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> <span>"abc"</span> <span>)</span><span>;</span> <span>// "[object String]"</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> <span>42</span> <span>)</span><span>;</span> <span>// "[object Number]"</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> <span>true</span> <span>)</span><span>;</span> <span>// "[object Boolean]"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="包装对象-boxing-与拆封-unboxing"> 包装对象（boxing）与拆封（unboxing）</h2>
<p>基本类型值没有属性和方法，需要通过封装对象才能访问，JavaScript 会在需要时自动为基本类型值包装一个封装对象。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>"abc"</span><span>;</span>

<span>// 包装对象才有属性访问，JS会自动包装成对象</span>
a<span>.</span>length<span>;</span> <span>// 3</span>
a<span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>;</span> <span>// "ABC"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><strong>一般情况下，我们不需要直接使用封装对象</strong>。最好的办法是让 JavaScript 引擎自己决定什么时候应该使用封装对象。</p>
<p>所以应该优先考虑使用 &quot;abc&quot; 和 42 这样的基本类型值，而非 new String(&quot;abc&quot;) 和 new Number(42)。</p>
<p><code>valueOf</code> 函数可以得到包装对象中的基本类型值。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>new</span> <span>String</span><span>(</span> <span>"abc"</span> <span>)</span><span>;</span>
a<span>.</span><span>valueOf</span><span>(</span><span>)</span><span>;</span> <span>// "abc"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在需要用到封装对象中的基本类型值的地方会发生<strong>隐式拆封，即强制类型转换</strong>。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>new</span> <span>String</span><span>(</span> <span>"abc"</span> <span>)</span><span>;</span>
<span>var</span> b <span>=</span> a <span>+</span> <span>""</span><span>;</span> <span>// 这里发生了拆封，即强制类型转换</span>
<span>typeof</span> a<span>;</span> <span>// "object"</span>
<span>typeof</span> b<span>;</span> <span>// "string"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="原生函数作为构造函数"> 原生函数作为构造函数</h2>
<p>对于数组、对象、函数、正则表达式，<strong>推荐使用字面量的形式创建</strong>。</p>
<p>应该尽量避免使用构造函数，他们经常会产生意外效果。</p>
<h3 id="array"> Array</h3>
<p>使用<code>new Array(length)</code>创建数组可以预设数组长度，但是必须注意“空单元”的问题。</p>
<p>预设长度只是将数组对象的length属性设置为length，但事实上<strong>数组中不存在任何元素</strong>。</p>
<div><pre><code><span>var</span> arr <span>=</span> <span>new</span> <span>Array</span><span>(</span><span>3</span><span>)</span><span>;</span>

<span>// 相当于</span>
<span>var</span> arr <span>=</span> <span>[</span><span>]</span><span>;</span>
arr<span>.</span>length <span>=</span> <span>3</span><span>;</span>

<span>// arr有3个空单元</span>
arr <span>// chrome: [empty × 3] , firefox: Array [&lt;3 empty slots>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p><em><em>注意</em>“空单元”<em>和</em>“元素为undefined”<em>是不同的。</em></em></p>
<div><pre><code><span>var</span> a <span>=</span> <span>new</span> <span>Array</span><span>(</span> <span>3</span> <span>)</span><span>;</span>
<span>var</span> b <span>=</span> <span>[</span> <span>undefined</span><span>,</span> <span>undefined</span><span>,</span> <span>undefined</span> <span>]</span><span>;</span>

<span>// join函数会使用length属性做循环</span>
a<span>.</span><span>join</span><span>(</span> <span>"-"</span> <span>)</span><span>;</span> <span>// "--"</span>
b<span>.</span><span>join</span><span>(</span> <span>"-"</span> <span>)</span><span>;</span> <span>// "--"</span>

<span>// map函数只关心元素是否存在，即是这个元素的值是undefined</span>
a<span>.</span><span>map</span><span>(</span><span>(</span><span>v<span>,</span>i</span><span>)</span> <span>=></span> i<span>)</span><span>;</span> <span>// [ undefined x 3 ]</span>
b<span>.</span><span>map</span><span>(</span><span>(</span><span>v<span>,</span>i</span><span>)</span> <span>=></span> i<span>)</span><span>;</span> <span>// [ 0, 1, 2 ]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><p>Warning</p>
<p><strong>总之，永远不要创建和使用空单元数组。</strong></p>
</div>
<h3 id="object、function、regexp"> Object、Function、RegExp</h3>
<p>除非万不得已，否则尽量不要使用 Object、Function、RegExp，建议使用字面量创建：</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span><span>}</span>
<span>var</span> <span>fun</span> <span>=</span> <span>function</span> <span>fun</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>fun</span> <span>(</span><span>)</span> <span>{</span><span>}</span>
<span>var</span> regexp <span>=</span> <span><span>/</span><span>regexp</span><span>/</span><span>ig</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="date、error"> Date、Error</h3>
<p><code>Date、Error</code>没有字面量创建的形式，只能使用构造函数创建。</p>
<div><pre><code><span>var</span> date <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>;</span>

<span>if</span> <span>(</span>somethingWrong<span>)</span> <span>{</span>
  <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'error-message'</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="symbol"> Symbol</h3>
<p><code>Symbol</code>没有字面量形式，且不能带new关键字创建：</p>
<div><pre><code><span>var</span> sym <span>=</span> <span>Symbol</span><span>(</span><span>'sym'</span><span>)</span>
sym<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// Symbol(sym)</span>
<span>typeof</span> sym<span>;</span> <span>// "symbol"</span>

<span>var</span> foo <span>=</span> <span>{</span>
  <span>[</span>mysym<span>]</span><span>:</span> <span>'foo'</span>
<span>}</span><span>;</span>
Object<span>.</span><span>getOwnPropertySymbols</span><span>(</span> a <span>)</span><span>;</span> <span>// [ Symbol(sym) ]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="原生函数的prototype属性"> 原生函数的prototype属性</h3>
<p>原生构造函数有自己的 .prototype 对象，如 Array.prototype、String.prototype 等。</p>
<p><em>根据文档约定， 我们将 String.prototype.XYZ 简写为 String#XYZ， 对其他 .prototypes 也同样如此。</em></p>
<ul>
<li>String#indexOf(..) 在字符串中找到指定子字符串的位置。</li>
<li>String#charAt(..) 获得字符串指定位置上的字符。</li>
<li>String#substr(..)、String#substring(..) 和 String#slice(..) 获得字符串的指定部分。</li>
<li>String#toUpperCase() 和 String#toLowerCase() 将字符串转换为大写或小写。</li>
<li>String#trim() 去掉字符串前后的空格，返回新的字符串。</li>
</ul>
<p>几个特殊例子：</p>
<div><pre><code><span>typeof</span> <span>Function</span><span>.</span>prototype<span>;</span> <span>// "function"</span>
<span>Function</span><span>.</span><span>prototype</span><span>(</span><span>)</span><span>;</span> <span>// 空函数</span>

<span>RegExp</span><span>.</span>prototype<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// "/(?:)/"——空正则表达式</span>
<span>"abc"</span><span>.</span><span>match</span><span>(</span> <span>RegExp</span><span>.</span>prototype <span>)</span><span>;</span> <span>// [""]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="小结"> 小结</h2>
<p>JavaScript 为基本数据类型值提供了封装对象，称为原生函数(如 String、Number、Boolean 等)。</p>
<p>访问<code>内部属性[[class]]</code>，可以使用toString方法，比如<code>Object.prototype.toString.call([])</code>。</p>
<p>对于基本类型值，比如<code>'abc'</code>，如果要访问它的属性或方法，JavaScript 引擎会自动对该值进行包装。</p>
<p>不到万不得已，不要使用构造函数创建对象，比如<code>new Array()</code>，而是用字面量的形式，比如<code>var arr = []</code>。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">强制类型转换</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-4%20%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-4%20%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="强制类型转换"> 强制类型转换</h1>
<div><p>Info</p>
<p>理解JavaScript的强制类型转换是非常有用的。</p>
<p>本章旨在全面介绍强制类型转换的优缺点，让你能够在开发中合理地运用它。</p>
</div>
<h2 id="值类型转换"> 值类型转换</h2>
<p>JavaScript的类型转换分为：</p>
<ul>
<li>显式强制类型转换</li>
<li>隐式强制类型转换</li>
</ul>
<div><pre><code><span>var</span> num <span>=</span> <span>42</span><span>;</span>
<span>var</span> str <span>=</span> num <span>+</span> <span>''</span><span>;</span> <span>// 隐式强制类型转换</span>
<span>var</span> str <span>=</span> <span>String</span><span>(</span>num<span>)</span><span>;</span> <span>// 隐式强制类型转换</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="字符串、数字和布尔值之间的类型转换规则"> 字符串、数字和布尔值之间的类型转换规则</h2>
<blockquote>
<p>ES5 规范第 9 节中定义了一些“抽象操作”(即“仅供内部使用的操作”)和转换规则。</p>
<p>本节着重介绍 ToString、ToNumber 和 ToBoolean，附带讲一讲 ToPrimitive。</p>
</blockquote>
<h3 id="tostring"> ToString</h3>
<p>抽象操作 ToString 负责处理非字符串到字符串的强制类型转换。</p>
<p>转换规则：</p>
<ul>
<li><code>null =&gt; 'null'</code></li>
<li><code>undefined =&gt; 'undefined'</code></li>
<li><code>true =&gt; 'true'</code></li>
<li><code>42 =&gt; '42'</code>，极大极小的值会使用指数形式，比如<code>1.07 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 1000 =&gt; 1.07e21</code></li>
<li>普通对象的toString函数(<code>Object.prototype.toString</code>)返回内部属性 [[Class]] 的值，比如<code>[object Object]</code></li>
<li>数组的默认 toString() 方法经过了重新定义，<code>[1,2,3] =&gt; '1,2,3'</code></li>
</ul>
<div><pre><code><span>// null 和 undefined 原型链上没有 toString 方法</span>
<span>// null => 'null'</span>
<span>// undefined => 'undefined'</span>
<span>(</span><span>false</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// 'false'</span>
<span>(</span><span>42</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// '42'</span>
<span>(</span><span>1.07</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span> <span>*</span> <span>1000</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// 1.07e21</span>
<span>(</span><span>{</span>a<span>:</span> <span>1</span><span>}</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// '[object Object]'</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// '1,2,3'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="tonumber"> ToNumber</h3>
<p><code>抽象操作 ToNumber</code> 可以将非数字值转为数字使用。</p>
<p>转换规则：</p>
<ul>
<li>
<p><code>true =&gt; 1, false =&gt; 0</code></p>
</li>
<li>
<p><code>undefined =&gt; NaN</code></p>
</li>
<li>
<p><code>null =&gt; 0</code></p>
</li>
<li>
<p>字符串的处理基本遵循数字字面量的相关规则，失败时返回 NaN。<code>'42' =&gt; 42, 'str' =&gt; NaN</code></p>
</li>
<li>
<p>对象</p>
<ol>
<li>
<p>检查该值是否有 valueOf() 方法。</p>
</li>
<li>
<p>如果有并且返回基本类型值，就使用该值进行强制类型转换。</p>
</li>
<li>
<p>如果没有就使用 toString()的返回值(如果存在)来进行强制类型转换。</p>
</li>
<li>
<p>如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</p>
</li>
</ol>
<div><pre><code><span>var</span> a <span>=</span> <span>{</span>
	<span>valueOf</span><span>(</span><span>)</span><span>{</span> <span>return</span> <span>"42"</span><span>;</span> <span>}</span>
<span>}</span><span>;</span>
<span>var</span> b <span>=</span> <span>{</span>
  <span>toString</span><span>(</span><span>)</span><span>{</span> <span>return</span> <span>"42"</span><span>;</span> <span>}</span>
<span>}</span><span>;</span>
<span>var</span> c <span>=</span> <span>[</span><span>4</span><span>,</span><span>2</span><span>]</span><span>;</span>
c<span>.</span><span>toString</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
	<span>return</span> <span>this</span><span>.</span><span>join</span><span>(</span> <span>""</span> <span>)</span><span>;</span> <span>// "42"</span>
<span>}</span><span>;</span>

<span>Number</span><span>(</span> a <span>)</span><span>;</span> <span>// 42</span>
<span>Number</span><span>(</span> b <span>)</span><span>;</span> <span>// 42</span>
<span>Number</span><span>(</span> c <span>)</span><span>;</span> <span>// 42</span>
<span>Number</span><span>(</span> <span>""</span> <span>)</span><span>;</span> <span>// 0</span>
<span>Number</span><span>(</span> <span>[</span><span>]</span> <span>)</span><span>;</span> <span>// 0</span>
<span>Number</span><span>(</span> <span>[</span> <span>"abc"</span> <span>]</span> <span>)</span><span>;</span> <span>// NaN</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
</ul>
<h3 id="toboolean"> ToBoolean</h3>
<div><p>Note</p>
<p>关于布尔值的类型转换存在很多误解，需要特别注意。</p>
</div>
<p>首先也是最重要的一点是，在JavaScript中，有两个关键字<code>true</code>和<code>false</code>，分别代表真和假。</p>
<p>有些语言中可能有数值 1 和 0 分别等同于 true 和 false。</p>
<p>在 JavaScript 中布尔值和数字是不一样的，虽然有强制类型转换<code>true &lt;=&gt; 1</code>、<code>false &lt;=&gt; 0</code>，但是它们不是一回事。</p>
<h4 id="假值"> 假值</h4>
<p>以下这些是假值:</p>
<ul>
<li>undefined</li>
<li>null</li>
<li>false</li>
<li>+0、-0 和 NaN</li>
<li>&quot;&quot;</li>
</ul>
<p><strong>可以认为假值列表以外的值都是真值。</strong></p>
<h3 id="json-字符串化"> JSON 字符串化</h3>
<div><p>Info</p>
<p>JSON 字符串化并非严格意义上的强制类型转换，但是其中涉及 <code>ToString</code>的相关规则。</p>
</div>
<p>对大多数简单值来说，JSON 字符串化和 toString() 的效果基本相同，只不过序列化的结果总是字符串:</p>
<div><pre><code><span>JSON</span><span>.</span><span>stringify</span><span>(</span> <span>42</span> <span>)</span><span>;</span> <span>// "42"</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> <span>'42'</span> <span>)</span><span>;</span> <span>// '42"'(含有双引号的字符串)</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> <span>null</span> <span>)</span><span>;</span> <span>// "null"</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> <span>true</span> <span>)</span><span>;</span> <span>// "true"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h4 id="json安全-json-safe"> JSON安全（JSON-safe）</h4>
<p>安全的 JSON 值是指能够呈现为有效 JSON 格式的值。</p>
<p>以下值不符合 JSON 结构标准，支持 JSON 的语言无法处理它们：</p>
<ul>
<li>undefined</li>
<li>function</li>
<li>symbol</li>
<li>包含循环引用的对象</li>
</ul>
<p>JSON.stringify 在对象中遇到 <code>undefined、function 、symbol</code> 时会自动将其忽略，在数组中则会返回 <code>null</code> (以保证单元位置不变)。</p>
<p>对包含循环引用的对象执行 JSON.stringify 会出错。</p>
<div><pre><code><span>// 注意这两个是忽略，然后返回的是undefined，不是undefined字符串</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> <span>undefined</span> <span>)</span><span>;</span> <span>// undefined</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span> <span>)</span><span>;</span> <span>// undefined</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span>
  <span>[</span><span>1</span><span>,</span><span>undefined</span><span>,</span><span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>,</span><span>4</span><span>]</span>
<span>)</span><span>;</span> <span>// '[1,null, null,4]'</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span>
  <span>{</span> a<span>:</span><span>2</span><span>,</span> <span>b</span><span>:</span><span>function</span><span>(</span><span>)</span><span>{</span><span>}</span> <span>}</span>
<span>)</span><span>;</span> <span>// '{"a":2}'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h4 id="tojson方法"> toJSON方法</h4>
<p>如果要对含有非法 JSON 值的对象做字符串化，或者有某些值无法被序列化时，就需要定义 toJSON 来<strong>返回一个安全的 JSON 值</strong>。</p>
<p>如果对象中定义了 toJSON 方法，JSON 字符串化时会首先调用该方法，然后<strong>用它的返回值来进行序列化</strong>。</p>
<p>也就是说，toJSON 应该“返回一个能够被字符串化的安全的 JSON 值”，而不是“返回一个 JSON 字符串”。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>{</span>
  val<span>:</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>,</span>
  <span>// 正确，对数组进行JSON化</span>
  <span>toJSON</span><span>(</span><span>)</span><span>{</span>
    <span>return</span> <span>this</span><span>.</span>val<span>.</span><span>slice</span><span>(</span> <span>1</span> <span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
<span>var</span> b <span>=</span> <span>{</span>
  val<span>:</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>,</span>
  <span>// 错误，对toJSON 返回的字符串做字符串化，而非数组本身</span>
  <span>toJSON</span><span>:</span> <span>function</span><span>(</span><span>)</span><span>{</span>
    <span>return</span> <span>"["</span> <span>+</span> <span>this</span><span>.</span>val<span>.</span><span>slice</span><span>(</span> <span>1</span> <span>)</span><span>.</span><span>join</span><span>(</span><span>)</span> <span>+</span><span>"]"</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> a <span>)</span><span>;</span> <span>// "[2,3]"</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> b <span>)</span><span>;</span> <span>// ""[2,3]""</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h4 id="replacer参数"> replacer参数</h4>
<p><code>replacer</code>参数可以是字符串数组或者函数，用来指定对象序列化过程中哪些属性应该被处理。</p>
<p>如果 replacer 是一个数组，其中包含序列化要处理的对象的属性名称，除此之外其他的属性则被忽略。</p>
<p>如果 replacer 是一个函数，它会对对象本身调用一次，然后对对象中的每个属性各调用一次，每次传递两个参数，键和值。如果要忽略某个键就返回 undefined，否则返回指定的值。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>{</span>
  b<span>:</span> <span>42</span><span>,</span>
  c<span>:</span> <span>"42"</span><span>,</span>
  d<span>:</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span>
<span>}</span><span>;</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span> a<span>,</span> <span>[</span><span>"b"</span><span>,</span><span>"c"</span><span>]</span> <span>)</span><span>;</span> <span>// "{"b":42,"c":"42"}"</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> a<span>,</span> <span>function</span><span>(</span><span>key<span>,</span>value</span><span>)</span><span>{</span>
  <span>if</span> <span>(</span>key <span>!==</span> <span>"c"</span><span>)</span> <span>return</span> value<span>;</span>
<span>}</span> <span>)</span><span>;</span> <span>// "{"b":42,"d":[1,2,3]}"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h4 id="space参数-不常用"> space参数（不常用）</h4>
<p>space用来指定输出的缩进格式。</p>
<p>space 为正整数时是指定每一级缩进的字符数，它还可以是字符串，此时最前面的十个字符被用于每一级的缩进。</p>
<div><pre><code><span>var</span> a <span>=</span> <span>{</span> b<span>:</span> <span>42</span><span>,</span>
c<span>:</span> <span>"42"</span><span>,</span>
d<span>:</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>]</span> <span>}</span><span>;</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> a<span>,</span> <span>null</span><span>,</span> <span>2</span> <span>)</span><span>;</span>
<span>JSON</span><span>.</span><span>stringify</span><span>(</span> a<span>,</span> <span>null</span><span>,</span> <span>'-'</span><span>)</span><span>;</span>
<span>// "{</span>
<span>// -"b": 42,</span>
<span>// -"c": "42",</span>
<span>// -"d": [</span>
<span>// --1,</span>
<span>// --2</span>
<span>// -]</span>
<span>// }"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h4 id="json小结"> JSON小结</h4>
<p>请记住，JSON.stringify 并不是强制类型转换。在这里介绍是因为它涉及 ToString 强制类型转换，具体表现在以下两点。</p>
<ol>
<li>字符串、数字、布尔值和 null 的 JSON.stringify 规则与 ToString 基本相同。</li>
<li>如果传递给 JSON.stringify 的对象中定义了 toJSON 方法，那么该方法会在字符串化前调用，以便将对象转换为安全的 JSON 值。</li>
</ol>
<h2 id="显式强制类型转换"> 显式强制类型转换</h2>
<div><p>Info</p>
<p>对显式强制类型转换几乎不存在非议，它类似于静态语言中的类型转换，已被广泛接受， 不会有什么坑。</p>
</div>
<p>我们的目的是让代码更清晰、更易懂，而非适得其反。</p>
<p><strong>在使用显式强制类型转换时，建议使用<code>String()</code>、<code>Number（）</code>、<code>Boolean()</code>，这种形式最为明显，易于理解。</strong></p>
<h3 id="string-与-number-的显式转换"> String 与 Number 的显式转换</h3>
<div><pre><code><span>String</span><span>(</span><span>42</span><span>)</span> <span>// '42'</span>
<span>(</span><span>42</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span> <span>// '42'</span>

<span>Number</span><span>(</span><span>'3.14'</span><span>)</span> <span>// 3.14</span>
<span>+</span><span>'3.14'</span> <span>// 3.14</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><p>Info</p>
<p>书中介绍了<code>～</code>、<code>～～</code>、<code>|</code>等运算符，但是晦涩难懂，这里暂不记录。</p>
</div>
<h4 id="parseint-解析数字字符串"> <code>parseInt</code> 解析数字字符串</h4>
<div><p>Info</p>
<p>书中介绍了parseInt的一些功能，需要深入理解其中的工作原理才能用好，否则会有很多“坑”。</p>
<p>这里暂不记录。</p>
</div>
<h3 id="显式转换为布尔值"> 显式转换为布尔值</h3>
<p>建议使用 <code>Boolean(a)</code> 和<code>!!a</code> 来进行显式强制类型转换。</p>
<div><pre><code><span>Boolean</span><span>(</span> <span>'0'</span> <span>)</span><span>;</span> <span>// true</span>
<span>Boolean</span><span>(</span> <span>[</span><span>]</span> <span>)</span><span>;</span> <span>// true</span>
<span>Boolean</span><span>(</span> <span>{</span><span>}</span> <span>)</span><span>;</span> <span>// true</span>

<span>Boolean</span><span>(</span> <span>''</span> <span>)</span><span>;</span> <span>// false</span>
<span>Boolean</span><span>(</span> <span>0</span> <span>)</span><span>;</span> <span>// false</span>
<span>Boolean</span><span>(</span> <span>null</span> <span>)</span><span>;</span> <span>// false</span>
<span>Boolean</span><span>(</span> <span>undefined</span> <span>)</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>双重取反：</p>
<div><pre><code><span>!</span><span>!</span><span>'0'</span><span>;</span> <span>// true</span>
<span>!</span><span>!</span><span>''</span><span>;</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="隐式强制类型转换"> 隐式强制类型转换</h2>
<p>对强制类型转换的诟病大多是针对隐式强制类型转换。</p>
<p>隐式强制类型转换的作用是减少冗余，让代码更简洁。但也会带来一些负面影响，有时甚至是弊大于利。</p>
<p>个人推荐还是使用显示类型转换，隐式类型转换不详细介绍。</p>
<p>以下简单记录隐式强制类型转换的例子：</p>
<div><pre><code><span>42</span> <span>+</span> <span>''</span><span>;</span> <span>// '42'</span>
<span>'42'</span> <span>-</span> <span>0</span><span>;</span> <span>// 42</span>

<span>var</span> a <span>=</span> <span>42</span><span>;</span>
<span>var</span> b <span>=</span> <span>null</span><span>;</span>
<span>var</span> c <span>=</span> <span>"foo"</span><span>;</span>
<span>if</span> <span>(</span>a <span>&amp;&amp;</span> <span>(</span>b <span>||</span> c<span>)</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"yep"</span> <span>)</span><span>;</span>
<span>}</span>

<span>String</span><span>(</span> <span>Symbol</span><span>(</span> <span>"cool"</span> <span>)</span> <span>)</span><span>;</span>     <span>// "Symbol(cool)"</span>
<span>Symbol</span><span>(</span> <span>"not cool"</span> <span>)</span> <span>+</span> <span>""</span><span>;</span>      <span>// TypeError</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="宽松相等-和严格相等"> 宽松相等（==）和严格相等（===）</h2>
<div><p>Tips</p>
<p>书中详细介绍了ES5 规范中<code>==</code>具体判断过程的细节，这里暂不记录。</p>
<p>建议全部使用<code>===</code></p>
</div>
<p>常见的误区是：== 检查值是否相等，=== 检查值和类型是否相等。</p>
<p>听起来蛮有道理，然而还不够准确。</p>
<p>== 和 === 都会检查操作数的类型。区别在于操作数类型不同时它们的处理方式不同。</p>
<p>正确的解释是：<strong>== 允许在相等比较中进行强制类型转换，而 === 不允许。</strong></p>
<h2 id="小结"> 小结</h2>
<ul>
<li>
<p>JavaScript 的数据类型之间的转换包括 <strong>显式强制类型转换</strong> 和 <strong>隐式强制类型转换</strong>。</p>
</li>
<li>
<p>强制类型转换常常为人诟病，但实际上很多时候它们是非常有用的。</p>
</li>
<li>
<p>显式强制类型转换明确告诉我们哪里发生了类型转换，有助于提高代码可读性和可维护性。</p>
</li>
<li>
<p>隐式强制类型转换则没有那么明显，是其他操作的副作用。</p>
</li>
<li>
<p>在处理强制类型转换的时候要十分小心，尤其是隐式强制类型转换。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">语法</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-5%20%E8%AF%AD%E6%B3%95/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/1-5%20%E8%AF%AD%E6%B3%95/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="语法"> 语法</h1>
<div><p>Info</p>
<p>语法(grammar)是本部分讨论的最后一个重点。</p>
</div>
<h2 id="语句与表达式"> 语句与表达式</h2>
<p>开发人员常常将<code>“语句”(statement)</code>和<code>“表达式”(expression)</code>混为一谈，其实它们在 JavaScript 中存在一些重要差别。</p>
<blockquote>
<p>英语的语法：</p>
<p>句子”(sentence)是完整表达某个意思的一组词，由一个或多个“短语”(phrase)组成， 由标点符号或连接词(and 和 or 等)连接。</p>
<p>短语可以由更小的短语组成。有些短语是不完整的，不能独立表达意思；有些短语则相对完整，并且能够独立表达某个意思。</p>
</blockquote>
<p><strong>JavaScript 的语法也是如此，语句相当于句子，表达式相当于短语，运算符则相当于标点符号和连接词。</strong></p>
<p>JavaScript 中表达式可以返回一个结果值。例如:</p>
<div><pre><code><span>var</span> a <span>=</span> <span>3</span> <span>*</span> <span>6</span><span>;</span>
<span>var</span> b <span>=</span> a<span>;</span>
b<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>3 * 6</code> 是一个表达式(结果为18)。</p>
<p>第二行的 <code>a</code>，第三行的 <code>b</code> 都是表达式，且结果值都是 18。</p>
<p><code>var a = 3 * 6</code> 和 <code>var b = a</code> 称为“声明语句” (declaration statement)，因为它们声明了变量(还可以为其赋值)。</p>
<p><code>a = 3 * 6</code> 和 <code>b = a</code> 叫作“赋值表达式”。</p>
<p>第三行代码中只有一个表达式 <code>b</code>，同时它也是一个语句(虽然没有太大意义)。这样的情况通常叫作“表达式语句”(expression statement)。</p>
<h3 id="语句的结果值"> 语句的结果值</h3>
<p><strong>语句都有一个结果值(statement completion value，undefined 也算)。</strong></p>
<p>获得结果值最直接的方法是<strong>在浏览器开发控制台中输入语句</strong>，默认情况下控制台会显示所执行的最后一条语句的结果值。</p>
<div><pre><code><span>var</span> foo <span>=</span> <span>20</span><span>;</span> <span>// 语句结果值为undefined</span>
foo <span>=</span> <span>10</span> <span>+</span> <span>10</span><span>;</span> <span>// 加法表达式结果值和整个语句结果值都为20</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>代码块 { .. } 的结果值是其最后一个语句 / 表达式的结果，比如：</p>
<div><pre><code><span>var</span> b<span>;</span>
<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
  b <span>=</span> <span>1</span> <span>+</span> <span>1</span><span>;</span>
<span>}</span> <span>// 结果值为2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>一般来说，我们在代码中是没有办法获得语句的结果值的，但还是有两个方法可以获得：</p>
<ul>
<li>
<p>eval函数（不建议使用）</p>
<div><pre><code><span>var</span> b<span>;</span>
<span>var</span> a <span>=</span> <span>eval</span><span>(</span> <span>"if (true) { b = 1; }"</span> <span>)</span><span>;</span>
a<span>;</span> <span>// 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>ES7的“do表达式”</p>
<div><pre><code><span>var</span> a<span>,</span> b<span>;</span>
a <span>=</span> <span>do</span> <span>{</span>
  <span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
    b <span>=</span> <span>4</span> <span>+</span> <span>38</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
a<span>;</span> <span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>其目的是将语句当作表达式来处理(语句中可以包含其他语句)，从而不需要将语句封装为函数再调用 return 来返回值。</p>
<p>虽然目前语句的结果值还无关紧要，但随着 JavaScript 语言的演进，它可能会扮演越来越重要的角色。</p>
</li>
</ul>
<h3 id="表达式的副作用"> 表达式的副作用</h3>
<p>首先说明什么是表达式的副作用，参考以下代码：</p>
<div><pre><code><span>var</span> a <span>=</span> <span>2</span><span>;</span>
<span>var</span> b <span>=</span> a <span>+</span> <span>3</span><span>;</span> <span>// 加法表达式 a + 3 本身没有副作用(比如改变a的值)</span>

<span>// 最常见的有副作用(也可能没有)的表达式是函数调用</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  a <span>=</span> a <span>+</span> <span>1</span><span>;</span>
<span>}</span>
<span>var</span> a <span>=</span> <span>1</span><span>;</span>
<span>foo</span><span>(</span><span>)</span><span>;</span> <span>// 结果值：undefined，副作用：a的值被改变。</span>

<span>// 递增运算符 ++ 和递减运算符 -- 会有副作用</span>
<span>var</span> a <span>=</span> <span>42</span><span>;</span>
a<span>++</span><span>;</span> <span>// 42</span>
<span>++</span>a<span>;</span> <span>// 44</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>多个赋值语句串联时(链式赋值，chained assignment)，赋值表达式和语句的结果值就能派上用场，比如：</p>
<div><pre><code><span>var</span> a<span>,</span> b<span>,</span> c<span>;</span>
a <span>=</span> b <span>=</span> c <span>=</span> <span>42</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li><code>c = 42</code> 的结果值为42，副作用是将c赋值42</li>
<li><code>b = c</code> 的结果值为42，副作用是将 b 赋值 42</li>
<li><code>a = b</code> 的结果值为42，副作用是将 a 赋值 42。</li>
</ul>
<p>利用赋值表达式的副作用合并if条件：</p>
<div><pre><code><span>var</span> str<span>,</span> matches<span>;</span>

<span>// 一般写法</span>
<span>if</span> <span>(</span>str<span>)</span> <span>{</span>
  matches <span>=</span> str<span>.</span><span>match</span><span>(</span> <span><span>/</span><span>[aeiou]</span><span>/</span><span>g</span></span> <span>)</span><span>;</span>
  <span>if</span> <span>(</span>matches<span>)</span> <span>{</span>
    <span>return</span> matches<span>;</span>
  <span>}</span>
<span>}</span>

<span>// 合并，将 matches = str.match 放到括号中是必要的，参考运算符优先级</span>
<span>if</span> <span>(</span>str <span>&amp;&amp;</span> <span>(</span>matches <span>=</span> str<span>.</span><span>match</span><span>(</span> <span><span>/</span><span>[aeiou]</span><span>/</span><span>g</span></span> <span>)</span><span>)</span><span>)</span> <span>{</span>
  <span>return</span> matches<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="上下文规则"> 上下文规则</h3>
<p>在 JavaScript 语法规则中，有时候同样的语法在不同的情况下会有不同的解释。</p>
<p>这里以 <code>{...}</code> 为例，总结它可能出现的情况（即解释当出现 <code>{}</code> 时，JavaScript的语法怎么解读）。</p>
<ul>
<li>
<p>对象字面量：<code>var obj = {...}</code></p>
</li>
<li>
<p>代码块：<code>{ let a = 0 }</code></p>
</li>
<li>
<p>对象解构:  <code>var { a, b } = { a: 1, b: 2}</code></p>
</li>
<li>
<p><code>if - else</code> 语句： <code>if (true) { ... }</code></p>
</li>
</ul>
<h2 id="运算符优先级"> 运算符优先级</h2>
<h2 id="自动分号"> 自动分号</h2>
<h2 id="错误"> 错误</h2>
<h2 id="函数参数"> 函数参数</h2>
<h2 id="try-catch"> <code>try / catch</code></h2>
<h2 id="switch"> <code>switch</code></h2>
<h2 id="小结"> 小结</h2>
<ul>
<li>
<p>语句就像英语中的句子，表达式就像短语。表达式可以是简单独立的，否则可能会产生副作用。</p>
</li>
<li>
<p>JavaScript语法规则之上是语义规则(也称作上下文)。</p>
<p>例如，<code>{ }</code>在不同情况下，可以是语句块、对象常量、解构赋值或者命名函数参数解构。</p>
</li>
<li>
<p>JavaScript 详细定义了运算符的优先级(运算符执行的先后顺序)和关联(多个运算符的 组合方式)。</p>
<p>只要熟练掌握了这些规则，就能对如何合理地运用它们作出自己的判断。</p>
</li>
<li>
<p>ASI(自动分号插入)是 JavaScript 引擎的代码解析纠错机制，它会在需要的地方自动插入分号来纠正解析错误。</p>
</li>
<li>
<p>JavaScript 中有很多错误类型，分为两大类：</p>
<ul>
<li>早期错误(编译时错误，无法被捕获)</li>
<li>运行时错误(可以通过 try..catch 来捕获)。</li>
</ul>
<p>所有语法错误都是早期错误，程序有语法错误则无法运行。</p>
</li>
<li>
<p>尽量不要使用 arguments</p>
</li>
<li>
<p>finally 中代码的处理顺序需要特别注意。</p>
</li>
<li>
<p>switch相对于if..else if..来说更为简洁。需要注意的一点是，如果对其理解得不够透彻，稍不注意就很容易出错。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">回调</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-2%20%E5%9B%9E%E8%B0%83/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-2%20%E5%9B%9E%E8%B0%83/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="回调"> 回调</h1>
<p>回调函数是 JavaScript 异步的基本单元。但是随着 JavaScript 越来越成熟，对于异步编程领域的发展，回调已经不够用了。</p>
<ul>
<li>
<p>回调是非线性的</p>
<p>大脑对于事情的计划方式是线性的、阻塞的、单线程的语义，但是回调表达异步流程的方式是非线性的、非顺序的，这使得正确推导这样的代码难度很大。</p>
</li>
<li>
<p>回调因为控制反转会造成信任问题</p>
<p>回调会受到控制反转的影响，因为回调暗中把控制权交给第三方(通常是不受你控制的第三方工具)来调用你代码中的回调部分代码。这种控制转移导致一系列麻烦的信任问题，比如回调被调用的次数是否会超出预期。</p>
</li>
</ul>
<p>我们需要比回调更好的机制。到目前为止，回调提供了很好的服务，但是未来的 JavaScript 需要更高级、功能更强大的异步模式。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">异步流控制</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-4%20%E5%BC%82%E6%AD%A5%E6%B5%81%E6%8E%A7%E5%88%B6/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-4%20%E5%BC%82%E6%AD%A5%E6%B5%81%E6%8E%A7%E5%88%B6/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="异步流控制"> 异步流控制</h1>
<h2 id="promise"> promise</h2>
<h2 id="生成器-promise"> 生成器 + promise</h2>
<h2 id="小结"> 小结</h2>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">类设计模式与JavaScript对象机制</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-4%20%E2%80%9C%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8EJavaScript/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-4%20%E2%80%9C%E7%B1%BB%E2%80%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8EJavaScript/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="类设计模式与javascript对象机制"> 类设计模式与JavaScript对象机制</h1>
<h2 id="类设计模式与javascript对象机制-2"> 类设计模式与JavaScript对象机制</h2>
<h3 id="类理论"> 类理论</h3>
<p>类描述了一种<strong>代码的组织结构形式</strong>，即一种在软件中对真实世界中问题领域的建模方法。</p>
<p><strong>面向对象编程强调的是数据和操作数据的行为本质上是互相关联的。</strong></p>
<p>因此好的设计就是把数据以及和它相关的行为封装起来。 这在正式的计算机科学中有时被称为数据结构。</p>
<h3 id="类设计模式"> 类设计模式</h3>
<p>可以认为<strong>类是以面向对象编程为基础的一种设计模式</strong>。</p>
<p>对于一些 <em><strong>过程化编程</strong></em> 的代码，可以使用类将其转换成结构清晰、组织良好的代码。</p>
<p>对于 <em><strong>函数式编程</strong></em> ，类也是非常常用的一种设计模式。</p>
<p><em>有些语言(比如 Java)并不会给你选择的机会，类并不是可选的，万物皆是类。</em></p>
<p><em>其他语言(比如 C/C++ 或者 PHP)会提供过程化和面向类这两种语法，开发者可以选择其中一种风格或者混用两种风格。</em></p>
<h3 id="javascript中的-类"> JavaScript中的“类”</h3>
<p><strong>JavaScript中没有类，但是可以近似实现类的功能。</strong></p>
<p>JavaScript中只有类似类的一些语法功能，比如 new、instanceof，以及 ES6 新增的 class 关键字。</p>
<p><strong>但这些只是为了满足对于类设计模式的最普遍需求而提供的一些近似类的语法。</strong></p>
<p><strong>在近似类的表象之下，JavaScript 的机制其实和类完全不同。</strong></p>
<p>总的来说，在软件设计中，<strong>类是一种可选的模式</strong>，你需要自己决定是否在 JavaScript 中使用它。</p>
<h3 id="类"> 类</h3>
<p>面向类的设计模式:实例化(instantiation)、继承(inheritance)和 (相对)多态(polymorphism)。</p>
<ul>
<li>
<p>构造函数</p>
<p>类仅仅是一个抽象的表示，必须先实例化类然后才能对它进行操作。</p>
<p>实例是由一个特殊的类方法构造的，这个方法名通常和类名相同，被称为<strong>构造函数</strong>。</p>
<p>类构造函数属于类，它的任务就是初始化实例需要的所有信息(状态)。</p>
</li>
<li>
<p>继承(inheritance)</p>
<div><pre><code><span>class</span> <span>A</span> <span>(</span><span>)</span> <span>{</span><span>}</span>
<span>class</span> <span>B</span> <span>extends</span> <span>A</span><span>(</span><span>)</span> <span>{</span><span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>多态(polymorphism)</p>
<p>父类的通用行为可以被子类用更特殊的行为重写。</p>
<p>实际上，相对多态性允许我们从重写行为中引用基础行为。</p>
</li>
</ul>
<h3 id="混入-mixin"> 混入（mixin）</h3>
<p><em><strong>以下介绍的内容，是为了在JavaScript中模仿类而创造的蹩脚做法，了解即可，不建议使用！</strong></em></p>
<p>在继承或者实例化时，JavaScript 的对象机制并不会自动执行复制行为。</p>
<p>简单来说，<strong>JavaScript 中只有对象，并不存在可以被实例化的“类” 。</strong>。</p>
<p>一个对象并不会被复制到其他对象，它们会被关联起来（引用）。</p>
<p>由于在其他语言中类表现出来的都是复制行为，因此 JavaScript 开发者也想出了一个方法来<strong>模拟类的复制行为</strong>，这个方法就是混入。</p>
<div><pre><code><span>// 从source“复制到target”，相当于target “继承” source</span>
<span>function</span> <span>mixin</span><span>(</span> <span>sourceObj<span>,</span> targetObj</span> <span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>var</span> key <span>in</span> sourceObj<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span><span>(</span>key <span>in</span> targetObj<span>)</span><span>)</span> <span>{</span>
      <span>// 注意这里，对于对象类型数据来说，只是赋值（引用），没有真正复制</span>
      targetObj<span>[</span>key<span>]</span> <span>=</span> sourceObj<span>[</span>key<span>]</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> targetObj<span>;</span>
<span>}</span>

<span>var</span> Vehicle <span>=</span> <span>{</span>
  engines<span>:</span> <span>1</span><span>,</span>
  <span>ignition</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span> <span>"Turning on my engine."</span> <span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>drive</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>ignition</span><span>(</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span> <span>"Steering and moving forward!"</span> <span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

<span>var</span> Car <span>=</span> <span>mixin</span><span>(</span> Vehicle<span>,</span> <span>{</span>
  wheels<span>:</span> <span>4</span><span>,</span>
  <span>drive</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    Vehicle<span>.</span><span>drive</span><span>.</span><span>call</span><span>(</span> <span>this</span> <span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span><span>"Rolling on all "</span> <span>+</span> <span>this</span><span>.</span>wheels <span>+</span> <span>" wheels!"</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p><strong>JavaScript 中的函数无法(用标准、可靠的方法)真正地复制，所以你只能复制对共享函数对象的引用。</strong></p>
<p>如果你修改了共享的函数对象（比如 ignition），比如添加了一个属性，那 Vehicle 和 Car 都会受到影响。</p>
<h2 id="小结"> 小结</h2>
<ul>
<li>
<p><strong>类是一种设计模式</strong>。许多语言提供了对于面向类软件设计的原生语法。</p>
</li>
<li>
<p>JavaScript 也有类似的语法，但是和其他语言中的类完全不同。</p>
<p>JavaScript 并不会(像类那样)自动创建对象的副本。</p>
</li>
<li>
<p>传统的类被实例化时，它的行为会被复制到实例中。</p>
<p>类被继承时，行为也会被复制到子类中。</p>
</li>
<li>
<p>多态(在继承链的不同层次名称相同但是功能不同的函数)看起来似乎是从子类引用父类，但是本质上引用的其实是复制的结果。</p>
</li>
<li>
<p>混入模式可以用来模拟类的复制行为，但是通常会产生丑陋并且脆弱的语法，让代码更加难懂并且难以维护。</p>
</li>
<li>
<p>显式混入实际上无法完全模拟类的复制行为，因为对象和函数只能复制引用，无法复制被引用的对象或者函数本身。</p>
<p>忽视这一点会导致许多问题。</p>
</li>
<li>
<p>总地来说，<strong>在 JavaScript 中模拟类是得不偿失的</strong>，虽然能解决当前的问题，但是可能会埋下更多的隐患。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">原型</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-5%20%E5%8E%9F%E5%9E%8B/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/2-5%20%E5%8E%9F%E5%9E%8B/"/>
    <updated>2021-04-21T13:30:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="原型"> 原型</h1>
<p><em>第 4 章中介绍的所有模拟类复制行为的方法，如各种混入，都没有使用 [[Prototype]] 链机制。</em></p>
<h2 id="prototype"> [[Prototype]]</h2>
<p>[[Prototype]] 是JavaScript 对象的一个特殊<strong>内置属性</strong>。</p>
<div><pre><code><span>var</span> myObject <span>=</span> <span>{</span>a<span>:</span> <span>2</span><span>}</span><span>;</span>
<span>var</span> anotherObject <span>=</span> Object<span>.</span><span>create</span><span>(</span>myObject<span>)</span><span>;</span>

anotherObject<span>.</span>a <span>// 2</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>anotherObject<span>)</span> <span>===</span> myObject <span>// true</span>

<span>let</span> obj <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>null</span><span>)</span><span>;</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>obj<span>)</span><span>;</span> <span>// null</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="查找属性与原型链"> 查找属性与原型链</h3>
<p>引用对象的属性时会触发 [[Get]] 操作，比如<code>obj.a</code>。忽略<code>proxy</code>的情况下，[[Get]]操作的具体步骤为：</p>
<ol>
<li>检查对象本身收否有该属性</li>
<li>如果本身没有，则沿原型链向上查找</li>
<li>如果整条原型链上也没有，返回undefined</li>
</ol>
<p><code>for-in</code>循环和<code>in</code>操作也会查找原型链，它们的区别在于<code>for-in</code>访问的是可枚举的属性（enumerable: true），而<code>in</code>操作不需要。</p>
<div><pre><code><span>var</span> proto <span>=</span> <span>{</span><span>}</span><span>;</span>

Object<span>.</span><span>defineProperty</span><span>(</span>proto<span>,</span> <span>'a'</span><span>,</span> <span>{</span>
  value<span>:</span> <span>2</span><span>,</span>
  enumerable<span>:</span> <span>false</span>
<span>}</span><span>)</span>

<span>var</span> obj <span>=</span> Object<span>.</span><span>create</span><span>(</span>proto<span>)</span><span>;</span>

<span>for</span><span>(</span><span>var</span> key <span>in</span> obj<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>key<span>)</span><span>;</span> <span>// 无法枚举到a</span>
<span>}</span>

<span>'a'</span> <span>in</span> obj<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="属性设置和屏蔽"> 属性设置和屏蔽</h3>
<p>当属性不直接存在于对象，而是存在于原型链上时，情况有点复杂。</p>
<ol>
<li>
<p>如果在[[Prototype]]链上层存在名为foo的普通数据访问属性并且<strong>没有被标记为只读(writable:false)</strong>，那就会直接在 myObject 中添加一个名为 foo 的新属性，它是屏蔽属性。</p>
</li>
<li>
<p>如果在[[Prototype]]链上层存在foo，但是它被标记为只读(writable:false)，那么无法修改已有属性或者在 obj 上创建屏蔽属性。</p>
<p>如果运行在严格模式下，代码会抛出一个错误。</p>
<p>否则，这条赋值语句会被忽略。总之，不会发生屏蔽。</p>
</li>
<li>
<p>如果在[[Prototype]]链上层存在foo并且它是一个setter，那就<strong>一定会调用这个 setter</strong>。</p>
<p>foo 不会被添加到obj，也不会重新定义 foo 这个 setter。</p>
</li>
</ol>
<div><pre><code><span>var</span> proto <span>=</span> <span>{</span> foo<span>:</span> <span>2</span> <span>}</span>
<span>var</span> obj <span>=</span> Object<span>.</span><span>create</span><span>(</span>proto<span>)</span><span>;</span>

obj<span>.</span>foo <span>=</span> <span>3</span><span>;</span> <span>// 情况1 foo被添加</span>

Object<span>.</span><span>defineProperty</span><span>(</span>proto<span>,</span> <span>'foo'</span><span>,</span> <span>{</span>
  writable<span>:</span> <span>false</span>
<span>}</span><span>)</span>

obj<span>.</span>foo <span>=</span> <span>3</span><span>;</span> <span>// 情况2 无法修改或报错</span>

Object<span>.</span><span>defineProperty</span><span>(</span>proto<span>,</span> <span>'bar'</span><span>,</span> <span>{</span>
  <span>set</span><span>:</span> <span>function</span><span>(</span><span>val</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>_bar <span>=</span> val<span>;</span>
  <span>}</span>
<span>}</span><span>)</span>

obj<span>.</span>bar <span>=</span> <span>3</span><span>;</span> <span>// 情况3 无法修改</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="类"> “类”</h2>
<p>请记住：<em><strong>JavaScript中没有类，只有对象。</strong></em></p>
<p>实际上，JavaScript 才是真正应该被称为“面向对象”的语言，因为它是少有的可以不通过类，直接创建对象的语言。</p>
<p>在面向类的语言中，类可以被复制(或者说实例化)多次，就像用模具制作东西一样。</p>
<p>JavaScript 中，并没有类似类的复制机制。</p>
<p>你不能创建一个类的多个实例，只能创建多个对象，它们 [[Prototype]] 关联的是同一个对象。但是在默认情况下并不会进行复制。</p>
<h3 id="用原型模仿类"> 用原型模仿类</h3>
<p><em>JavaScript 中有一种奇怪的行为一直在被无耻地滥用，那就是模仿类。</em></p>
<p>要模仿类，通常利用了函数的一种特殊特性:</p>
<p><strong>所有的函数默认都会拥有一个 名为 prototype 的公有并且不可枚举的属性，它会指向另一个对象。</strong></p>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Foo</span><span>.</span>prototype<span>;</span> <span>// {}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>这里要特别注意，<strong><code>一个对象的原型</code> 和 <code>一个对象的prototype属性</code> 的区别。</strong></p>
<p>Foo函数的prototype属性不是Foo函数这个对象本身的原型，而是Foo函数构造产生的对象的原型。</p>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>var</span> obj <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span><span>;</span>

Object<span>.</span><span>getPrototypeOf</span><span>(</span>obj<span>)</span> <span>===</span> <span>Foo</span><span>.</span>prototype <span>// true</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>Foo<span>)</span> <span>===</span> <span>Function</span><span>.</span>prototype <span>// true</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>Function<span>)</span> <span>===</span> <span>Function</span><span>.</span>prototype <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>第二章中提到过，用new操作符调用一个函数时的具体操作：</p>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>bar</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>bar <span>=</span> bar<span>;</span>
<span>}</span>

<span>var</span> obj <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>'bar'</span><span>)</span><span>;</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span>obj<span>)</span> <span>===</span> <span>Foo</span><span>.</span>prototype <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ol>
<li>创建一个全新的对象。</li>
<li>这个新对象会被执行[[原型]]连接。</li>
<li>这个新对象会绑定到函数调用的this。</li>
<li>如果函数没有返回其他对象，则返回第一步中创建的对象。</li>
</ol>
<h3 id="那些为模仿类而生的名字"> 那些为模仿类而生的名字</h3>
<ul>
<li>
<p>继承</p>
<p>在 JavaScript 中，我们并不会将一个对象(“类”)复制到另一个对象(“实例”)，只是将它们关联起来。</p>
<p>这个机制通常被称为<em>原型继承</em>。</p>
<p>“继承”这两个字让人想起面向类编程，容易引起误解。</p>
</li>
<li>
<p>构造函数</p>
<p>Foo.prototype 默认有一个公有并且<strong>不可枚举</strong>的属性 <code>constructor</code>，这个属性引用的是对象关联的函数。</p>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Foo</span><span>.</span>prototype<span>.</span>constructor <span>===</span> Foo<span>;</span> <span>// true</span>

<span>var</span> a <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span><span>;</span>
a<span>.</span><span>hasOwnProperty</span><span>(</span><span>'constructor'</span><span>)</span><span>;</span> <span>// false</span>
a<span>.</span>constructor <span>===</span> Foo<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>Foo函数不会因为它是大写开头就变得特殊，它与其他函数没有任何区别。</p>
<p>事实上，按模仿类的话来说，所有用new调用的函数都可以称之为“构造函数”。</p>
<p>可以认为constructor属性是为了在模仿类的做法下，创建对象后方便找到它的构造函数而添加的一个引用，而这个constructor是<strong>非常不可靠的</strong>。</p>
</li>
<li>
<p>是否是实例 ( <code>instanceof</code> )</p>
</li>
</ul>
<h2 id="原型继承"> 原型继承</h2>
<Mermaid id="mermaid_64a56ef6" :graph="$dataBlock.mermaid_64a56ef6"></Mermaid><div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name<span>;</span>
<span>}</span>
<span>Foo</span><span>.</span>prototype<span>.</span><span>myName</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span>name<span>;</span>
<span>}</span><span>;</span>

<span>function</span> <span>Bar</span><span>(</span><span>name<span>,</span>label</span><span>)</span> <span>{</span>
  <span>Foo</span><span>.</span><span>call</span><span>(</span> <span>this</span><span>,</span> name <span>)</span><span>;</span> <span>// 相当于super()</span>
  <span>this</span><span>.</span>label <span>=</span> label<span>;</span>
<span>}</span>
<span>Bar</span><span>.</span>prototype<span>.</span><span>myLabel</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span>label<span>;</span>
<span>}</span><span>;</span>

<span>Bar</span><span>.</span>prototype <span>// {}</span>
<span>'constructor'</span> <span>in</span> <span>Bar</span><span>.</span>prototype<span>;</span> <span>// true</span>

<span>/* 我们创建了一个新的 Bar.prototype 对象并关联到Foo.prototype
	 注意!现在没有 Bar.prototype.constructor 了，
	 如果你需要这个属性的话可能需要手动修复一下它
	 比如 Bar.prototype.constructor = Bar */</span>
<span>Bar</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span> <span>Foo</span><span>.</span>prototype <span>)</span><span>;</span> <span>// “继承”</span>
<span>// ES6可用setPrototypeOf</span>
<span>// Object.setPrototypeOf( Bar.prototype, Foo.prototype );</span>

<span>var</span> a <span>=</span> <span>new</span> <span>Bar</span><span>(</span> <span>"a"</span><span>,</span> <span>"obj a"</span> <span>)</span><span>;</span>
a<span>.</span><span>myName</span><span>(</span><span>)</span><span>;</span> <span>// "a"</span>
a<span>.</span><span>myLabel</span><span>(</span><span>)</span><span>;</span> <span>// "obj a"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>这段代码的核心部分就是语句 <code>Bar.prototype = Object.create(Foo.prototype)</code>。</p>
<p>原型继承的错误做法：</p>
<ul>
<li>
<p>Bar.prototype = Foo.prototype; // 和你想要的机制不一样!</p>
<p>这样引用，对Bar.prototype的任何修改都会影响到Foo.prototype。</p>
</li>
<li>
<p>Bar.prototype = new Foo(); // 基本上满足你的需求，但是可能会产生一些副作用</p>
<p>如果函数 Foo 有一些副作用(比如写日志、修改状态、注册到其他对象、给 this 添加数据属性等等)的话，就会影响到 Bar() 的“后代”，后果不堪设想。</p>
</li>
</ul>
<p>原型继承的正确做法：</p>
<ul>
<li>
<p><code>Bar.ptototype = Object.create( Foo.prototype );</code>  // ES6 之前需要抛弃默认的 Bar.prototype</p>
</li>
<li>
<p><code>Object.setPrototypeOf( Bar.prototype, Foo.prototype );</code>// ES6 开始可以直接修改现有的 Bar.prototype</p>
</li>
</ul>
<h3 id="检查-实例-所属的-类"> 检查“实例”所属的&quot;类&quot;</h3>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>var</span> foo <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span><span>;</span>

foo <span>instanceof</span> <span>Foo</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>instanceof 操作符的左操作数是一个普通的对象，<strong>右操作数是一个函数</strong>。</p>
<p>instanceof 回答的问题是: <strong>在 foo 的整条 [[Prototype]] 链中是否有指向 Foo.prototype 的对象?</strong></p>
<p><em>同样地，可以认为 <code>instanceof</code> 是为了模仿类而加入的，目的类似 <code>new</code> 操作符</em>。</p>
<p>然而，<code>instanceof</code> 只能判断对象与函数之间的关系，不能判断两个普通对象间的关系。</p>
<p>为了判断两个普通对象的关系：</p>
<ul>
<li>
<p>荒谬的办法</p>
<p>下面这段荒谬的代码试图站在“类”的角度使用 instanceof 来判断两个对象的关系</p>
<div><pre><code><span>function</span> <span>isRelatedTo</span><span>(</span><span>o1<span>,</span> o2</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span><span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o2<span>;</span>
  <span>return</span> o1 <span>instanceof</span> <span>F</span><span>;</span>
<span>}</span>
<span>var</span> a <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>var</span> b <span>=</span> Object<span>.</span><span>create</span><span>(</span> a <span>)</span><span>;</span>
<span>isRelatedTo</span><span>(</span> b<span>,</span> a <span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>标准做法</p>
<div><pre><code><span>Foo</span><span>.</span>prototype<span>.</span><span>isPrototypeOf</span><span>(</span> foo <span>)</span><span>;</span> <span>// true</span>
Object<span>.</span><span>getPrototypeOf</span><span>(</span> foo <span>)</span> <span>===</span> <span>Foo</span><span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>非标准做法</p>
<p>大部分浏览器提供以下非标准的做法：</p>
<div><pre><code><span>// __proto__ 可直接访问一个对象的原型</span>
foo<span>.</span>__proto__ <span>===</span> <span>Foo</span><span>.</span>prototype<span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p><code>__proto__</code> 看起来很像一个属性，但是实际上它更像一个 getter/setter。</p>
<div><pre><code>Object<span>.</span><span>defineProperty</span><span>(</span> <span>Object</span><span>.</span>prototype<span>,</span> <span>"__proto__"</span><span>,</span> <span>{</span>
  <span>get</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> Object<span>.</span><span>getPrototypeOf</span><span>(</span> <span>this</span> <span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>set</span><span>:</span> <span>function</span><span>(</span><span>o</span><span>)</span> <span>{</span>
    Object<span>.</span><span>setPrototypeOf</span><span>(</span> <span>this</span><span>,</span> o <span>)</span><span>;</span>
    <span>return</span> o<span>;</span>
  <span>}</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
</ul>
<h2 id="object-create"> Object.create</h2>
<p><code>Object.create(null)</code> 会创建一个拥有空[[Prototype]] 链接的对象，这个对象无法进行委托。
这些特殊的空 [[Prototype]] 对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。</p>
<div><pre><code><span>var</span> foo <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>null</span><span>)</span><span>;</span>
<span>var</span> plainObj <span>=</span> <span>{</span><span>}</span>

plainObj<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// [object Object]</span>
foo<span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span> <span>// TypeError: obj.toString is not a function</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>低版本下Object.create的polyfill：</p>
<div><pre><code><span>if</span> <span>(</span><span>!</span>Object<span>.</span>create<span>)</span> <span>{</span>
  Object<span>.</span><span>create</span> <span>=</span> <span>function</span><span>(</span><span>proto</span><span>)</span> <span>{</span>
    <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
    <span>F</span><span>.</span>prototype <span>=</span> proto<span>;</span>
    <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="小结"> 小结</h2>
<ul>
<li>
<p><strong>[[Prototype]] 机制就是指对象中的一个内部链接引用另一个对象。</strong></p>
</li>
<li>
<p>查询对象属性时进行的[[Get]]操作，如果对象本身没有该属性，会沿原型链查找，直至找到或返回undefined。</p>
</li>
<li>
<p>对象原型链的顶端是<code>Object.prototype</code>，toString()、valueOf() 和其他一些通用的功能都存在于 Object.prototype 对象上，因此语言中所有的对象都可以使用它们。</p>
</li>
<li>
<p>JavaScript中有很多模仿类的机制，但是不建议使用。</p>
</li>
<li>
<p>虽然这些 JavaScript 机制和传统面向类语言中的“类初始化”和“类继承”很相似，</p>
<p>但是中有一个核心区别，那就是<strong>JavaScript不会进行复制，对象之间是通过内部的 [[Prototype]] 链关联的</strong>。</p>
</li>
<li>
<p>以“继承”结尾的术语(包括“原型继承”)和其他面向对象的术语都无法帮助你理解 JavaScript 的真实机制，</p>
<p>相比之下，“委托”是一个更合适的术语，因为<strong>对象之间的关系不是复制而是委托</strong>。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">程序性能</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-5%20%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-5%20%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="程序性能"> 程序性能</h1>
<h2 id="web-worker"> Web Worker</h2>
<p><code>web worker</code>是一种<strong>任务并行</strong>，其重点在于把程序划分为多个块来并发运行。</p>
<div><pre><code><span>let</span> w <span>=</span> <span>new</span> <span>Worker</span><span>(</span><span>'http://xx.com/worker.js'</span><span>)</span><span>;</span>
<span>// worker 和创建它的程序之间是一对一的关系，所以不用担心message事件来自其他wokrer</span>
w<span>.</span><span>addEventListener</span><span>(</span><span>'message'</span><span>,</span> <span>event</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>event<span>.</span>data<span>)</span><span>)</span><span>;</span> <span>// worker => 主线程</span>
w<span>.</span><span>postMessage</span><span>(</span><span>'主线程 => worker'</span><span>)</span><span>;</span>
<span>// 终止worker</span>
<span>// 突然终止 Worker 线程不会给它任何机会完成它的工作或者清理任何资源，类似于关闭浏览器标签页</span>
w<span>.</span><span>terminate</span><span>(</span><span>)</span><span>;</span>

<span>// worker.js</span>
<span>addEventListener</span><span>(</span> <span>"message"</span><span>,</span> <span>event</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>event<span>.</span>data<span>)</span><span>)</span><span>;</span> <span>// 主线程 => worker</span>
<span>postMessage</span><span>(</span><span>'worker => 主线程'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><code>web worker</code>是浏览器，即宿主环境的功能，实际上和 JavaScript 语言本身几乎没什 么关系。也就是说，<strong>JavaScript 当前并没有任何支持多线程执行的功能</strong>。</p>
<p>Worker 之间以及它们和主程序之间，<strong>不会共享任何作用域或资源</strong>，那会把所有多线程编程的噩梦带到前端领域，而是通过<strong>一个基本的事件消息机制</strong>相互联系。</p>
<p>如果浏览器中有两个或多个页面(或同一页上的多个 tab )试图从同一个文件 URL 创建 Worker，那么最终得到的实际上是<strong>完全独立的 Worker</strong>。后面我们会简单介绍如何共享 Worker。</p>
<h3 id="worker环境"> worker环境</h3>
<p>在 Worker 内部是无法访问主程序的任何资源的。这意味着你不能访问它的任何全局变量，也不能访问页面的 DOM 或者其他资源。</p>
<p><strong>记住，这是一个完全独立的线程。</strong></p>
<p>但是，你可以执行网络操作(Ajax、WebSockets)以及设定定时器，还可以访问几个重要的全局变量和功能的<strong>本地复本</strong>，包括 navigator、location、JSON 和 applicationCache。</p>
<p>也可以通过 importScripts 向 Worker 加载额外的 JavaScript 脚本：</p>
<div><pre><code><span>// worker.js</span>
<span>// 脚本加载是同步的，importScripts 会阻塞余下 Worker 的执行，直到文件加载和执行完成。</span>
<span>importScripts</span><span>(</span> <span>"foo.js"</span><span>,</span> <span>"bar.js"</span> <span>)</span><span>;</span> 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><p>Info</p>
<p>已经有一些讨论涉及把 canvas API 暴露给 Worker，以及把 canvas 变为 Transferable，这将使 Worker 可以执行更高级的 off-thread 图形处理，这对于高性能游戏(WebGL)和其他类似的应用是很有用的。尽管目前的浏览器中还不存在这种支持。</p>
</div>
<p>Web Worker 通常应用于哪些方面呢?</p>
<ul>
<li>处理密集型数学计算</li>
<li>大数据集排序</li>
<li>数据处理(压缩、音频分析、图像处理等)</li>
<li>高流量网络通信</li>
</ul>
<h3 id="数据传递"> 数据传递</h3>
<p>上面提到，worker线程之间是通过事件消息机制来双向通信的。通信时可能需要传递庞大复杂的数据量，在早期的 Worker 中，唯一的选择就是把所有数据序列化到一个字符串值中。这带来了双向序列化的速度损失和双倍的内存占用（及其引起的垃圾收集方面的波动）。</p>
<p>为此，worker提供了两个方案：</p>
<ul>
<li>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm" target="_blank" rel="noopener noreferrer">结构化克隆算法</a></p>
<p>如果要传递一个对象，使用结构化克隆算法(structured clone algorithm)把这个对象复制到另一边。这个算法非常高级，甚至可以处理要复制的对象有循环引用的情况。这样就不用付出 to-string 和 from-string 的性能损失了，但是还是要使用双倍的内存。</p>
</li>
<li>
<p>transferable对象</p>
<p>对于大数据集而言，就是使用 Transferable 对象。这时发生的是<strong>对象所有权的转移，数据本身并没有移动</strong>。一旦你把对象传递到一个 Worker 中，在原来的位置上，它就<strong>变为空的或者是不可访问的</strong>，这样就消除了多线程编程作用域共享带来的混乱。 当然，所有权传递是可以双向进行的。</p>
<p>任何实现了 <a href="http://developer.mozilla.org/en-US/docs/Web/API/Transferable" target="_blank" rel="noopener noreferrer">Transferable 接口</a> 的数据结构就自动按照这种方式传输(Firefox 和 Chrome 都支持)。</p>
<p>比如Uint8Array 这样的带类型的数组</p>
<div><pre><code><span>// 比如foo是一个Uint8Array</span>
<span>// 第一个参数是一个原始缓冲区，第二个是一个要传输的内容的列表。</span>
<span>postMessage</span><span>(</span> foo<span>.</span>buffer<span>,</span> <span>[</span> foo<span>.</span>buffer <span>]</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<p>不支持 Transferable 对象的浏览器就<strong>降级到结构化克隆</strong>，这会带来性能下降而不是彻底的功能失效。</p>
<h3 id="共享worker"> 共享worker</h3>
<p>如果你的站点或 app 允许加载同一个页面的多个 tab(一个常见的功能)，那你可能非常希望通过防止重复专用 Worker 来降低系统的资源使用。比如常见的有限资源就是 socket 网络连接，因为浏览器限制了到同一个主机的同时连接数目。</p>
<p>在这种情况下，创建一个整个站点或 app 的所有页面实例都可以共享的中心 Worker 就非常有用了。</p>
<p>因为共享 Worker 可以与站点的多个程序实例或多个页面连接，所以这个 Worker 需要通过端口来得知消息来自于哪个程序。可以类比网络 socket 的端口。因此，调用程序必须使用 Worker 的 port 对象用于通信。</p>
<div><pre><code><span>var</span> w1 <span>=</span> <span>new</span> <span>SharedWorker</span><span>(</span> <span>"http://some.url.1/mycoolworker.js"</span> <span>)</span><span>;</span>

w1<span>.</span>port<span>.</span><span>addEventListener</span><span>(</span> <span>"message"</span><span>,</span> handleMessages <span>)</span><span>;</span>
w1<span>.</span>port<span>.</span><span>postMessage</span><span>(</span> <span>"something cool"</span> <span>)</span><span>;</span>
w1<span>.</span>port<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在共享 Worker 内部，必须要处理额外的一个事件：connect。这个事件为这个特定的连接提供了端口对象。</p>
<div><pre><code><span>// 在共享Worker内部</span>
<span>addEventListener</span><span>(</span> <span>"connect"</span><span>,</span> <span>function</span><span>(</span><span>evt</span><span>)</span><span>{</span>
<span>// 这个连接分配的端口</span>
  <span>var</span> port <span>=</span> evt<span>.</span>ports<span>[</span><span>0</span><span>]</span><span>;</span>
  port<span>.</span><span>addEventListener</span><span>(</span> <span>"message"</span><span>,</span> <span>function</span><span>(</span><span>evt</span><span>)</span><span>{</span>
    port<span>.</span><span>postMessage</span><span>(</span><span>'..'</span><span>)</span><span>;</span>
  <span>}</span> <span>)</span><span>;</span>
  <span>// 初始化端口连接</span>
  port<span>.</span><span>start</span><span>(</span><span>)</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="模拟web-worker"> 模拟web worker</h3>
<p><a href="https://gist.github.com/getify/1b26accb1a09aa53ad25" target="_blank" rel="noopener noreferrer">一个模拟web worker的例子</a></p>
<h2 id="simd"> SIMD</h2>
<p>SIMD，单指令多数据，是一种数据并行(data parallelism)方式，与 Web Worker 的任务并行(task parallelism)相对，因为这里的重点实际上不再是把程序逻辑分成并行的块，而是并行处理数据的多个位。</p>
<p>SIMD JavaScript 计划向 JavaScript 代码暴露短向量类型和 API。在支持 SIMD 的那些系统中，这些运算将会直接映射到等价的 CPU 指令，而在非 SIMD 系统中就会退化回非并行化的运算。</p>
<p>对于数据密集型的应用(信号分析、关于图形的矩阵运算，等等)，这样的并行数学处理 带来的性能收益是非常明显的!</p>
<p>早期提案中的 API 形式类似如下：</p>
<div><pre><code><span>var</span> v1 <span>=</span> <span>SIMD</span><span>.</span><span>float32x4</span><span>(</span> <span>3.14159</span><span>,</span> <span>21.0</span><span>,</span> <span>32.3</span><span>,</span> <span>55.55</span> <span>)</span><span>;</span>
<span>var</span> v2 <span>=</span> <span>SIMD</span><span>.</span><span>float32x4</span><span>(</span> <span>2.1</span><span>,</span> <span>3.2</span><span>,</span> <span>4.3</span><span>,</span> <span>5.4</span> <span>)</span><span>;</span>
<span>var</span> v3 <span>=</span> <span>SIMD</span><span>.</span><span>int32x4</span><span>(</span> <span>10</span><span>,</span> <span>101</span><span>,</span> <span>1001</span><span>,</span> <span>10001</span> <span>)</span><span>;</span>
<span>var</span> v4 <span>=</span> <span>SIMD</span><span>.</span><span>int32x4</span><span>(</span> <span>10</span><span>,</span> <span>20</span><span>,</span> <span>30</span><span>,</span> <span>40</span> <span>)</span><span>;</span>
<span>SIMD</span><span>.</span>float32x4<span>.</span><span>mul</span><span>(</span> v1<span>,</span> v2 <span>)</span><span>;</span> <span>// [ 6.597339, 67.2, 138.89, 299.97 ]</span>
<span>SIMD</span><span>.</span>int32x4<span>.</span><span>add</span><span>(</span> v3<span>,</span> v4 <span>)</span><span>;</span> <span>// [ 20, 121, 1031, 10041 ]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><a href="https://www.bookstack.cn/read/es6-3rd/docs-simd.md" target="_blank" rel="noopener noreferrer">一篇SIMD的相关文章</a></p>
<h2 id="asm-js"> asm.js</h2>
<p><a href="https://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html" target="_blank" rel="noopener noreferrer">asm.js</a></p>
<h2 id="小结"> 小结</h2>
<p>本部分的前四章都是基于这样一个前提:异步编码模式使我们能够编写更高效的代码，通常能够带来非常大的改进。但是，异步特性只能让你走这么远，因为它本质上还是绑定在 一个单事件循环线程上。</p>
<p>因此，在这一章里，我们介绍了几种能够进一步提高性能的程序级别的机制。</p>
<p>Web Worker 让你可以在独立的线程运行一个 JavaScript 文件(即程序)，使用异步事件在线程之间传递消息。它们非常适用于把长时间的或资源密集型的任务卸载到不同的线程 中，以提高主 UI 线程的响应性。</p>
<p>SIMD 打算把 CPU 级的并行数学运算映射到 JavaScript API，以获得高性能的数据并行运算，比如在大数据集上的数字处理。</p>
<p>asm.js 描述了 JavaScript 的一个很小的子集，它避免了 JavaScript 难以优化的部分 (比如垃圾收集和强制类型转换)，并且让 JavaScript 引擎识别并通过激进的优化运行这样的代码。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">生成器</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-4%20%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-4%20%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="生成器"> 生成器</h1>
<p>第 2 章，我们确定了用回调表达异步控制流程的两个关键缺陷：</p>
<ul>
<li>
<p>基于回调的异步不符合大脑对任务步骤的规划方式</p>
</li>
<li>
<p>由于控制反转，回调并不是可信任或可组合的。</p>
</li>
</ul>
<p>第 3 章，我们详细介绍了 Promise 如何把回调的控制反转反转回来，恢复了可信任性 / 可组合性。</p>
<p>第 4 章我们介绍一种顺序、看似同步的异步流程控制表达风格——生成器。</p>
<h2 id="生成器的基本特点"> 生成器的基本特点</h2>
<h3 id="输入和输出"> 输入和输出</h3>
<p>生成器函数是一个特殊的函数，它除了有函数的基本特性，比如接受参数和输出返回值，还可以<strong>中断函数的运行</strong>。</p>
<div><pre><code><span>function</span> <span>*</span><span>foo</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>
  <span>var</span> z <span>=</span> x <span>+</span> y<span>;</span>
  <span>yield</span> z<span>;</span>
  <span>return</span> z <span>*</span> <span>2</span><span>;</span>
<span>}</span>

<span>var</span> it <span>=</span> <span>foo</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>;</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span> <span>// 3</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span> <span>// 6</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="双向消息传递"> 双向消息传递</h3>
<p>生成器通过 <code>yield</code> 和 <code>next函数</code> 实现双向数据传递。</p>
<div><pre><code><span>function</span> <span>*</span><span>foo</span><span>(</span><span>x</span><span>)</span> <span>{</span>
  <span>var</span> y <span>=</span> x <span>*</span> <span>(</span><span>yield</span> <span>"Hello"</span><span>)</span><span>;</span>
  <span>return</span> y<span>;</span>
<span>}</span>
<span>var</span> it <span>=</span> <span>foo</span><span>(</span> <span>6</span> <span>)</span><span>;</span>
<span>var</span> res <span>=</span> it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span> <span>// 启动生成器时一定要用不带参数的next</span>
res<span>.</span>value<span>;</span> <span>// hello，对应foo函数的yield "Hello"，从生成器传递至迭代器。</span>
res <span>=</span> it<span>.</span><span>next</span><span>(</span> <span>7</span> <span>)</span><span>;</span> <span>// 从迭代器传递至生成器中yield的位置</span>
res<span>.</span>value<span>;</span> <span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>我们并没有向第一个 next() 调用发送值，这是有意为之。<strong>只有暂停的 yield 才能接受这样一个通过 next 传递的值</strong>，而在生成器的起始处我们调用第一个 next() 时，还没有暂停的 yield 来接受这样一个值。规范和所有兼容浏览器都会默默<strong>丢弃</strong>传递给第一个 next() 的任何东西。因此，<strong>启动生成器时一定要用不带参数的 next()</strong>。</p>
<p>也许你会发现，next函数通常比yield多一个，事实上他们是一一对应的。<strong>next &lt;=&gt; yield + return</strong>。</p>
<h3 id="多个迭代器"> 多个迭代器</h3>
<p>每次构建一个迭代器，实际上就隐式构建了生成器的一个实例，通过这个迭代器来控制的是这个生成器实例。</p>
<p>同一个生成器的多个实例可以同时运行，它们甚至可以彼此交互或交替执行。</p>
<div><pre><code><span>function</span> <span>*</span><span>foo</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> x <span>=</span> <span>yield</span> <span>2</span><span>;</span>
    z<span>++</span><span>;</span>
    <span>var</span> y <span>=</span> <span>yield</span> <span>(</span>x <span>*</span> z<span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span> x<span>,</span> y<span>,</span> z <span>)</span><span>;</span>
<span>}</span>
<span>var</span> z <span>=</span> <span>1</span><span>;</span>
<span>var</span> it1 <span>=</span> <span>foo</span><span>(</span><span>)</span><span>;</span>
<span>var</span> it2 <span>=</span> <span>foo</span><span>(</span><span>)</span><span>;</span>

<span>var</span> val1 <span>=</span> it1<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span> <span>// 2 &lt;-- yield 2</span>
<span>var</span> val2 <span>=</span> it2<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span> <span>// 2 &lt;-- yield 2</span>
val1 <span>=</span> it1<span>.</span><span>next</span><span>(</span> val2 <span>*</span> <span>10</span> <span>)</span><span>.</span>value<span>;</span> <span>// 40   &lt;-- x:20,  z:2</span>
val2 <span>=</span> it2<span>.</span><span>next</span><span>(</span> val1 <span>*</span> <span>5</span> <span>)</span><span>.</span>value<span>;</span> <span>// 600  &lt;-- x:200, z:3</span>
it1<span>.</span><span>next</span><span>(</span> val2 <span>/</span> <span>2</span> <span>)</span><span>;</span> <span>// y:300 // 20 300 3</span>
it2<span>.</span><span>next</span><span>(</span> val1 <span>/</span> <span>4</span> <span>)</span><span>;</span> <span>// y:10 // 200 10 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="用生成器产生值"> 用生成器产生值</h2>
<p>“生成器”这个名称最初的使用场景就是作为一种产生值的方式。但是在介绍生成器如何产生值之前，我们先介绍下什么是迭代器。</p>
<h3 id="什么是迭代器"> 什么是迭代器</h3>
<p>假定你要产生一系列值，其中每个值都与前面一个有特定的关系。要实现这一点，需要一个有状态的生产者记住其生成的最后一个值。</p>
<p>我们可以用闭包实现：</p>
<div><pre><code><span>var</span> genNum <span>=</span> <span>void</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> nextVal<span>;</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> nextVal <span>=</span> nextVal <span>===</span> <span>undefined</span> <span>?</span> nextVal <span>*</span> <span>2</span> <span>:</span> <span>10</span><span>;</span>
  <span>}</span>
<span>}</span><span>(</span><span>)</span><span>;</span>
<span>genNum</span><span>(</span><span>)</span> <span>// 10</span>
<span>genNum</span><span>(</span><span>)</span> <span>// 20</span>
<span>genNum</span><span>(</span><span>)</span> <span>// 40</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>用标准的迭代器接口实现：</p>
<div><pre><code><span>var</span> genNum <span>=</span> <span>void</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> nextVal<span>;</span>
  <span>return</span> <span>{</span>
    <span>[</span>Symbol<span>.</span>Iterator<span>]</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>this</span><span>;</span> <span>}</span><span>,</span>
    <span>// 标准迭代器接口方法</span>
    <span>next</span><span>(</span><span>)</span> <span>{</span>
			nextVal <span>=</span> nextVal <span>===</span> <span>undefined</span> <span>?</span> nextVal <span>*</span> <span>2</span> <span>:</span> <span>10</span><span>;</span>
      <span>return</span> <span>{</span> done<span>:</span> <span>false</span><span>,</span> value<span>:</span> nextVal <span>}</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span><span>(</span><span>)</span>
genNum<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// 10</span>
genNum<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// 20</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>另外，ES6 还新增了一个 for-of 循环，for-of 循环在每次迭代中自动调用迭代器的 next()，它不会向 next() 传入任何值，并且会在接收到 done:true 之后自动停止。</p>
<div><pre><code><span>for</span><span>(</span><span>var</span> v <span>of</span> genNum<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> v <span>)</span><span>;</span>
	<span>if</span> <span>(</span>v <span>></span> <span>500</span><span>)</span> <span>{</span> <span>break</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="iterable可迭代的"> iterable可迭代的</h3>
<p>实现了<code>Symbol.iterator</code>函数的对象是可迭代的（iterable），迭代器包含next函数，next 调用返回一个对象。这个对象有两个属性:done 是一个 boolean 值，标识迭代器的完成状态；value 中放置迭代值。</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span>
  <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span> <span>// iterable</span>
    <span>var</span> val <span>=</span> <span>0</span><span>;</span>
    <span>return</span> <span>{</span> <span>// 返回迭代器对象</span>
      <span>next</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>{</span>
          done<span>:</span> val <span>></span> <span>5</span><span>,</span>
          value<span>:</span> val<span>++</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>for</span><span>(</span><span>var</span> v <span>of</span> obj<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>;</span> <span>// 1 2 3 4 5</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>for-of 循环自动调用它的 Symbol.iterator 函数来构建一个迭代器。我们当然也可以手工调用这个函数，然后使用它返回的迭代器。</p>
<p>for-of 循环在每次迭代中自动调用 next()，它不会向 next() 传入任何值，并且会在接收到 done:true 之后自动停止。</p>
<div><pre><code><span>var</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span><span>3</span><span>,</span><span>5</span><span>,</span><span>7</span><span>,</span><span>9</span><span>]</span><span>;</span>
<span>var</span> it <span>=</span> arr<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span><span>;</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="生成器与迭代器"> 生成器与迭代器</h3>
<p>严格说来，生成器本身并不是 iterable，尽管非常类似。当你执行一个生成器，就得到了一个迭代器。</p>
<div><pre><code><span>function</span> <span>*</span><span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> val<span>;</span>
  <span>while</span><span>(</span><span>true</span><span>)</span> <span>{</span> <span>// 生成器会在每次迭代中暂停，通过 yield 返回到主程序或事件循环队列中。</span>
    val <span>=</span> val <span>?</span> val <span>+</span> <span>1</span> <span>:</span> <span>1</span><span>;</span>
    <span>yield</span> val<span>;</span>
  <span>}</span>
<span>}</span>

<span>var</span> iterator <span>=</span> <span>foo</span><span>(</span><span>)</span><span>;</span> <span>// 执行生成器，得到迭代器</span>

<span>for</span> <span>(</span><span>var</span> v <span>of</span> iterator<span>)</span> <span>{</span>
  <span>if</span> <span>(</span>v <span>></span> <span>5</span><span>)</span> <span>break</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>;</span> <span>// 1 2 3 4 5</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>
<li>注意foo是生成器，并不是 iterable。我们需要调用 foo() 来构造一个生产者供 for-of 循环迭代。</li>
<li>foo() 调用产生一个迭代器，但 for-of 循环需要的是一个 iterable。所以生成器的迭代器也有一个 Symbol.iterator 函数，基本上这个函数做的就是 return this。换句话说，生成器的迭代器也是一个 iterable 。</li>
</ul>
<h4 id="停止生成器-it-return"> 停止生成器 it.return()</h4>
<p>在前面的例子中，看起来似乎 *foo() 生成器的迭代器实例在循环break之后就永远留在了挂起状态。</p>
<p>其实有一个隐藏的特性会帮助你管理此事。for-of 循环的“异常结束”(也就是“提前终止”)，通常由<strong>break、return 或者未捕获异常</strong>引起，会向生成器的迭代器发送一个信号使其终止。<em>严格地说，在循环正常结束之后，for-of 循环也会向迭代器发送这个信号。</em></p>
<p>尽管 for-of 循环会自动发送这个信号，但你可能会希望向一个迭代器手工发送这个信号。</p>
<div><pre><code><span>var</span> it <span>=</span> <span>foo</span><span>(</span><span>)</span><span>;</span>
<span>for</span> <span>(</span><span>var</span> v <span>of</span> it<span>)</span> <span>{</span>
  <span>if</span> <span>(</span>v <span>></span> <span>5</span><span>)</span> <span>{</span>
    <span>// 调用 it.return() 之后，它会立即终止生成器，并把返回的value设置为传入return()的内容</span>
    it<span>.</span><span>return</span><span>(</span><span>'hello'</span><span>)</span><span>;</span> <span>// { done: true, value: 'hello'}</span>
    <span>// 不需要break</span>
  <span>}</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>;</span> <span>// 1 2 3 4 5 6</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h4 id="抛出错误-it-throw"> 抛出错误 it.throw()</h4>
<p>迭代器主动抛出错误，不常用。</p>
<div><pre><code><span>function</span> <span>*</span><span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
   	<span>yield</span> <span>1</span><span>;</span>
    <span>yield</span> <span>2</span><span>;</span> 
  <span>}</span> <span>catch</span><span>(</span>err<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span> <span>// 'oops'</span>
  <span>}</span>
<span>}</span>
<span>var</span> it <span>=</span> <span>foo</span><span>(</span><span>)</span><span>;</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span> <span>// 1</span>
it<span>.</span><span>throw</span><span>(</span><span>'oops'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="生成器重构回调例子"> 生成器重构回调例子</h2>
<p>先来看下回调的例子：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>url<span>,</span>cb</span><span>)</span> <span>{</span>
  <span>ajax</span><span>(</span>url<span>,</span> cb<span>)</span><span>;</span>
<span>}</span>
<span>foo</span><span>(</span> <span>'http://xx.com'</span><span>,</span> <span>(</span><span>err<span>,</span>text</span><span>)</span> <span>=></span> err <span>?</span> console<span>.</span><span>error</span><span>(</span>err<span>)</span> <span>:</span> console<span>.</span><span>log</span><span>(</span>text<span>)</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>生成器例子：</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>url</span><span>)</span> <span>{</span>
  <span>ajax</span><span>(</span>url<span>,</span> <span>(</span><span>err<span>,</span> data</span><span>)</span> <span>=></span> <span>{</span>
    <span>// 向*main()抛出一个错误 或 用收到的data恢复*main()</span>
    err <span>?</span> it<span>.</span><span>throw</span><span>(</span>err<span>)</span> <span>:</span> it<span>.</span><span>next</span><span>(</span>data<span>)</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>function</span> <span>*</span><span>main</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
  	<span>let</span> text <span>=</span> <span>yield</span> <span>foo</span><span>(</span><span>'http://xx.com'</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span>
  <span>}</span> <span>catch</span><span>(</span>err<span>)</span> <span>{</span>
    console<span>.</span><span>error</span><span>(</span>err<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>let</span> it <span>=</span> <span>main</span><span>(</span><span>)</span><span>;</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="生成器-promise"> 生成器 + promise</h2>
<p>同样地，先来回顾下之前promise的例子：</p>
<div><pre><code><span>request</span><span>(</span><span>'http://xx.com'</span><span>)</span>
	<span>.</span><span>then</span><span>(</span>
  	<span>data</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>data<span>)</span><span>,</span>
  	<span>err</span> <span>=></span> console<span>.</span><span>error</span><span>(</span>err<span>)</span>
	<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>生成器 + promise版本：</p>
<div><pre><code><span>function</span> <span>*</span><span>main</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
  	<span>let</span> text <span>=</span> <span>yield</span> <span>request</span><span>(</span><span>'http://xx.com'</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span>
  <span>}</span> <span>catch</span><span>(</span>err<span>)</span> <span>{</span>
    console<span>.</span><span>error</span><span>(</span>err<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>let</span> it <span>=</span> <span>main</span><span>(</span><span>)</span><span>;</span>
<span>let</span> promise <span>=</span> it<span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>;</span>
promise<span>.</span><span>then</span><span>(</span>
	<span>data</span> <span>=></span>	it<span>.</span><span>next</span><span>(</span>data<span>)</span><span>,</span>
  <span>err</span> <span>=></span> it<span>.</span><span>throw</span><span>(</span>err<span>)</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>针对上面生成器 + promise版本的例子，可见我们需要每次小心地控制迭代器的运行，这不太方便且容易出错。</p>
<p>书中给了一个自动控制生成器执行的例子，这里仅供参考，因为在ES7中已经提供了标准化的<code>async / await</code>解决方法。</p>
<div><pre><code><span>function</span> <span>run</span><span>(</span><span>gen</span><span>)</span> <span>{</span>
  <span>var</span> args <span>=</span> <span>[</span><span>]</span><span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span> arguments<span>,</span> <span>1</span><span>)</span><span>,</span> it<span>;</span>
  <span>// 在当前上下文中初始化生成器</span>
  it <span>=</span> <span>gen</span><span>.</span><span>apply</span><span>(</span> <span>this</span><span>,</span> args <span>)</span><span>;</span>
  <span>// 返回一个promise用于生成器完成</span>
  <span>return</span> Promise<span>.</span><span>resolve</span><span>(</span><span>)</span>
          <span>.</span><span>then</span><span>(</span> <span>function</span> <span>handleNext</span><span>(</span><span>value</span><span>)</span><span>{</span> <span>// 对下一个yield出的值运行</span>
            <span>var</span> next <span>=</span> it<span>.</span><span>next</span><span>(</span> value <span>)</span><span>;</span>
            <span>return</span> <span>(</span><span>function</span> <span>handleResult</span><span>(</span><span>next</span><span>)</span><span>{</span> <span>// 生成器运行完毕了吗?</span>
              <span>if</span> <span>(</span>next<span>.</span>done<span>)</span> <span>{</span>
                <span>return</span> next<span>.</span>value<span>;</span>
              <span>}</span> <span>else</span> <span>{</span>
                <span>return</span> Promise<span>.</span><span>resolve</span><span>(</span> next<span>.</span>value <span>)</span>
                   <span>.</span><span>then</span><span>(</span>
                    	<span>// 成功就恢复异步循环，把决议的值发回生成器 handleNext,</span>
                    	<span>// 如果value是被拒绝的 promise，就把错误传回生成器进行出错处理</span>
                   		<span>function</span> <span>handleErr</span><span>(</span><span>err</span><span>)</span> <span>{</span>
                        <span>return</span> Promise<span>.</span><span>resolve</span><span>(</span>it<span>.</span><span>throw</span><span>(</span> err <span>)</span><span>)</span>
                          <span>.</span><span>then</span><span>(</span> handleResult <span>)</span><span>;</span>
                      <span>}</span>
                    <span>)</span><span>;</span>
              <span>}</span>
    <span>}</span><span>)</span><span>(</span>next<span>)</span><span>;</span>
	<span>}</span> <span>)</span><span>;</span>
<span>}</span>

<span>function</span> <span>*</span><span>main</span><span>(</span><span>)</span> <span>{</span>
  <span>// ..</span>
<span>}</span>
<span>run</span><span>(</span> main <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>Async / await 版本：</p>
<p>如果你 await 了一个 Promise，async 函数就会自动获知要做什么，它会暂停这个函数(就像生成器一样)，直到 Promise 决议。</p>
<div><pre><code><span>async</span> <span>function</span> <span>main</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
    <span>let</span> data <span>=</span> <span>await</span> <span>request</span><span>(</span><span>'http://xx.com'</span><span>)</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span>data<span>)</span><span>;</span>
  <span>}</span> <span>catch</span><span>(</span>err<span>)</span> <span>{</span>
    console<span>.</span><span>error</span><span>(</span>err<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="生成器委托"> 生成器委托</h2>
<h2 id="形实转换程序"> 形实转换程序</h2>
<p><a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" target="_blank" rel="noopener noreferrer">thunk函数</a></p>
<h2 id="es6之前的生成器"> ES6之前的生成器</h2>
<h2 id="小结"> 小结</h2>
<p>生成器是 ES6 的一个新的函数类型，它并不像普通函数那样总是运行到结束。取而代之的是，生成器可以在运行当中(完全保持其状态)暂停，并且将来再从暂停的地方恢复运行。</p>
<p>这种交替的暂停和恢复是合作性的而不是抢占式的，这意味着生成器具有独一无二的能力来暂停自身，这是通过关键字 yield 实现的。不过，只有控制生成器的迭代器具有恢复生成器的能力(通过 next)。</p>
<p>yield/next这一对不只是一种控制机制，实际上也是一种双向消息传递机制。yield 表达式本质上是暂停下来等待某个值，接下来的 next 调用会向被暂停的 yield 表达式传回一个值(或者是隐式的 undefined)。</p>
<p>在异步控制流程方面，生成器的关键优点是:生成器内部的代码是以自然的同步 / 顺序方式表达任务的一系列步骤。其技巧在于，我们把可能的异步隐藏在了关键字 yield 的后面， 把异步移动到控制生成器的迭代器的代码部分。</p>
<p>换句话说，生成器为异步代码保持了顺序、同步、阻塞的代码模式，这使得大脑可以更自然地追踪代码，解决了基于回调的异步的两个关键缺陷之一。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">代码组织</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-3%20%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89/2-3%20%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="代码组织"> 代码组织</h1>
<p>编写 JavaScript 代码是一回事，而合理组织代码则是另一回事。利用通用模式来组织和复用代码显著提高了代码的可读性和可理解性。</p>
<p>记住：<strong>对于代码来说，和其他开发者交流与提供计算机指令同等重要</strong>。</p>
<p>ES6 提供了几个重要的特性，显著改进了以下模式，包括迭代器、生成器、模块和类。</p>
<h2 id="迭代器"> 迭代器</h2>
<p>迭代器(iterator)是一个结构化的模式，用于从源以一次一个的方式提取数据。这个模式在编程中已经使用相当长的一段时间了。从很久之前开始，JavaScript 开发者就已经在 JavaScript 程序中自发地设计和实现迭代器，所以这不是一个全新的主题。</p>
<h3 id="接口"> 接口</h3>
<p>迭代器的接口如下：</p>
<div><pre><code>Iterator [required]
  next() {method}: 取得下一个IteratorResult
// 有些迭代器还扩展支持两个可选成员:
Iterator [optional]
	return() {method}: 停止迭代器并返回IteratorResult
	throw() {method}: 报错并返回IteratorResult
// IteratorResult 接口:
IteratorResult
	value {property}: 当前迭代值或者最终返回值(如果undefined为可选的)
	done {property}: 布尔值，指示完成状态
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>还有一个 Iterable 接口，用来表述必需能够提供生成器的对象：</p>
<div><pre><code>Iterable
  @@iterator() {method}: 产生一个 Iterator
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p><code>@@iterator</code> 是一个特殊的内置符号，表示可以为这个对象产生迭代器的方法，就是<code>[Symbol.iterator]</code> 方法。</p>
<h3 id="next"> next()</h3>
<div><pre><code><span>var</span> greeting <span>=</span> <span>"hello world"</span><span>;</span>
<span>var</span> it <span>=</span> greeting<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span><span>;</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span> <span>// { value: "h", done: false }</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span> <span>// { value: "e", done: false }</span>
<span>// ...</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span> <span>// { value: undefined, done: true }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>严格来说，基本值本身不是 iterable，但是感谢“封箱”技术，&quot;hello world&quot; 被<strong>强制转换 / 变换为 String 对象封装形式</strong>，而这是一个 iterable。</p>
<p>迭代器的 next() 方法可以接受一个或多个可选参数。绝大多数内置迭代器没有利用这个功能，生成器的迭代器可以通过这些参数向生成器传递数据（参考中卷的生成器部分）。</p>
<h3 id="可选的-return-和-throw"> 可选的 return() 和 throw()</h3>
<p>多数内置迭代器都没有实现这两个接口。然而，在生成器的上下文中它们肯定是有意义的。</p>
<p>return 被定义为向迭代器发送一个信号，表明消费者代码已经完毕，不会再从其中提取任何值。这个信号可以用于通知生产者执行可能需要的清理工作，比如释放 / 关闭网络、数据库或者文件句柄资源。</p>
<p>如果迭代器存在 return，并且出现了任何可以自动被解释为异常或者对迭代器消耗的提前终止的条件，就会自动调用 return。你也可以手动调用 return。</p>
<p>return 就像 next 一样会返回一个 IteratorResult 对象。一般来说，发送给 return 的可选值将会在这个 IteratorResult 中作为 value 返回，但在一些微妙的情况下并非如此。</p>
<p>throw 用于向迭代器报告一个异常 / 错误，和对于 return 的反应不一样，它并不一定意味着迭代器的完全停止。</p>
<p>例如，通过生成器迭代器，throw 实际上向生成器的停滞执行上下文中插入了一个抛出的异常，这个异常可以用 try..catch 捕获。未捕获的 throw 异常最终会异常终止生成器迭代器。</p>
<div><p>Tips</p>
<p>通用的惯例是，迭代器不应该在调用 return 或者 throw 之后再产生任何值。</p>
</div>
<h3 id="迭代器的使用"> 迭代器的使用</h3>
<p>下面介绍三种迭代器的使用方法：调用next方法、for-of循环、<code>...</code> 运算。</p>
<ul>
<li>
<p>调用next方法</p>
<div><pre><code><span>var</span> str <span>=</span> <span>'hello'</span>
<span>var</span> it <span>=</span> str<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span><span>;</span>
it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span>
<span>// ...</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>for-of循环</p>
<p>ES6 的 for-of 循环直接消耗一个符合规范的 iterable。</p>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span>
  <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> n <span>=</span> <span>1</span><span>;</span>
    <span>return</span> <span>{</span> <span>// 返回一个迭代器</span>
      <span>// 使迭代器成为iterable，使得可以对迭代器进行for-of循环</span>
      <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span> <span>return</span> <span>this</span><span>;</span> <span>}</span><span>,</span>
      <span>next</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> n <span>></span> <span>3</span>
          <span>?</span> <span>{</span> done<span>:</span> <span>true</span> <span>}</span>
          <span>:</span> <span>{</span> value<span>:</span> n<span>++</span><span>,</span> done<span>:</span> <span>false</span> <span>}</span><span>;</span>
      <span>}</span>
    <span>}</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>for</span><span>(</span><span>let</span> v <span>of</span> obj<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>;</span> <span>// 1 2 3</span>
<span>}</span>

<span>// 以下代码等价于用for-of循环迭代一个iterable</span>
<span>var</span> it <span>=</span> obj<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span><span>;</span>
<span>for</span> <span>(</span><span>var</span> v<span>,</span> res<span>;</span> <span>(</span>res <span>=</span> it<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span> <span>&amp;&amp;</span> <span>!</span>res<span>.</span>done<span>;</span> <span>)</span> <span>{</span>
  v <span>=</span> res<span>.</span>value<span>;</span>
  console<span>.</span><span>log</span><span>(</span> v <span>)</span><span>;</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div></li>
<li>
<p><code>...</code> 运算</p>
<p>当使用 <code>...</code> 进行 spread 操作一个对象时，会调用该对象的 <code>[Symbol.iterator]</code> 方法，并将其迭代完成。</p>
<div><pre><code><span>var</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>...</span>arr<span>)</span><span>;</span> <span>// 1 2 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>数组解构也可以消耗迭代器：</p>
<div><pre><code><span>var</span> it <span>=</span> a<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span><span>;</span>
<span>var</span> <span>[</span>x<span>,</span>y<span>]</span> <span>=</span> it<span>;</span> <span>// 从it中获取前两个元素</span>
x<span>;</span> <span>// 1</span>
y<span>;</span> <span>// 2</span>

<span>var</span> <span>[</span>z<span>,</span> <span>...</span>w<span>]</span> <span>=</span> it<span>;</span> <span>// 获取第三个元素，然后一次取得其余所有元素</span>
z<span>;</span> <span>// 3</span>
w<span>;</span> <span>// [4,5]</span>

it<span>.</span><span>next</span><span>(</span><span>)</span><span>;</span> <span>// { value: undefined, done: true }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
</ul>
<h3 id="自定义迭代器"> 自定义迭代器</h3>
<p>为一个对象实现 <code>[Symbol.iterator]</code> 方法，且该方法中返回了标准的Iterator迭代器，则这个对象可以被for-of 循环、spread操作符迭代循环。这里举一个为数字自定义一个迭代器的例子：</p>
<div><pre><code><span>if</span> <span>(</span><span>!</span><span>Number</span><span>.</span>prototype<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>)</span> <span>{</span>
  Object<span>.</span><span>defineProperty</span><span>(</span> <span>// 将[Symbol.iterator]方法挂上Number.prototype</span>
    <span>Number</span><span>.</span>prototype<span>,</span>
    Symbol<span>.</span>iterator<span>,</span>
    <span>{</span>
      writable<span>:</span> <span>true</span><span>,</span>
      configurable<span>:</span> <span>true</span><span>,</span>
      enumerable<span>:</span> <span>false</span><span>,</span> <span>// 不可枚举</span>
      <span>value</span><span>:</span> <span>function</span> <span>iterator</span><span>(</span><span>)</span><span>{</span>
        <span>var</span> i<span>,</span> inc<span>,</span> done <span>=</span> <span>false</span><span>,</span> top <span>=</span> <span>+</span><span>this</span><span>;</span>
        inc <span>=</span> <span>1</span> <span>*</span> <span>(</span>top <span>&lt;</span> <span>0</span> <span>?</span> <span>-</span><span>1</span> <span>:</span> <span>1</span><span>)</span><span>;</span> <span>// 正向还是反向迭代?</span>
        <span>return</span> <span>{</span>
          <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span><span>{</span> <span>return</span> <span>this</span><span>;</span> <span>}</span><span>,</span> <span>// 使得迭代器本身成为iterable!</span>
          <span>next</span><span>(</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span>done<span>)</span> <span>return</span> <span>{</span> done<span>:</span> <span>true</span> <span>}</span><span>;</span>

            <span>if</span> <span>(</span>i <span>==</span> <span>null</span><span>)</span><span>{</span> i <span>=</span> <span>0</span><span>;</span> <span>}</span> <span>// 初始迭代总是0</span>
            <span>else</span> <span>if</span> <span>(</span>top <span>>=</span> <span>0</span><span>)</span> <span>{</span> i <span>=</span> Math<span>.</span><span>min</span><span>(</span>top<span>,</span> i <span>+</span> inc<span>)</span><span>;</span> <span>}</span> <span>// 正向迭代</span>
            <span>else</span> <span>{</span> i <span>=</span> Math<span>.</span><span>max</span><span>(</span>top<span>,</span> i <span>+</span> inc<span>)</span><span>;</span> <span>}</span>

            <span>if</span> <span>(</span>i <span>==</span> top<span>)</span> done <span>=</span> <span>true</span><span>;</span> <span>// 本次迭代后结束?</span>
            <span>return</span> <span>{</span> value<span>:</span> i<span>,</span> done<span>:</span> <span>false</span> <span>}</span><span>;</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>)</span>
<span>}</span>

<span>for</span> <span>(</span><span>var</span> i <span>of</span> <span>3</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> i <span>)</span><span>;</span>
<span>}</span> <span>// 0 1 2 3</span>
<span>[</span><span>...</span><span>-</span><span>3</span><span>]</span><span>;</span> <span>// [0,-1,-2,-3]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id="生成器"> 生成器</h2>
<h2 id="模块"> 模块</h2>
<h2 id="类"> 类</h2>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">Promise</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-3%20Promise/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-3%20Promise/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="promise"> Promise</h1>
<h2 id="promise两要素"> promise两要素</h2>
<h3 id="承诺"> 承诺</h3>
<p>书中用订汉堡的例子解释，当你在柜台向收银员下订单并付款后，会得到一张有订单号的收据。这个收据就是汉堡店给你的承诺，它承诺一段等待时间后会给你一个汉堡。等待期间你可以去干些别的事。</p>
<p><em>（这里指的就是pending状态的promise）</em></p>
<h3 id="承诺结果"> 承诺结果</h3>
<p>针对上面汉堡的例子，最终要么得到一个汉堡，要没可能因为厨师下班之类的原因没能得到汉堡，但不变的是每个订单都有个最终的状态。</p>
<p><em>（这里指的是 promise 的 fulfill 或 reject）</em></p>
<h2 id="判断是不是promise"> 判断是不是Promise</h2>
<p>在 Promise 领域，一个重要的细节是如何确定某个值是不是真正的 Promise。或者更直接地说，它是不是一个行为方式类似于 Promise 的值?</p>
<p>可通过以下两种方法判断：</p>
<ul>
<li>
<p>针对ES6版本的JavaScript环境，<code>p instanceof Promise === true</code></p>
</li>
<li>
<p>用鸭子类型判断，Promise对象的一大特征就是拥有then方法。（但要注意可能有些对象会拥有自定义的then方法）</p>
<div><pre><code><span>if</span> <span>(</span>
	p <span>!==</span> <span>null</span> <span>&amp;&amp;</span>
	<span>(</span><span>typeof</span> p <span>===</span> <span>"object"</span> <span>||</span> <span>typeof</span> p <span>===</span> <span>"function"</span><span>)</span> <span>&amp;&amp;</span>
  <span>typeof</span> p<span>.</span>then <span>===</span> <span>"function"</span>
<span>)</span><span>{</span>
  <span>// 假定这是一个thenable!</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
</ul>
<h2 id="promise的信任"> Promise的信任</h2>
<p>第二章介绍<em>回调</em>的时候，提到了回调函数的<em>控制反转</em>造成的信任问题。</p>
<p>这里回顾一下，把一个回调传入工具 foo 时可能出现如下问题:</p>
<ul>
<li>
<p>调用回调过早</p>
</li>
<li>
<p>调用回调过晚(或不被调用)</p>
</li>
<li>
<p>调用回调次数过少或过多</p>
</li>
<li>
<p>未能传递所需的环境和参数</p>
</li>
<li>
<p>吞掉可能出现的错误和异常</p>
</li>
</ul>
<p>Promise 的特性就是专门用来为这些问题提供一个有效的可复用的答案。</p>
<ul>
<li>
<p>调用过早</p>
<p>根据定义，Promise 就不必担心这种问题，因为即使是立即完成的 Promise(类似于 <code>new Promise(resolve =&gt; resolve(42))</code>)也无法被同步观察到。</p>
<p>也就是说，对一个 Promise 调用 then 的时候，即使这个 Promise 已经resolve，提供给 then 的回调也总会被异步调用。</p>
</li>
<li>
<p>调用过晚</p>
<p>和前面一点类似，Promise 创建对象调用 resolve 或 reject 时，这个 Promise 的 then 注册的回调就会被自动调度。可以确信，这些回调在下一个异步事件点上一定会被触发。</p>
<div><pre><code>p<span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  p<span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> <span>"C"</span> <span>)</span><span>)</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span> <span>"A"</span> <span>)</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>
p<span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> <span>"B"</span> <span>)</span><span>)</span><span>;</span>
<span>// A B C</span>
<span>// "C" 无法打断或抢占 "B"，这是因为 Promise 的运作方式。</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>回调未调用</p>
<p>没有任何东西(甚至 JavaScript 错误)能阻止 Promise 向你通知它的resolve。</p>
<p>如果你对一个 Promise 注册了一个resolve回调和一个reject回调，那么 Promise 在resolve时总是会调用其中的一个。因此对于Promise来说不存在回调未调用的情况。</p>
</li>
<li>
<p>调用回调次数过少或过多</p>
<p>Promise 只能被resolve一次，所以任何通过 then 注册的每个回调就只会被调用一次。</p>
</li>
<li>
<p>未能传递参数/环境值</p>
<p>Promise在fulfill或reject时可以传递参数。</p>
</li>
<li>
<p>吞掉错误或异常</p>
<p>错误或异常会造成promise的reject从而被注册的reject回调处理，也可以用 p.catch() 处理。</p>
<div><pre><code><span>var</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>// 调用reject或抛出错误，这个promise(p1)会被reject</span>
	<span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>)</span><span>;</span>
  <span>// reject(1);</span>
  <span>resolve</span><span>(</span><span>1</span><span>)</span><span>;</span>
<span>}</span><span>)</span>
<span>var</span> p2 <span>=</span> p1<span>.</span><span>then</span><span>(</span>
  <span>// resolve 回调</span>
  <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>)</span><span>;</span> <span>// 抛出错误，这个promise(p2)会被reject</span>
  <span>}</span><span>,</span>
  <span>// reject回调</span>
  <span>(</span><span>)</span> <span>=></span> <span>{</span><span>}</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
</ul>
<h3 id="promise-resolve"> Promise.resolve</h3>
<p>如果向 Promise.resolve 传递一个非 Promise、非 thenable 的立即值，就会得到一个用这个值填充的 promise。</p>
<p><strong>传递一个真正的 Promise，就只会返回同一个 promise。</strong></p>
<div><pre><code><span>var</span> p1 <span>=</span> Promise<span>.</span><span>resolve</span><span>(</span><span>22</span><span>)</span><span>;</span>
<span>var</span> p2 <span>=</span> Promise<span>.</span><span>resolve</span><span>(</span>p1<span>)</span><span>;</span>

p1 <span>===</span> p2 <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><strong>更重要的是，如果传递了一个非 Promise 的 thenable 值，就会试图展开这个值，而且展开过程会持续到提取出一个具体的非类 Promise 的最终值。</strong></p>
<div><pre><code><span>var</span> p <span>=</span> <span>{</span>
  <span>then</span><span>(</span><span>cb</span><span>)</span> <span>{</span>
    <span>cb</span><span>(</span> <span>42</span> <span>)</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>

Promise<span>.</span><span>resolve</span><span>(</span> p <span>)</span>
  <span>.</span><span>then</span><span>(</span>
  	<span>val</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> val <span>)</span><span>,</span> <span>// 42</span>
		<span>err</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> err <span>)</span>
	<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>因此，Promise.resolve 可以接受任何 thenable，将其解封为它的非 thenable 值。</p>
<p>从 Promise. resolve 得到的是一个真正的 Promise，是一个可以信任的值。</p>
<p>如果你传入的已经是真正的 Promise，那么你得到的就是它本身，所以通过 Promise.resolve 过滤来获得可信任性完全没有坏处。</p>
<div><pre><code><span>// 假设foo工具会至少返回一个thenable的值</span>
<span>// 用Promise.resolve可以保证得到一个promise</span>

<span>// 不要只是这么做:</span>
<span>foo</span><span>(</span> <span>42</span> <span>)</span>
<span>.</span><span>then</span><span>(</span><span>v</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> v <span>)</span><span>)</span><span>;</span>
<span>// 而要这么做:</span>
Promise<span>.</span><span>resolve</span><span>(</span> <span>foo</span><span>(</span> <span>42</span> <span>)</span> <span>)</span>
  <span>.</span><span>then</span><span>(</span><span>v</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> v <span>)</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="术语-pending-resolve-fullfill-reject"> 术语：pending &amp; resolve，fullfill &amp; reject</h2>
<p>这里将这4个术语分别翻译为：pending(等待)、resolve(完成)、fullfill(接受)、reject(拒绝)。</p>
<p>当promise被创建时，它首先是pending状态，promise的状态只能从pending变为resolved，且只能改变一次。</p>
<p>从pending变为resolved，有两种途径，分别为fullfill或reject。</p>
<p>其中容易引起误解的是resolve:</p>
<div><pre><code><span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span><span>23</span><span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>创建promise时通常命名为resolve和reject，但他们不是对应关系。resolve表示这个promise已经不可更改了。事实上，resolve也可以得到reject状态的promise：</p>
<div><pre><code><span>var</span> rejectedPr <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span>reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>// resolve一个promise，会将这个promise展开</span>
  <span>resolve</span><span>(</span> Promise<span>.</span><span>reject</span><span>(</span> <span>"Oops"</span> <span>)</span> <span>)</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>
rejectedPr<span>.</span><span>then</span><span>(</span>
  <span>// ES6 规范将这两个回调命名为 onFulfilled 和 onRjected，所以fulfilled、rejected这两个术语很准确。</span>
	<span>function</span> <span>fulfilled</span><span>(</span><span>)</span><span>{</span><span>}</span><span>,</span>
  <span>function</span> <span>rejected</span><span>(</span><span>err</span><span>)</span><span>{</span>
    console<span>.</span><span>log</span><span>(</span> err <span>)</span><span>;</span> <span>// "Oops"</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong>综上，promise有pending和resolved两种状态；其中resolved状态有fullfilled、rejected两种可能。</strong></p>
<h2 id="链式调用"> 链式调用</h2>
<p>下面介绍Promise在链式调用中的数据传递、先后关系和错误处理。</p>
<p><strong>每次你对 Promise 调用 then 函数，它都会创建并返回一个新的 Promise，我们可以将其链接起来。</strong></p>
<div><pre><code>Promise<span>.</span><span>resolve</span><span>(</span><span>21</span><span>)</span> <span>// p0</span>
<span>// p1</span>
<span>.</span><span>then</span><span>(</span><span>v</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>;</span> <span>// 21</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>v <span>*</span> <span>2</span><span>)</span><span>,</span> <span>1000</span><span>)</span><span>;</span> <span>// p1 1秒后 resolve</span>
  <span>}</span><span>)</span>
<span>}</span><span>)</span>
<span>// p2</span>
<span>.</span><span>then</span><span>(</span><span>v</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>)</span> <span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong>在then方法中，如果fullfill或reject处理函数中返回了一个新的promise，那么需要等这个新的promise完成才能继续传递。</strong></p>
<div><pre><code><span>function</span> <span>request</span><span>(</span><span>url</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span>reject</span><span>)</span> <span>=></span> <span>ajax</span><span>(</span> url<span>,</span> resolve <span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>request</span><span>(</span> <span>"http://some.url.1/"</span> <span>)</span>
  <span>.</span><span>then</span><span>(</span><span>response1</span> <span>=></span> <span>{</span>
  	<span>// 这里的request函数返回了一个新的promise，因此需要等待它完成才能得到response2</span>
    <span>return</span> <span>request</span><span>(</span> <span>"http://some.url.2/?v="</span> <span>+</span> response1 <span>)</span>
  <span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>response2</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> response2 <span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="链式调用的错误处理"> 链式调用的错误处理</h3>
<p><strong>错误和异常是基于每个 Promise 的</strong>，这意味着可能在链的任意位置捕捉到这样的错误。</p>
<p>每个抛出错误或者调用reject函数的promise会将这个promise变为reject。</p>
<div><pre><code><span>request</span><span>(</span> <span>"http://some.url.1/"</span> <span>)</span>
<span>.</span><span>then</span><span>(</span><span>response1</span> <span>=></span> <span>{</span>
  foo<span>.</span><span>bar</span><span>(</span><span>)</span><span>;</span> <span>// undefined，出错!</span>
  <span>return</span> response1<span>;</span> <span>// 永远不会到达这里</span>
<span>}</span><span>)</span>
<span>.</span><span>then</span><span>(</span>
  <span>function</span> <span>fulfilled</span><span>(</span><span>)</span><span>{</span><span>}</span><span>,</span> <span>// 永远不会到达这里</span>
  <span>// 上一个promise抛出异常，相当于reject，因此这里的promise会调rejected函数</span>
  <span>function</span> <span>rejected</span><span>(</span><span>err</span><span>)</span><span>{</span>
    <span>// 捕捉到来自foo.bar()的错误TypeError</span>
  	console<span>.</span><span>log</span><span>(</span> err <span>)</span><span>;</span>
    <span>return</span> <span>42</span><span>;</span>
	<span>}</span>
<span>)</span>
<span>.</span><span>then</span><span>(</span><span>msg</span> <span>=></span> console<span>.</span><span>log</span><span>(</span> msg <span>)</span><span>;</span> <span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p><strong>在then函数中，如果不传入fullfill或reject处理函数，则会有默认的处理函数被传入。</strong></p>
<div><pre><code><span>var</span> p <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>reject</span><span>(</span> <span>"Oops"</span> <span>)</span><span>)</span><span>;</span> <span>// reject</span>
<span>var</span> p2 <span>=</span> p<span>.</span><span>then</span><span>(</span>
  <span>function</span> <span>fulfilled</span><span>(</span><span>)</span><span>{</span><span>}</span><span>,</span>
  <span>// 默认的reject处理函数，如果省略或者传入任何非函数值则会被使用</span>
  <span>/*function rejected(err) {
      throw err;
	}*/</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>默认拒绝处理函数只是把错误重新抛出，这最终会使得 p2用同样的错误理由reject。从本质上说，这使得错误可以继续沿着 Promise 链传播下去，直到遇到显式定义的reject处理函数。</p>
<div><pre><code><span>var</span> p <span>=</span> Promise<span>.</span><span>resolve</span><span>(</span><span>21</span><span>)</span><span>;</span>
p<span>.</span><span>then</span><span>(</span>
  <span>null</span><span>,</span>
  <span>// 如果没有传递一个有效的函数，则使用默认的fullfill处理函数</span>
  <span>// 把接收到的任何传入值传递给下一个promise</span>
	<span>// v => v,</span>
	<span>function</span> <span>rejected</span><span>(</span><span>)</span><span>{</span><span>}</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>总结一下使链式流程控制可行的 Promise 固有特性</p>
<ul>
<li>
<p>调用 Promise 的 then 会自动创建一个新的 Promise。</p>
</li>
<li>
<p>在处理函数内部，如果返回一个值或抛出一个异常，新返回的(可链接的)Promise 就相应地决议。</p>
</li>
<li>
<p>如果处理函数返回一个 Promise，它将会被展开，不管它的决议值是什么，都会成为当前 then 返回的链接 Promise 的决议值。</p>
</li>
</ul>
<h2 id="错误处理"> 错误处理</h2>
<p><em>调用reject函数</em>、<em>JavaScript异常</em> 都可以使promise被拒绝(reject)。</p>
<p><code>try-catch</code>语句只能处理同步情况，因此不能用于处理promise的异常。</p>
<p>参考以下代码：</p>
<div><pre><code><span>var</span> p0 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>reject</span><span>(</span><span>0</span><span>)</span><span>)</span><span>;</span>
<span>var</span> p1 <span>=</span> p0<span>.</span><span>then</span><span>(</span>
  <span>fullfilled1</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>rejected1</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>// 处理p0的rejct或异常（异常会使promise拒绝）</span>
<span>)</span>
<span>var</span> p2 <span>=</span> p1<span>.</span><span>then</span><span>(</span>
	<span>fullfilled2</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>rejected2</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>// 处理p1的reject或异常</span>
<span>)</span>
<span>// 如果p1,p2都没传入reject处理函数，统一在catch函数处理</span>
<span>var</span> p3 <span>=</span> p2<span>.</span><span>catch</span><span>(</span>handleErrs<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>从上面代码可以看出，每个reject处理函数处理的都是上一个promise的异常或reject。如果p1,p2都没传入reject处理函数，根据上节提到的默认reject处理函数，整个链式调用中可能出现的异常可以“汇集”到catch函数中。但是这仍会有两个问题：</p>
<ul>
<li>catch函数中无法判断是哪个promise出错</li>
<li>如果handleErrs函数本身有异常，则无法捕获</li>
</ul>
<p>书中没有给出这两个问题的标准处理方法。</p>
<h2 id="promise异步模式"> promise异步模式</h2>
<h3 id="promise-all"> Promise.all([...])</h3>
<div><pre><code><span>var</span> p1 <span>=</span> <span>request</span><span>(</span> <span>"http://some.url.1/"</span> <span>)</span><span>;</span>
<span>var</span> p2 <span>=</span> <span>request</span><span>(</span> <span>"http://some.url.2/"</span> <span>)</span><span>;</span>
Promise<span>.</span><span>all</span><span>(</span> <span>[</span>p1<span>,</span>p2<span>]</span> <span>)</span>
  <span>.</span><span>then</span><span>(</span> <span>msgs</span> <span>=></span> <span>request</span><span>(</span><span>"http://some.url.3/?v="</span> <span>+</span> msgs<span>.</span><span>join</span><span>(</span><span>","</span><span>)</span><span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>msg</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>msg<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>Promise.all 需要一个参数，是一个数组，通常由Promise实例组成。从 Promise. all 调用返回的 promise 会收到一个完成消息(代码片段中的 msgs)。这是一个由所有传入 promise 的完成消息组成的数组，与指定的顺序一致(与完成顺序无关)。</p>
<p>从 Promise.all 返回的主promise在且仅在所有的成员promise都完成后才会完成。如果这些promise中有任何一个被拒绝的话，主promise就会立即被拒绝，并丢弃来自其他所有 promise 的全部结果。</p>
<p>永远要记住为每个promise关联一个拒绝/错误处理函数，特别是主promise。</p>
<h3 id="promise-race"> Promise.race([...])</h3>
<p>与Promise.all类似，一旦有任何一个Promise决议为完成，Promise.race就会完成；</p>
<p><strong>一旦有任何一个 Promise 决议为拒绝，Promise.race就会拒绝。</strong></p>
<p>Promise.race的一个使用例子，超时请求：</p>
<div><pre><code>Promise<span>.</span><span>race</span><span>(</span><span>[</span>
  <span>foo</span><span>(</span><span>)</span><span>,</span> <span>// 启动foo()</span>
  <span>timeoutPromise</span><span>(</span> <span>3000</span> <span>)</span> <span>// 给它3秒钟</span>
<span>]</span><span>)</span>
<span>.</span><span>then</span><span>(</span>
  <span>function</span><span>(</span><span>)</span><span>{</span><span>}</span><span>,</span> <span>// foo 3秒内完成</span>
  <span>// 要么foo()被拒绝，要么只是没能够按时完成，因此要查看err了解具体原因</span>
  <span>function</span><span>(</span><span>err</span><span>)</span> <span>{</span><span>}</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="一些其他的api"> 一些其他的API</h3>
<ul>
<li>
<p>Promise.any([...]) 任一promise完成</p>
</li>
<li>
<p>Promise.allSettled([...]) 所有的promise都settled（fullfilled或rejected）</p>
</li>
<li>
<p>书中还提到一些其他变种，比如none、first、last、map等等，但是没有被纳入标准，因此这里不具体介绍</p>
</li>
</ul>
<h2 id="promise-局限性"> Promise 局限性</h2>
<h3 id="错误处理-2"> 错误处理</h3>
<p>很多时候并没有为 Promise 链序列的中间步骤保留的引用，没有这样的引用，你就无法关联错误处理函数来可靠地检查错误。</p>
<div><pre><code><span>// p不指向foo函数调用返回的promise，而是.catch( handleErrors )返回的promise</span>
<span>var</span> p <span>=</span> <span>foo</span><span>(</span> <span>42</span> <span>)</span>
  <span>.</span><span>then</span><span>(</span> <span>STEP2</span> <span>)</span>
  <span>.</span><span>then</span><span>(</span> <span>STEP3</span> <span>)</span>
	<span>.</span><span>catch</span><span>(</span> handleErrors <span>)</span>
<span>// 无法判断错误来自哪一步</span>
<span>// handleErrors如果出错无法捕获</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="只能fullfill或reject单个值"> 只能fullfill或reject单个值</h3>
<p>根据定义，promise只能在fullfill或reject中传递一个值。虽然可以用数组或对象包装起来，但是在promise链中每一步进行包装和解包装就十分丑陋和笨重了。</p>
<h3 id="只能resolve一次"> 只能resolve一次</h3>
<p>Promise 最本质的一个特征是：<strong>Promise 只能被决议一次(完成或拒绝)</strong>。</p>
<p>在许多异步情况中，你只会获取一个值一次，所以这可以工作良好。但是，还有很多异步的情况适合另一种模式——一种类似于事件或数据流的模式，比如为按钮添加点击事件和后续事件处理。</p>
<h3 id="把回调重构成promise"> 把回调重构成promise</h3>
<p>假设有一个基于回调写法的函数<code>ajax(url, callback)</code>。我们可以重新封装一个基于promise的函数来替换他，但是这样不够方便，因为这意味着每遇到一个类似函数都需要重构一遍。</p>
<p>可以通过添加一个工具函数，方便重构：</p>
<div><pre><code><span>if</span> <span>(</span><span>!</span>Promise<span>.</span>warp<span>)</span> <span>{</span>
  Promise<span>.</span><span>warp</span> <span>=</span> <span>fn</span> <span>=></span> <span>{</span>
    <span>// 返回一个包裹函数</span>
    <span>return</span> <span>(</span><span><span>.</span><span>.</span>args</span><span>)</span> <span>=></span> <span>{</span>
      <span>// 包裹函数返回的是promise</span>
			<span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
        <span>function</span> <span>callback</span><span>(</span><span>err<span>,</span> val</span><span>)</span> <span>{</span>
          err <span>?</span> <span>reject</span><span>(</span>err<span>)</span> <span>:</span> <span>resolve</span><span>(</span>val<span>)</span><span>;</span>
        <span>}</span>
        <span>fn</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> args<span>.</span><span>concat</span><span>(</span>callback<span>)</span><span>)</span> <span>// 将回调函数添加到被包裹函数的参数</span>
      <span>}</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>var</span> request <span>=</span> Promise<span>.</span><span>wrap</span><span>(</span> ajax <span>)</span><span>;</span>
<span>request</span><span>(</span> <span>"http://some.url.1/"</span> <span>)</span>
  <span>.</span><span>then</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h3 id="无法取消的promise"> 无法取消的promise</h3>
<p>一旦创建了一个 Promise 并为其注册了完成、拒绝处理函数，如果出现某种情况使得这个任务悬而未决的话，你也没有办法从外部停止它的进程。</p>
<div><pre><code><span>var</span> p <span>=</span> Promise<span>.</span><span>resolve</span><span>(</span> <span>42</span> <span>)</span><span>;</span>
Promise<span>.</span><span>race</span><span>(</span> <span>[</span>
  p<span>,</span>
	<span>timeoutPromise</span><span>(</span> <span>3000</span> <span>)</span>
<span>]</span><span>)</span>
<span>.</span><span>then</span><span>(</span><span>)</span><span>;</span>

p<span>.</span><span>then</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span>
  <span>// 即使在超时的情况下也会发生</span>
<span>}</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>然而，<strong>我们不应该取消单个的promise</strong>，这违背了未来值的可信任性(外部不变性)。</p>
<p>单独的一个 Promise 并不是一个真正的流程控制机制(至少不是很有意义)，这正是取消所涉及的层次(流程控制)。这就是为什么 Promise 取消总是让人感觉很别扭。</p>
<p>相比之下，集合在一起的 Promise 构成的链，就是一个流程控制的表达，因此将取消定义在这个抽象层次上是合适的。</p>
<p>**单独的 Promise 不应该可取消，但是可取消一个序列是合理的，**因为你不会像对待 Promise 那样把序列作为一个单独的不变值来传送。</p>
<h2 id="小结"> 小结</h2>
<p>Promise 非常好，请使用。它们解决了我们因只用回调的代码而备受困扰的控制反转问题。</p>
<p>它们并没有摈弃回调，只是把回调的安排转交给了一个位于我们和其他工具之间的可信任的中介机制。</p>
<p>Promise 链也开始提供以顺序的方式表达异步流的一个更好的方法，这有助于我们的大脑更好地计划和维护异步 JavaScript 代码。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">性能测试与调优</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-6%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-6%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E4%BC%98/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="性能测试与调优"> 性能测试与调优</h1>
<p>本部分的前四章都是关于异步与并发编码模式的性能，第 5 章是关于宏观程序架构级的性能。</p>
<p>这一章要讨论的主题则是微观性能，关注点在<strong>单个表达式和语句</strong>。</p>
<p>需要说明的是，本章的目的不是为了满足对微观性能调优的沉迷，比如某个 JavaScript 引擎上运行 ++a 是不是会比 a++ 快。更重要的目标是弄清楚<strong>哪些种类的 JavaScript 性能更重要，哪些种类则无关紧要，以及如何区分</strong>。</p>
<h2 id="如何进行性能测试"> 如何进行性能测试</h2>
<p>错误的性能测试范例：</p>
<div><pre><code><span>var</span> start <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
<span>// 进行一些操作</span>
<span>var</span> end <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> <span>"Duration:"</span><span>,</span> end <span>-</span> start <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>上面这段性能测试带来的结果有很大的不确定性，比如：</p>
<ul>
<li>
<p>有些平台的精度不够</p>
</li>
<li>
<p>引擎或系统有没有受到什么影响，其他时候会不会运行得更快？</p>
</li>
<li>
<p>获得 start 或 end 时间戳之间也可能有其他一些延误</p>
</li>
<li>
<p>运算测试的环境是否过度优化？</p>
</li>
</ul>
<p>你可能会用重复多次执行，然后总时间除以次数的方法来测试。</p>
<p>然而，简单的数学平均值绝对不足以对你要外推到整个应用范围的性能作出判断。迭代 100 次， 即使只有几个(过高或过低的)的异常值也可以影响整个平均值，然后在重复应用这个结论的时候，你还会扩散这个误差，产生更大的欺骗性。</p>
<h3 id="benchmark-js"> Benchmark.js</h3>
<p>任何有意义且可靠的性能测试都应该基于统计学上合理的实践。比如标准差、方差、误差幅度。</p>
<p><a href="http://benchmarkjs.com/" target="_blank" rel="noopener noreferrer">Benchmark.js</a>就是一个这样的工具。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>// 要测试的运算</span>
<span>}</span>
<span>var</span> bench <span>=</span> <span>new</span> <span>Benchmark</span><span>(</span>
  <span>'test'</span><span>,</span> <span>// 测试名称</span>
  foo<span>,</span> <span>// 要测试的函数(也即内容)</span>
	<span>{</span> <span>/* .. */</span> <span>}</span> <span>// 可选的额外选项(参见文档)</span>
<span>)</span><span>;</span>
bench<span>.</span>hz<span>;</span> <span>// 每秒运算数</span>
bench<span>.</span>stats<span>.</span>moe<span>;</span> <span>// 出错边界</span>
bench<span>.</span>stats<span>.</span>variance<span>;</span> <span>// 样本方差</span>
<span>// ..</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="大局"> 大局</h2>
<p><strong>过早优化是万恶之源。</strong></p>
<blockquote>
<p>程序员们浪费了大量的时间用于思考，或担心他们程序中非关键部分的速度，这些针对效率的努力在调试和维护方面带来了强烈的负面效果。我们应该在，比如说 97% 的时间里，忘掉小处的效率，过早优化是万恶之源。但我们不应该错过关键的 3% 中的机会。</p>
</blockquote>
<p>花费在优化关键路径上的时间不是浪费，不管节省的时间多么少；而花在非关键路径优化上的时间都不值得，不管节省的时间多么多。</p>
<p>如果你的代码在关键路径上，比如是一段将要反复运行多次的“热”代码，或者在用户会注意到的 UX 关键位置上，如动画循环或 CSS 风格更新，那你应该采用有意义的、可测量的有效优化。</p>
<p>考虑一下：一个关键路径动画循环需要把一个字符串类型转换到数字，那种写法更快？</p>
<div><pre><code><span>var</span> x <span>=</span> <span>"42"</span><span>;</span> <span>// 需要数字42</span>
<span>var</span> y <span>=</span> x <span>/</span> <span>2</span><span>;</span> <span>// 让隐式类型转换自动发生</span>
<span>var</span> y <span>=</span> <span>parseInt</span><span>(</span> x<span>,</span> <span>0</span> <span>)</span> <span>/</span> <span>2</span><span>;</span> <span>// parseInt</span>
<span>var</span> y <span>=</span> <span>Number</span><span>(</span> x <span>)</span> <span>/</span> <span>2</span><span>;</span> <span>// Number</span>
<span>var</span> y <span>=</span> <span>+</span>x <span>/</span> <span>2</span><span>;</span> <span>// 一元运算符 +</span>
<span>var</span> y <span>=</span> <span>(</span>x <span>|</span> <span>0</span><span>)</span> <span>/</span> <span>2</span><span>;</span> <span>// 一元运算符 |</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>请记住，沉迷于 <code>+x</code> 与 <code>x | 0</code> 的对比在绝大多数情况下都是浪费时间。这是一个微观性能问题，不应该让其影响程序可读性。</p>
<p>尽管程序关键路径上的性能非常重要，但这并不是唯一要考虑的因素。在性能方面大体相似的几个选择中，<strong>可读性</strong>应该是另外一个重要的考量因素。</p>
<h2 id="尾调用优化"> 尾调用优化</h2>
<p>ES6 包含了一个性能领域的特殊要求。这与一个涉及函数调用的特定优化形式相关：尾调用优化(Tail Call Optimization，TCO)。</p>
<p>简单地说，尾调用就是一个出现在另一个函数“结尾”处的函数调用。这个调用结束后就没有其余事情要做了(除了可能要返回结果值)。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>x</span><span>)</span> <span>{</span>
  <span>return</span> x<span>;</span>
<span>}</span>
<span>function</span> <span>bar</span><span>(</span><span>y</span><span>)</span> <span>{</span>
  <span>return</span> <span>foo</span><span>(</span> y <span>+</span> <span>1</span> <span>)</span><span>;</span> <span>// 尾调用</span>
<span>}</span>
<span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>1</span> <span>+</span> <span>bar</span><span>(</span> <span>40</span> <span>)</span><span>;</span> <span>// 非尾调用</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>调用一个新的函数需要额外的一块预留内存来管理调用栈，称为栈帧。所以前面的代码一般会同时为 baz、bar 和 foo 保留一个栈帧。</p>
<p>然而，如果支持 TCO 的引擎能够意识到 foo(y+1) 调用位于尾部，这意味着 bar 基本上已经完成了，那么在调用 foo 时，它就不需要创建一个新的栈帧，而是可以重用已有的 bar 的栈帧。这样不仅<strong>速度更快，也更节省内存</strong>。</p>
<p>尾调用在递归中有很大帮助。</p>
<p>递归是 JavaScript 中一个纷繁复杂的主题。因为如果没有 TCO 的话，引擎需要实现一个随意(还彼此不同!)的限制来界定递归栈的深度，达到了就得停止，以防止内存耗尽。<strong>有了 TCO，尾调用的递归函数本质上就可以任意运行，因为再也不需要使用额外的内存!</strong></p>
<div><pre><code><span>// TCO友好的斐波那契数列求和</span>
<span>function</span> <span>factorial</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>function</span> <span>fact</span><span>(</span><span>n<span>,</span>res</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>n <span>&lt;</span> <span>2</span><span>)</span> <span>return</span> res<span>;</span>
    <span>return</span> <span>fact</span><span>(</span> n <span>-</span> <span>1</span><span>,</span> n <span>*</span> res <span>)</span><span>;</span> <span>// 尾调用</span>
  <span>}</span>
  <span>return</span> <span>fact</span><span>(</span> n<span>,</span> <span>1</span> <span>)</span><span>;</span> <span>// 尾调用</span>
<span>}</span>
<span>factorial</span><span>(</span> <span>5</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><p>Note</p>
<p>TCO 只用于有实际的尾调用的情况。如果你写了一个没有尾调用的递归函数，那么性能还是会回到普通栈帧分配的情形，引 擎对这样的递归调用栈的限制也仍然有效。很多递归函数都可以改写，就像刚刚展示的 factorial 那样，但是需要认真注意细节。</p>
</div>
<h2 id="小结"> 小结</h2>
<ul>
<li>建议使用Benchmark.js进行性能测试，得到可靠结果。</li>
<li>从尽可能多的环境中得到尽可能多的测试结果以消除硬件 / 设备的偏差，这一点很重要。 jsPerf.com 是很好的网站，用于众包性能测试运行。</li>
<li><strong>过早优化是万恶之源</strong>。</li>
<li>尾调用优化是 ES6 要求的一种优化方法。TCO 允许一个函数在结尾处调用另外一个函数来执行，不需要任何额外资源。这意味着，对递归算法来说，引擎不再需要限制栈深度。</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">混合环境JavaScript</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%951%20%E6%B7%B7%E5%90%88%E7%8E%AF%E5%A2%83JavaScript/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%951%20%E6%B7%B7%E5%90%88%E7%8E%AF%E5%A2%83JavaScript/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="混合环境javascript"> 混合环境JavaScript</h1>
<p>JavaScript 程序几乎总是在宿主环境中运行，这使得它在一定程度上变得不可预测。</p>
<p>比如：当你的代码在不同的 JavaScript 引擎上运行时，有些地方就会出现差异。</p>
<p>下面将介绍这些差异。</p>
<h2 id="annex-b"> Annex B</h2>
<p>JavaScript 语言的官方名称是 ECMAScript，JavaScript 是 ECMAScript 的通用称谓。</p>
<p>确切地说，<strong><em>JavaScript</em> 是 <em>ECMAScript规范</em> 在浏览器上的实现。</strong></p>
<p>ECMAScript 规范包括 Annex B，其中介绍了由于浏览器兼容性问题导致的与官方规范的差异。</p>
<p>因此，可以认为以下这几点只会出现在浏览器，而不会出现在<em>Node.js、Rhino</em>等环境中。</p>
<ul>
<li>
<p>在非严格模式中允许八进制数值常量存在，如 0123(即十进制的 83)。</p>
</li>
<li>
<p><code>window.escape</code> 和 <code>window.unescape</code> 让你能够转义(escape)和回转(unescape)</p>
<p>带有%分隔符的十六进制字符串。例如，window.escape( &quot;? foo=97%&amp;bar=3%&quot; )的结果</p>
<p>为 &quot;%3Ffoo%3D97%25%26bar%3D3%25&quot;。</p>
</li>
<li>
<p><code>String.prototype.substr</code> 和 <code>String.prototype.substring</code> 十分相似，除了前者的第二个</p>
<p>参数是结束位置索引(非自包含)，后者的第二个参数是长度(需要包含的字符数)。</p>
</li>
</ul>
<h2 id="web-ecmascript"> Web ECMAScript</h2>
<p><a href="https://javascript.spec.whatwg.org" target="_blank" rel="noopener noreferrer">Web ECMAScript 规范</a>中介绍了官方ECMAScript 规范和目前基于浏览器的 JavaScript 实现之间的差异。</p>
<p>通常来说，出现这些差异的情况很少，所以了解即可。以下内容在实际开发中很少使用，也不推荐。</p>
<ul>
<li>
<p><code>&lt;!-- 和 --&gt;</code> 是合法的单行注释分隔符。</p>
</li>
<li>
<p>String.prototype 中返回HTML格式字符串的附加方法:anchor(..)、big(..)、</p>
<p>blink(..)、bold(..)、fixed(..)、fontcolor(..)、fontsize(..)、italics(..)、 link(..)、small(..)、strike(..) 和 sub(..)。</p>
</li>
<li>
<p>RegExp 扩展：<code>RegExp.$1</code> ... <code>RegExp.$9</code>(匹配组)和 <code>RegExp.lastMatch/RegExp[&quot;$&amp;&quot;]</code>(最近匹配)。</p>
</li>
<li>
<p>Function.prototype 附加方法：</p>
<p><code>Function.prototype.arguments</code>(别名为 arguments 对象) 和 <code>Function.caller</code>(别名为 arguments.caller)。</p>
</li>
</ul>
<h2 id="宿主对象"> 宿主对象</h2>
<p>宿主对象(包括内建对象和函数)是由宿主环境，比如 <em>浏览器、Node.js</em>，创建并提供给 JavaScript 引擎的变量。</p>
<p>考虑一下代码：</p>
<div><pre><code><span>var</span> div <span>=</span> document<span>.</span><span>createElement</span><span>(</span> <span>"div"</span> <span>)</span><span>;</span>
<span>typeof</span> div<span>;</span> <span>// "object"</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span> div <span>)</span><span>;</span> <span>// "[object HTMLDivElement]"</span>
div<span>.</span>tagName<span>;</span> <span>// "DIV"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>上述例子中，<code>div</code> 是一个特殊的宿主对象，它是一个 DOM 元素。</p>
<p>其内部的 <code>[[Class]]</code> 值为 <code>HTMLDivElement</code>，来自预定义的属性(通常也是不可更改的)。</p>
<p>其他需要注意的宿主对象的行为差异有:</p>
<ul>
<li>无法访问正常的 object 内建方法，如 toString();</li>
<li>无法写覆盖;</li>
<li>包含一些预定义的只读属性;</li>
<li>包含无法将 this 重载为其他对象的方法;</li>
<li>其他</li>
</ul>
<p>在针对运行环境进行编码时，宿主对象扮演着一个十分关键的角色，但要特别注意其行为特性，因为它们常常有别于普通的 JavaScript object。</p>
<h3 id="console-对象"> console 对象</h3>
<p>console 对象由宿主环境提供，以便从代码中输出各种值。</p>
<ul>
<li>
<p>console 在浏览器中是输出到 <strong>开发工具控制台</strong></p>
</li>
<li>
<p>在 Node.js 中，则是指向 JavaScript 环境系统进程的 <strong>标准输出(stdout)</strong> 和 <strong>标准错误输出(stderr)</strong>。</p>
</li>
</ul>
<h2 id="全局-dom-变量"> 全局 DOM 变量</h2>
<p>这是一个浏览器演进的历史遗留问题：在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量。</p>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>foo<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>if</span> <span>(</span><span>typeof</span> foo <span>==</span> <span>"undefined"</span><span>)</span> <span>{</span>
  foo <span>=</span> <span>42</span><span>;</span> <span>// 永远也不会运行</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span> foo <span>)</span><span>;</span> <span>// HTML元素</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>##原生原型</p>
<p><strong>尽量不要拓展原生原型。</strong></p>
<div><pre><code><span>// Netscape 4没有Array.push</span>
<span>Array</span><span>.</span>prototype<span>.</span><span>push</span> <span>=</span> <span>function</span><span>(</span><span>item</span><span>)</span> <span>{</span>
  <span>this</span><span>[</span><span>this</span><span>.</span>length<span>-</span><span>1</span><span>]</span> <span>=</span> item<span>;</span>
<span>}</span><span>;</span>

<span>// 上面的push不能添加多个元素，比如[].push(1, 2, 3)</span>
<span>// 而且会覆盖高版本浏览器提供的push方法</span>
<span>if</span> <span>(</span><span>!</span><span>Array</span><span>.</span>prototype<span>.</span>push<span>)</span> <span>{</span>
	Array<span>.</span>push <span>Array</span><span>.</span>prototype<span>.</span><span>push</span> <span>=</span> <span>function</span><span>(</span><span>item</span><span>)</span> <span>{</span>
    <span>this</span><span>[</span><span>this</span><span>.</span>length<span>-</span><span>1</span><span>]</span> <span>=</span> item<span>;</span>
  <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="script"> <code>&lt;script&gt;</code></h2>
<p>web应用程序中加载Javascript代码的两种方式：</p>
<ul>
<li><code>&lt;script src='url'&gt;&lt;/script&gt;</code></li>
<li><code>&lt;script&gt; /* javascript代码 */&lt;/script&gt;</code></li>
</ul>
<p>对于这两种方式加载进来的JavaScript代码：</p>
<ul>
<li>
<p>它们共享 global 对象(在浏览器中则是 window)，也就是说<strong>这些文件中的代码在共享的命名空间中运行，并相互交互</strong>。</p>
<p>但是<em>变量作用域的提升机制</em>在这些边界中不适用。</p>
<div><pre><code>&lt;-- 以下代码未声明就使用 <span><span><span>&lt;/</span>--</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span><span>foo</span><span>(</span><span>)</span></span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span> <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span> </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>--</span> <span>以下代码可用</span> <span>--</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
  <span>foo</span><span>(</span><span>)</span>
  <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
  <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span><span>foo</span><span>(</span><span>)</span></span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>如果 script 中的代码(无论是内联代码还是外部代码)发生错误，它会像独立的 JavaScript 程序那样停止，</p>
<p>但是后续的 script 中的代码依然会<strong>继续运行</strong>。</p>
</li>
<li>
<p>动态加载JavaScript代码</p>
<div><pre><code><span>var</span> greeting <span>=</span> <span>"Hello World"</span><span>;</span>
<span>var</span> el <span>=</span> document<span>.</span><span>createElement</span><span>(</span> <span>"script"</span> <span>)</span><span>;</span> <span>// 创建script标签</span>

el<span>.</span>text <span>=</span> <span>"function foo(){ alert( greeting )} setTimeout( foo, 1000 );"</span><span>;</span> <span>// 设置script代码内容</span>
<span>// 或者</span>
el<span>.</span>src <span>=</span> <span>'url-to-script-file'</span> <span>// 设置为一个URL文件，动态加载外部文件</span>

document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span> el <span>)</span><span>;</span> <span>// 添加标签</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>对于外部文件，会根据代码文件的字符集属性(UTF-8、ISO-8859-8 等)来解析外部文件中的代码(或者默认字符集)。</p>
<p>对于内联代码，则使用其所在页面文件的字符集 (或者默认字符集)。<em>内联代码的 script 标签没有 charset 属性</em>。</p>
</li>
</ul>
<h2 id="保留字"> 保留字</h2>
<p>ES5 规范在 7.6.1 节中定义了一些“保留字”，我们不能将它们用作变量名。</p>
<ul>
<li>关键字：比如<code>function</code></li>
<li>预留关键字：比如<code>enum</code></li>
<li><code>null、true、false</code>等</li>
</ul>
<h2 id="实现中的限制"> 实现中的限制</h2>
<p>JavaScript 规范对于函数中参数的个数，以及字符串常量的长度等并没有限制。但是由于JavaScript 引擎实现各异，规范在某些地方有一些限制。</p>
<div><pre><code><span>function</span> <span>sum</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
  <span>let</span> sum <span>=</span> <span>0</span><span>;</span>
  <span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> args<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
 		sum <span>+=</span> i<span>;</span>   
  <span>}</span>
  <span>return</span> sum<span>;</span>
<span>}</span>

<span>const</span> nums <span>=</span> <span>Array</span><span>(</span><span>100000</span><span>)</span><span>.</span><span>fill</span><span>(</span><span>0</span><span>)</span><span>.</span><span>map</span><span>(</span><span>(</span><span>item<span>,</span> i</span><span>)</span> <span>=></span> i<span>)</span><span>;</span>

<span>sum</span><span>(</span><span>2</span><span>,</span> <span>4</span><span>,</span> <span>6</span><span>)</span><span>;</span> <span>// 12</span>
<span>sum</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> nums<span>)</span><span>;</span> <span>// 应该是: 499950000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>在一些 JavaScript 引擎中你会得到正确答案 499950000，而另外一些引擎(如 Safari 6.x)中则会产生错误<code>“RangeError: Maximum call stack size exceeded”</code>。</p>
<p>下面列出一些已知的限制:</p>
<ul>
<li>字符串常量中允许的最大字符数(并非只是针对字符串值);</li>
<li>可以作为参数传递到函数中的数据大小(也称为栈大小，以字节为单位);</li>
<li>函数声明中的参数个数;</li>
<li>未经优化的调用栈(例如递归)的最大层数，即函数调用链的最大长度;</li>
<li>JavaScript 程序以阻塞方式在浏览器中运行的最长时间(秒);</li>
<li>变量名的最大长度。</li>
</ul>
<h2 id="小结"> 小结</h2>
<ul>
<li>
<p><code>Annex B</code> 介绍了由于浏览器兼容性问题导致的与官方规范的差异。</p>
</li>
<li>
<p><code>Web ECMAScript</code> 介绍了官方ECMAScript 规范和目前基于浏览器的 JavaScript 实现之间的差异。</p>
</li>
<li>
<p>JavaScript通常运行在宿主环境中，而宿主通常会提供一些该环境下特有的宿主对象，比如<code>document、window</code>。</p>
</li>
<li>
<p>在浏览器中，由于浏览器演进的历史遗留问题，在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量。</p>
</li>
<li>
<p>不要扩展原生原型。</p>
</li>
<li>
<p>Web应用程序中加载JavaScript有两种方式，它们之间共享全局变量，并相互交互。</p>
</li>
<li>
<p>保留字有四类：“关键字”、“预留关键字”、null 常量、true/false 布尔常量</p>
</li>
<li>
<p>JavaScript 引擎实现各异，应该了解他们之间对规范作出的限制的差异。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">asynquence 库</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%952%20asynquence%20%E5%BA%93/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%952%20asynquence%20%E5%BA%93/"/>
    <updated>2021-07-07T13:47:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="asynquence-库"> asynquence 库</h1>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">高级异步模式</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%953%20%E9%AB%98%E7%BA%A7%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/%E9%99%84%E5%BD%953%20%E9%AB%98%E7%BA%A7%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F/"/>
    <updated>2021-07-07T13:47:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="高级异步模式"> 高级异步模式</h1>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">动态规划</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="动态规划"> 动态规划</h3>
<h4 id="基本思想"> 基本思想</h4>
<p>动态规划是多阶段的决策过程，每步求解的问题是后阶段求解问题的子问题，每步决策依赖于以前步骤的决策结果</p>
<h5 id="优化原则"> 优化原则</h5>
<p>一个最优决策序列的任何子序列一定是相对于子序列的初始和结束状态的最优决策序列。当子序列变得更优时，整个决策序列也会变得更优。</p>
<h5 id="注意"> 注意</h5>
<p>不满足优化原则的问题不能使用动态规划算法求解。</p>
<h4 id="设计要素"> 设计要素</h4>
<ul>
<li>问题建模，优化的目标函数是什么，约束条件是什么</li>
<li>如何划分子问题</li>
<li>问题的优化函数值与子问题的优化函数值存在着什么依赖关系（递推方程）</li>
<li>是否满足优化原则</li>
<li>最小子问题怎么界定，其优化函数值等于什么</li>
</ul>
<h4 id="例子"> 例子</h4>
<ul>
<li>最短路径问题</li>
<li>矩阵链相乘</li>
<li>图像压缩</li>
<li>最大子段和</li>
<li>最优二叉搜索树</li>
<li>RNA二级结构预测</li>
<li>序列比对</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">选择问题</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%88%86%E6%B2%BB/k-selection/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%88%86%E6%B2%BB/k-selection/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="选择问题"> 选择问题</h3>
<p>输入：集合<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>（含n个不等的实数）</p>
<p>输出：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>中第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span></span></span></span>小的元素</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>，称为最小元素</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>，称为最大元素</p>
<p>位置处在中间的元素，称为中位数。</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>为奇数，中位数唯一，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span>/2</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>为偶数，可指定<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>/2</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></p>
<h3 id="选最大"> 选最大</h3>
<h4 id="算法"> 算法</h4>
<p>遍历<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>个数的数组<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>，令<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>为当前最大元素，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>为当前最大元素的下标，当遇到更大的数时，更新<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>。</p>
<p>时间：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></p>
<h3 id="选最大最小"> 选最大最小</h3>
<p>输入：集合<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>（含n个不等的实数）</p>
<p>输出：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>中最大的元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>和最小的元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>min</span></span></span></span></p>
<h4 id="算法-2"> 算法</h4>
<ul>
<li>
<p>蛮力算法</p>
<p>顺序比较，先选出最大元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>，然后在剩余数组中选出<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>min</span></span></span></span>。</p>
<p>时间：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.72777em;vertical-align:-0.08333em;"></span><span>2</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span></span></span></span></p>
</li>
<li>
<p>分组算法</p>
<p>对<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>按两个一组分组，共<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌊</span><span>n</span><span>/2</span><span>⌋</span></span></span></span>组，以及可能存在多余的元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>，</p>
<p>每组中的较大元素组成<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.10903em;">M</span><span>A</span><span style="margin-right:0.07847em;">X</span></span></span></span>，较小元素组成<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.10903em;">M</span><span style="margin-right:0.07847em;">I</span><span style="margin-right:0.10903em;">N</span></span></span></span>，</p>
<p>然后在<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.10903em;">M</span><span>A</span><span style="margin-right:0.07847em;">X</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>中选出<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.10903em;">M</span><span style="margin-right:0.07847em;">I</span><span style="margin-right:0.10903em;">N</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>中选出<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>min</span></span></span></span>。</p>
<p>时间：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌊</span><span>n</span><span>/2</span><span>⌋</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span>⌈</span><span>n</span><span>/2</span><span>⌉</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌈</span><span>3</span><span>n</span><span>/2</span><span>⌉</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></p>
</li>
<li>
<p>分治算法</p>
<p>将数组从中间划分为两个字数组<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span>L</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span>、</span><span><span>L</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，</p>
<p>递归地在<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span>L</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中求<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span>ma</span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.80952em;vertical-align:-0.15em;"></span><span>mi</span><span><span>n</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，</p>
<p>递归地在<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span>L</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中求<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span>ma</span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.80952em;vertical-align:-0.15em;"></span><span>mi</span><span><span>n</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，</p>
<p>那么<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span>ma</span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>ma</span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>}</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>min</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>min</span><span>{</span><span>mi</span><span><span>n</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>mi</span><span><span>n</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>}</span></span></span></span>。</p>
<p>时间：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>/2</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.36687em;vertical-align:0em;"></span><span>⋯</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>3</span><span>n</span><span>/2</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span>。</p>
</li>
</ul>
<h4 id="总结"> 总结</h4>
<ul>
<li>选最大（<strong>至少<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>次比较</strong>）：顺序比较，比较次数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></li>
<li>选最大最小（<strong>至少<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>3</span><span>n</span><span>/2</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span>次比较</strong>）
<ul>
<li>选最大 + 选最小，比较次数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72777em;vertical-align:-0.08333em;"></span><span>2</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span></span></span></span></li>
<li>分组：比较次数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌈</span><span>3</span><span>n</span><span>/2</span><span>⌉</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></li>
<li>分治：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.849108em;vertical-align:0em;"></span><span><span>2</span><span><span><span><span style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>，比较次数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>3</span><span>n</span><span>/2</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></li>
</ul>
</li>
</ul>
<h3 id="选第二大"> 选第二大</h3>
<p>输入：集合<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>（含n个不等的实数）</p>
<p>输出：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span></span></span></span>中第二大元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span>seco</span><span>n</span><span>d</span></span></span></span></p>
<h4 id="算法-3"> 算法</h4>
<ul>
<li>
<p>蛮力算法</p>
<p>顺序比较找到最大元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>，然后从剩余的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>个元素中找最大。</p>
<p>时间：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.72777em;vertical-align:-0.08333em;"></span><span>1</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.72777em;vertical-align:-0.08333em;"></span><span>2</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span></span></span></span>。</p>
</li>
<li>
<p>锦标赛算法</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span>seco</span><span>n</span><span>d</span></span></span></span>必然是在与最大数的比较中被淘汰，因此记录所有被最大数淘汰的数组成<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>A</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>A</span></span></span></span>中的最大元素即是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span>seco</span><span>n</span><span>d</span></span></span></span>。该算法需要额外空间记录<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>A</span></span></span></span>。</p>
<ol>
<li>
<p>两两分组比较，大者进入下一轮，直到剩下一个元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>为止</p>
</li>
<li>
<p>在每次比较中淘汰较小元素，将被淘汰元素记录在淘汰它的元素的链表上</p>
</li>
<li>
<p>检查<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>ma</span><span>x</span></span></span></span>的链表，从中找到最大数，即是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span>seco</span><span>n</span><span>d</span></span></span></span></p>
</li>
</ol>
<p>时间：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌈</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>⌉</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></p>
<p><strong>该算法是所有以元素比较为基本运算的找第二大算法中最好的算法。</strong></p>
</li>
</ul>
<h3 id="k-selection"> K-selection</h3>
<p>问题：选第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>小</p>
<p>输入：长度为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>的数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.05764em;">S</span></span></span></span>组，正整数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03148em;">k</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.83041em;vertical-align:-0.13597em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span></p>
<p>输出：第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>小的数</p>
<h4 id="算法-4"> 算法</h4>
<ul>
<li>
<p>调用<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>次选最小算法，时间复杂度为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>kn</span><span>)</span></span></span></span>，其中<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83041em;vertical-align:-0.13597em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>/2</span></span></span></span></p>
</li>
<li>
<p>排序后输出第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>小的元素，时间复杂度为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span></p>
</li>
<li>
<p>分治算法</p>
<blockquote>
<p>假设元素彼此不等，设计思想：</p>
<ol>
<li>
<p>用**某个元素<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.688696em;vertical-align:0em;"></span><span><span>m</span><span><span><span><span style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span>**作为标准将<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.05764em;">S</span></span></span></span>划分为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的元素小于<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.688696em;vertical-align:0em;"></span><span><span>m</span><span><span><span><span style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的元素大于<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.688696em;vertical-align:0em;"></span><span><span>m</span><span><span><span><span style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span>。</p>
</li>
<li>
<p>如果<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83041em;vertical-align:-0.13597em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>∣</span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>∣</span></span></span></span>，则在<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中找第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>小，</p>
</li>
</ol>
<p>如果<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>∣</span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>∣</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>，则<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.688696em;vertical-align:0em;"></span><span><span>m</span><span><span><span><span style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>∗</span></span></span></span></span></span></span></span></span></span></span>是第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>小，</p>
<p>如果<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.73354em;vertical-align:-0.0391em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>∣</span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>∣</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>，则在<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中找<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.77777em;vertical-align:-0.08333em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>∣</span><span><span style="margin-right:0.05764em;">S</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>∣</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>小</p>
<ol start="3">
<li></li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="选中位数的应用-管道位置"> 选中位数的应用：管道位置</h4>
<p>假设有一条主管道和n口油井，求主管道的位置，使得每条支管道的长度总和最小。那么当主管道的位置为支管位置的中位数时，支管长度总和最小。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghknakfvfaj30m80cimxb.jpg" alt="" /></p>
<h4 id="证明"> 证明</h4>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghknog2g6jj308a074t8m.jpg" style="zoom:150%;" />
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">投资问题</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%8A%95%E8%B5%84%E9%97%AE%E9%A2%98/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%8A%95%E8%B5%84%E9%97%AE%E9%A2%98/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="投资问题"> 投资问题</h3>
<h4 id="问题"> 问题</h4>
<p>m元钱，n项投资，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span>：将x元投入第i个项目的收益，求使得总收益最大的投资方案</p>
<h4 id="建模"> 建模</h4>
<ul>
<li>
<p>解：向量<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>...</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是投给项目i的钱数，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>...</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span></span></span></span></p>
</li>
<li>
<p>目标函数：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="top:0em;">{</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span>...</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="top:0em;">}</span></span></span></span></span></p>
</li>
<li>
<p>约束条件：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.73333em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.73333em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>...</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span>m</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>∈</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.10903em;">N</span></span></span></span></p>
</li>
</ul>
<h4 id="实例"> 实例</h4>
<p>5万元钱，4个项目，效益函数如下表。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span></span></span></span></th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">11</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">12</td>
<td style="text-align:center">5</td>
<td style="text-align:center">10</td>
<td style="text-align:center">21</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">13</td>
<td style="text-align:center">10</td>
<td style="text-align:center">30</td>
<td style="text-align:center">22</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">14</td>
<td style="text-align:center">15</td>
<td style="text-align:center">32</td>
<td style="text-align:center">23</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">15</td>
<td style="text-align:center">20</td>
<td style="text-align:center">40</td>
<td style="text-align:center">24</td>
</tr>
</tbody>
</table>
<h4 id="子问题界定和计算顺序"> 子问题界定和计算顺序</h4>
<p>子问题界定：由参数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span></span></span></span>界定，</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>: 考虑对项目<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>...</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>的投资</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span></span></span></span>: 投资总钱数不超过<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span></span></span></span></p>
<h4 id="优化函数的递推方程"> 优化函数的递推方程</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span>: <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span></span></span></span>元钱投给前<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>个项目的最大收益</p>
<p>多步判断: 若知道<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span>p</span></span></span></span>元钱<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>p</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>x</span><span>)</span></span></span></span>投给前<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.77777em;vertical-align:-0.08333em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>个项目的最大效益<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span><span>(</span><span>p</span><span>)</span></span></span></span>，确定<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span></span></span></span>元钱投给前<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>个项目的方案。</p>
<p>递推方程和边界条件：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span><span>x</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)}</span><span style="margin-right:1em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>x</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></span></p>
<h4 id="计算过程"> 计算过程</h4>
<ul>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>11</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>2</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>12</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>3</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>13</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>4</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>14</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>5</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>15</span></span></span></span></span></p>
</li>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></p>
<ul>
<li>
<p>方案：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>(</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)}</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>11</span></span></span></span></p>
<p>选择<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span>方案</p>
</li>
<li>
<p>方案：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>(</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>(</span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>2</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>2</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>2</span><span>)}</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>12</span></span></span></span></p>
<p>选择<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span>方案</p>
</li>
<li>
<p>方案：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>(</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>(</span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>(</span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>3</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>3</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>2</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>2</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>3</span><span>)}</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>16</span></span></span></span></p>
<p>选择<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>)</span></span></span></span>方案</p>
</li>
<li>
<p>以此类推，得到<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>4</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>21</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>5</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>26</span></span></span></span>。</p>
</li>
</ul>
</li>
<li>
<p>根据以上方法，将<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span></span></span></span>的所有情况计算得以下<strong>备忘录</strong></p>
<p>其中右侧的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span>表示最后一个项目分配的钱数，比如<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>13</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span>表示当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>2</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>13</span></span></span></span>时，第三个项目分配1万元。</p>
<table>
<thead>
<tr>
<th style="text-align:center">x</th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>x</span><span>)</span></span></span></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>11</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>11</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>11</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>20</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>12</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>12</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>13</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>31</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>13</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>16</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>30</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>33</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>14</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>21</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>41</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>50</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>15</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>5</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>26</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>43</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>)</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>61</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>)</span></span></span></span></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>根据上表可知，投资的最大收益为61，此时第四个项目投资1万元，那么前三个项目的投资钱数为4万元，由此可查<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>4</span><span>)</span></span></span></span>为3万元，以此类推。推导过程如下：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>5</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>5</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>4</span><span>)</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>4</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>4</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>3</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>0</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
<p>综上，整个投资的方案为</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>5</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>61</span></span></span></span></span></p>
</li>
</ul>
<h4 id="时间复杂度"> 时间复杂度</h4>
<p>若<strong>备忘录</strong>中有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>m</span></span></span></span>行<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>列，共<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.46528em;vertical-align:0em;"></span><span>m</span><span style="margin-right:0.2222222222222222em;"></span><span>∗</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>项，那么投资问题的时间复杂度为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span><span>m</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span>。</p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">分治策略</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%88%86%E6%B2%BB/%E5%88%86%E6%B2%BB/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%88%86%E6%B2%BB/%E5%88%86%E6%B2%BB/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="分治策略"> 分治策略</h3>
<h4 id="步骤"> 步骤</h4>
<ol>
<li>划分：将原始问题划分或归结为规模较小的子问题</li>
<li>独立求解子问题：递归或迭代求解每个子问题</li>
<li>综合得解：将子问题的解综合得到原问题的解</li>
</ol>
<h4 id="注意"> 注意</h4>
<ul>
<li>子问题与原始问题性质完全一样（分治基础）</li>
<li>子问题之间可彼此独立求解</li>
<li>递归停止时子问题可直接求解</li>
</ul>
<h4 id="例子"> 例子</h4>
<ul>
<li>
<p>二分查找</p>
<div><pre><code><span>// 算法 Binary Search(T, l, r, x)</span>
<span>// 输入 数组T，下标从l到r，查找数x</span>
<span>// 输出：下标j</span>
<span>while</span> l <span>&lt;=</span> r <span>do</span>
  m <span>=</span> <span>floor</span><span>(</span><span>(</span>l <span>+</span> r<span>)</span> <span>/</span> <span>2</span><span>)</span> <span>// 下取整</span>
  <span>if</span> <span>(</span>T<span>[</span>m<span>]</span> <span>==</span> x<span>)</span>
    then <span>return</span> m
  <span>else</span> <span>if</span> T<span>[</span>m<span>]</span> <span>></span> x
    then r <span>=</span> m <span>-</span> <span>1</span>
  <span>else</span>
    l <span>=</span> m <span>+</span> <span>1</span>
<span>return</span> <span>0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>递推方程：</p>
</li>
</ul>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(⌊</span><span>n</span><span>/2</span><span>⌋)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
<p>​		时间复杂度：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>⌊</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>⌋</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
<ul>
<li>
<p>归并排序</p>
<div><pre><code><span>// 算法 MergeSort(A, l, r)</span>
<span>// 对数组A中l到r的元素进行归并排序</span>
<span>if</span> <span>(</span>l <span>&lt;</span> r<span>)</span>
  then m <span>=</span> <span>floor</span><span>(</span><span>(</span>p <span>+</span> <span>2</span><span>)</span> <span>/</span> <span>2</span><span>)</span>
  		 <span>MergeSort</span><span>(</span>A<span>,</span> l<span>,</span> m<span>)</span> <span>// 子问题1</span>
  		 <span>MergeSort</span><span>(</span>A<span>,</span> m <span>+</span> <span>1</span><span>,</span> r<span>)</span> <span>// 子问题2</span>
  		 <span>Merge</span><span>(</span>A<span>,</span> l<span>,</span> m<span>,</span> r<span>)</span> <span>// 综合解</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>递推方程：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>/2</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span></span></span></span></span></p>
<p>时间复杂度：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
</li>
<li>
<p>汉诺塔问题</p>
<div><pre><code><span>// 算法Hanoi(A, C, n), 将n个盘子从A移动到C</span>
<span>if</span> n <span>=</span> <span>1</span> then <span>move</span><span>(</span>A<span>,</span> C<span>)</span>
<span>else</span>
	<span>Hanoi</span><span>(</span>A<span>,</span> B<span>,</span> n <span>-</span> <span>1</span><span>)</span> <span>// 将n - 1个盘子从A移动到B</span>
	<span>move</span><span>(</span>A<span>,</span> C<span>)</span> <span>// 将一个盘子从A移动到C</span>
	<span>Hanio</span><span>(</span>B<span>,</span> C<span>,</span> n <span>-</span> <span>1</span><span>)</span> <span>// 将n - 1个盘子从B移动到C</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>递推方程：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
<p>时间复杂度：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span><span>2</span><span><span><span><span style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></span></p>
</li>
<li>
<p>芯片测试</p>
</li>
<li>
<p>快速排序</p>
<div><pre><code><span>// QuickSort(A, l, r)</span>
<span>if</span> <span>(</span>l <span>&lt;</span> r<span>)</span>
  then m <span>=</span> <span>Partition</span><span>(</span>A<span>,</span> l<span>,</span> r<span>)</span>
  		 <span>swap</span><span>(</span>A<span>[</span>l<span>]</span><span>,</span> A<span>[</span>m<span>]</span><span>)</span>
  		 <span>QuickSort</span><span>(</span>A<span>,</span> l<span>,</span> m <span>-</span> <span>1</span><span>)</span>
  		 <span>QuickSort</span><span>(</span>A<span>,</span> m <span>+</span> <span>1</span><span>,</span> r<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>// Partition(A, l, r)</span>
x <span>=</span> A<span>[</span>l<span>]</span> <span>// 以首元素为分界点</span>
i <span>=</span> l
j <span>=</span> r <span>+</span> <span>1</span>
<span>while</span><span>(</span>true<span>)</span>
  repeat j<span>--</span>
  until A<span>[</span>j<span>]</span> <span>&lt;=</span> x <span>// 找到小于分界点的元素</span>
  
  repeat i<span>++</span>
  until A<span>[</span>i<span>]</span> <span>></span> x <span>// 找到大于分界点的元素</span>
  
  <span>if</span> <span>(</span>i <span>&lt;</span> j<span>)</span>
    then <span>swap</span><span>(</span>A<span>[</span>i<span>]</span><span>,</span> A<span>[</span>j<span>]</span><span>)</span> <span>// 交换</span>
    <span>else</span> <span>return</span> j
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>递推方程：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>/2</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span></span></span></span></span></p>
<p>时间复杂度：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span></span></p>
</li>
<li>
<p>幂乘算法</p>
<p>问题描述：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>a</span></span></span></span>为给定实数，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>为自然数，求<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.664392em;vertical-align:0em;"></span><span><span>a</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7143919999999999em;vertical-align:0em;"></span><span><span>a</span><span><span><span><span style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:3.537661em;vertical-align:-1.358061em;"></span><span><span><span>(</span></span><span><span><span><span style="height:2.1796em;"><span style="top:-1.4002700000000001em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span><span>a</span><span><span><span><span style="height:0.8220357142857143em;"><span style="top:-2.8220357142857138em;margin-right:0.07142857142857144em;"><span style="height:2.5357142857142856em;"></span><span><span><span>(</span><span>n</span><span>−</span><span>1</span><span>)</span><span>/2</span></span></span></span></span></span></span></span></span><span>×</span><span><span>a</span><span><span><span><span style="height:0.8220357142857143em;"><span style="top:-2.8220357142857138em;margin-right:0.07142857142857144em;"><span style="height:2.5357142857142856em;"></span><span><span><span>(</span><span>n</span><span>−</span><span>1</span><span>)</span><span>/2</span></span></span></span></span></span></span></span></span><span>×</span><span>a</span><span style="margin-right:2.857142857142857em;"></span><span>n</span><span>为奇数</span></span></span></span><span style="top:-4.2029000000000005em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span><span>a</span><span><span><span><span style="height:0.9667142857142857em;"><span style="top:-2.966714285714285em;margin-right:0.07142857142857144em;"><span style="height:2.5357142857142856em;"></span><span><span><span>n</span><span>/2</span></span></span></span></span></span></span></span></span><span>×</span><span><span>a</span><span><span><span><span style="height:0.9667142857142857em;"><span style="top:-2.966714285714285em;margin-right:0.07142857142857144em;"><span style="height:2.5357142857142856em;"></span><span><span><span>n</span><span>/2</span></span></span></span></span></span></span></span></span><span style="margin-right:2.857142857142857em;"></span><span>n</span><span>为偶数</span></span></span></span></span><span>​</span></span><span><span style="height:1.358061em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>递推方程与时间复杂度：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>/2</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span>1</span><span>)</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span></span></p>
<p>用幂乘算法计算Fibonacci数：</p>
<p>Fibonacci数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span>)</span><span style="margin-right:1em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>0</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>，若按照公式求第n个fibonacci数，时间复杂度为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span>n</span><span>)</span></span></span></span>。</p>
<blockquote>
<p>Fibonacci数的性质：</p>
<p>设<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>{</span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>}</span></span></span></span>为Fibonacci数构成的数列，那么</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.40003em;vertical-align:-0.95003em;"></span><span><span style="top:0em;"><span>[</span></span><span><span><span><span><span><span style="height:1.45em;"><span style="top:-3.61em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>n</span><span>+</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.9500000000000004em;"><span></span></span></span></span></span><span style="width:0.5em;"></span><span style="width:0.5em;"></span><span><span><span><span style="height:1.45em;"><span style="top:-3.61em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span style="top:0em;"><span>]</span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:2.454322em;vertical-align:-0.95003em;"></span><span><span><span style="top:0em;"><span>[</span></span><span><span><span><span><span><span style="height:1.45em;"><span style="top:-3.61em;"><span style="height:3em;"></span><span><span>1</span></span></span><span style="top:-2.4099999999999997em;"><span style="height:3em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.9500000000000004em;"><span></span></span></span></span></span><span style="width:0.5em;"></span><span style="width:0.5em;"></span><span><span><span><span style="height:1.45em;"><span style="top:-3.61em;"><span style="height:3em;"></span><span><span>1</span></span></span><span style="top:-2.4099999999999997em;"><span style="height:3em;"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span style="top:0em;"><span>]</span></span></span><span><span><span><span style="height:1.504292em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span></span><span><span style="height:2.454322em;vertical-align:-0.95003em;"></span><span><span>(</span><span><span>2</span></span><span>)</span></span></span></span></span></span></p>
</blockquote>
<p>由上面的定理，令</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.10903em;">M</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:2.40003em;vertical-align:-0.95003em;"></span><span><span style="top:0em;"><span>[</span></span><span><span><span><span><span><span style="height:1.45em;"><span style="top:-3.61em;"><span style="height:3em;"></span><span><span>1</span></span></span><span style="top:-2.4099999999999997em;"><span style="height:3em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.9500000000000004em;"><span></span></span></span></span></span><span style="width:0.5em;"></span><span style="width:0.5em;"></span><span><span><span><span style="height:1.45em;"><span style="top:-3.61em;"><span style="height:3em;"></span><span><span>1</span></span></span><span style="top:-2.4099999999999997em;"><span style="height:3em;"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span style="top:0em;"><span>]</span></span></span></span></span></span></span></p>
<p>可计算<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span><span style="margin-right:0.10903em;">M</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span></span></span></span>求得<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，时间复杂度即为幂乘算法的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span>。</p>
</li>
<li>
<p>平面点对问题</p>
</li>
</ul>
<h4 id="一般性描述"> 一般性描述</h4>
<div><pre><code><span>// Divide-and-Conquer(P)</span>
<span>if</span> <span>|</span>P<span>|</span> <span>&lt;=</span> c then <span>S</span><span>(</span>P<span>)</span>  <span>// 当问题P的规模足够小时，直接求解</span>
divide P into P1<span>,</span>P2<span>,</span>P3<span>.</span><span>.</span><span>.</span>Pk <span>// 将问题P划分为若干个独立的子问题</span>
<span>for</span> i from <span>1</span> to k <span>// 对每个子问题递归求解</span>
  yi <span>=</span> Divide<span>-</span>and<span>-</span><span>Conquer</span><span>(</span>Pi<span>)</span>
<span>return</span> <span>Merge</span><span>(</span>y1<span>,</span>y2<span>,</span>y3<span>.</span><span>.</span><span>.</span>yk<span>)</span> <span>// 合并子问题的解得原始问题的解</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id="设计要点"> 设计要点</h4>
<ul>
<li>原问题可以划分为规模较小的子问题
<ul>
<li>子问题与原问题具有相同的性质</li>
<li>子问题的求解彼此独立</li>
<li>划分时子问题的规模尽可能均衡</li>
</ul>
</li>
<li>子问题规模足够小时可直接求解</li>
<li>子问题的解综合得到原问题的解</li>
<li>算法实现：递归或迭代</li>
</ul>
<h4 id="分治的递推方程"> 分治的递推方程</h4>
<p>分治中有两种情况，一种是子问题的个数是按常数次减少，比如汉诺塔问题。</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:3.1137820000000005em;vertical-align:-1.277669em;"></span><span><span><span><span style="height:1.8361130000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.050005em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:1.277669em;"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span>a</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span><span>i</span><span>)</span></span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>)</span></span></span></span></span></p>
<p>另一种是子问题个数按倍数划分，比如归并排序、二分查找。</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span>a</span><span style="margin-right:0.10764em;">f</span><span>(</span><span><span></span><span><span><span><span style="height:1.10756em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span>b</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>d</span><span>(</span><span>n</span><span>)</span></span></span></span></span></p>
<h4 id="改进途径"> 改进途径</h4>
<p>对于分治的时间<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">aW</span><span>(</span><span>n</span><span>/</span><span>b</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span></span></span></span>，可通过减小a或减小f(n)来改进。</p>
<ul>
<li>
<p>减少子问题个数，利用子问题的依赖关系，使某些子问题的解通过组合其他子问题的解而得到。</p>
<ul>
<li>整数位乘问题</li>
<li>矩阵相乘问题</li>
</ul>
</li>
<li>
<p>增加预处理</p>
<ul>
<li>
<p>平面点对问题</p>
<blockquote>
<p>输入：平面点集P中有n个点，n&gt;1</p>
<p>输出：P中的两个点，其距离最小</p>
<p>蛮力算法：</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>(</span><span>n</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>)</span></span></span></span>个点对，计算最小距离，时间复杂度为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span></p>
<p>分治策略：</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.13889em;">P</span></span></span></span>划分为大小相等的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.13889em;">P</span><span><span><span><span style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>L</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span><span>p</span><span><span><span><span style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.00773em;">R</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<ol>
<li>分别计算<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.13889em;">P</span><span><span><span><span style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>L</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span><span>p</span><span><span><span><span style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.00773em;">R</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中最近点对</li>
<li>计算<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.13889em;">P</span><span><span><span><span style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>L</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span><span>p</span><span><span><span><span style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.00773em;">R</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中各一个点的最近点对</li>
<li>上述情况下的最近点对就是解</li>
</ol>
</blockquote>
<div><pre><code><span>MinDistance</span><span>(</span>P<span>,</span> X<span>,</span> Y<span>)</span>
<span>// 输入：点集P，X、Y为P中点的横纵坐标数组</span>
<span>// 输出：最近的两个点及其距离</span>
<span>1.</span> 若<span>|</span>P<span>|</span> <span>&lt;=</span> <span>3</span>，直接计算其最小距离
<span>2.</span> 排序X、Y
<span>3.</span> 做中垂线L将P划分为Pl和Pr
<span>4.</span> <span>MinDistance</span><span>(</span>Pl<span>,</span> Xl<span>,</span> Yl<span>)</span>
<span>5.</span> <span>MinDistance</span><span>(</span>Pr<span>,</span> Xr<span>,</span> Yr<span>)</span>
<span>6.</span> delta <span>=</span> <span>min</span><span>(</span>delta_left<span>,</span> delta_right<span>)</span> <span>// delta_left, delta_right为子问题的距离</span>
<span>7.</span> 检查距离L不超过delta的两侧各一个点的距离，若小于delta，则更新delta的值
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>上述过程第二步中，每次递归都需要对X、Y排序，因此可以预先对整个点集的X、Y做排序，然后在递归过程中对已排序的X、Y做划分，使得时间复杂度降低。</p>
</li>
</ul>
</li>
</ul>
<h5 id="矩阵相乘问题"> 矩阵相乘问题</h5>
<ul>
<li>
<p>Strassen矩阵乘法：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>2.8075</span></span></span></span></span></span></span></span></span><span>)</span></span></span></span></p>
</li>
<li>
<p>Coppersmith-Winograd算法：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>2.376</span></span></span></span></span></span></span></span></span><span>)</span></span></span></span></p>
</li>
</ul>
<p>矩阵乘法的时间复杂度下界为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.064108em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>)</span></span></span></span>，目前最好的算法是Coppersmith-Winograd算法。</p>
<p>矩阵运算可应用于科学计算、图像处理、决策树等算法。</p>
<h4 id="典型的分治算法"> 典型的分治算法</h4>
<ul>
<li>选择问题
<ul>
<li>选第k小、选第k大。。。</li>
</ul>
</li>
<li>信号平滑处理
<ul>
<li>快速傅立叶变换FFT算法</li>
<li>卷积计算</li>
<li>卷积及应用</li>
</ul>
</li>
<li>计算几何
<ul>
<li>计算平面点集的凸包</li>
</ul>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">最长公共子序列</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="最长公共子序列"> 最长公共子序列</h3>
<h4 id="问题描述"> 问题描述</h4>
<p>给定两个序列<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.07847em;">X</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>，且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>∣</span><span style="margin-right:0.07847em;">X</span><span>∣</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>m</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>∣</span><span style="margin-right:0.22222em;">Y</span><span>∣</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span>n</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>m</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72243em;vertical-align:-0.0391em;"></span><span style="margin-right:0.07847em;">X</span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72243em;vertical-align:-0.0391em;"></span><span style="margin-right:0.22222em;">Y</span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span></span></p>
<p>求<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>的最长公共子序列。</p>
<h4 id="实例"> 实例</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span><span style="margin-right:0.2777777777777778em;"></span><span>:</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.68333em;vertical-align:0em;"></span><span>A</span><span style="margin-right:1em;"></span><span style="margin-right:0.05017em;color:red;">B</span><span style="color:red;margin-right:1em;"></span><span style="margin-right:0.07153em;color:red;">C</span><span style="color:red;margin-right:1em;"></span><span style="margin-right:0.05017em;color:red;">B</span><span style="color:red;margin-right:1em;"></span><span style="margin-right:0.02778em;color:red;">D</span><span style="color:red;margin-right:1em;"></span><span style="color:red;">A</span><span style="color:red;margin-right:1em;"></span><span style="margin-right:0.05017em;color:red;">B</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span><span style="margin-right:0.2777777777777778em;"></span><span>:</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.05017em;color:red;">B</span><span style="color:red;margin-right:1em;"></span><span style="margin-right:0.02778em;color:red;">D</span><span style="color:red;margin-right:1em;"></span><span style="margin-right:0.07153em;color:red;">C</span><span style="color:red;margin-right:1em;"></span><span style="color:red;">A</span><span style="color:red;margin-right:1em;"></span><span style="margin-right:0.05017em;color:red;">B</span><span style="color:red;margin-right:1em;"></span><span style="color:red;">A</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span><span style="margin-right:0.05764em;">CS</span><span style="margin-right:0.2777777777777778em;"></span><span>:</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.05017em;">B</span><span style="margin-right:1em;"></span><span style="margin-right:0.07153em;">C</span><span style="margin-right:1em;"></span><span style="margin-right:0.05017em;">B</span><span style="margin-right:1em;"></span><span>A</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span><span style="margin-right:0.05764em;">CS</span></span></span></span>长度：4</p>
<h4 id="蛮力算法"> 蛮力算法</h4>
<p>检查<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>的每个子序列是否在<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>中存在，其中<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.664392em;vertical-align:0em;"></span><span><span>2</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span></span></span></span></span></span></span></span>个子序列，每次检查<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>中是否存在需要O(n)时间。因此<strong>蛮力算法最坏情况下时间复杂度</strong>为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span><span>2</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span></span></span></span></span><span>)</span></span></span></span>。</p>
<h4 id="子问题界定"> 子问题界定</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>的终止位置是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>的终止位置是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.85396em;vertical-align:-0.19444em;"></span><span style="margin-right:0.05724em;">j</span></span></span></span>，由参数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.85396em;vertical-align:-0.19444em;"></span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span></span></span></span>界定子问题。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi6vvu5cxrj30ws0i0mxx.jpg" alt="image-20200828221509831" /></p>
<p>设<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72243em;vertical-align:-0.0391em;"></span><span style="margin-right:0.07847em;">X</span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span><span><span style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.22222em;">Y</span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span>，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72243em;vertical-align:-0.0391em;"></span><span style="margin-right:0.07153em;">Z</span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.04398em;">z</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.04398em;">z</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.04398em;">z</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span>为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span><span style="margin-right:0.05764em;">CS</span></span></span></span>，那么</p>
<ol>
<li>
<p>若<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.04398em;">z</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，且<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.891661em;vertical-align:-0.208331em;"></span><span><span style="margin-right:0.07153em;">Z</span><span><span><span><span style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.891661em;vertical-align:-0.208331em;"></span><span><span style="margin-right:0.07847em;">X</span><span><span><span><span style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>m</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>与<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.891661em;vertical-align:-0.208331em;"></span><span><span style="margin-right:0.22222em;">Y</span><span><span><span><span style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span><span style="margin-right:0.05764em;">CS</span></span></span></span></p>
</li>
<li>
<p>若<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span><span>=</span></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.04398em;">z</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span><span>=</span></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span></span></span></span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07153em;">Z</span></span></span></span>是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.891661em;vertical-align:-0.208331em;"></span><span><span style="margin-right:0.07847em;">X</span><span><span><span><span style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>m</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>与<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span><span style="margin-right:0.05764em;">CS</span></span></span></span></p>
</li>
<li>
<p>若<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>m</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span><span>=</span></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.04398em;">z</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span><span><span><span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span><span></span></span></span><span></span></span></span></span></span><span>=</span></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span></span></span></span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07153em;">Z</span></span></span></span>是<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>与<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.891661em;vertical-align:-0.208331em;"></span><span><span style="margin-right:0.22222em;">Y</span><span><span><span><span style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>n</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span><span style="margin-right:0.05764em;">CS</span></span></span></span></p>
</li>
</ol>
<h4 id="优化函数的递推方程"> 优化函数的递推方程</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>子序列：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.07847em;">X</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>子序列：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.22222em;">Y</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.83333em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.07847em;">X</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.969438em;vertical-align:-0.286108em;"></span><span><span style="margin-right:0.22222em;">Y</span><span><span><span><span style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.05724em;">j</span></span></span></span><span>​</span></span><span><span style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>L</span><span style="margin-right:0.05764em;">CS</span></span></span></span>的长度</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>有如下规律：</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \mbox at position 20: …j]=0 \qquad i=0\̲m̲b̲o̲x̲{ 或 }j=0
'>C[i,j]=0 \qquad i=0\mbox{ 或 }j=0
</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \mbox at position 36: …\qquad i,j &gt; 0 \̲m̲b̲o̲x̲{ 且 } x_i=y_j
'>C[i,j]=C[i-1,j-1]+1 \qquad i,j &gt; 0 \mbox{ 且 } x_i=y_j
</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \mbox at position 49: …} \qquad i,j&gt;0 \̲m̲b̲o̲x̲{ 且 } x_i \ne y…'>C[i,j] = max\{C[i,j-1], C[i-1,j]\} \qquad i,j&gt;0 \mbox{ 且 } x_i \ne y_j
</p>
<h4 id="标记函数"> 标记函数</h4>
<p>标记函数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span>]</span></span></span></span>的值有三种情况：</p>
<ul>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.85396em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span> </span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>↖</span></span></span></span></li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span> </span></span><span><span style="height:0.36687em;vertical-align:0em;"></span><span>←</span></span></span></span></li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07153em;">C</span><span>[</span><span>i</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span> </span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>↑</span></span></span></span></li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi7mh870vuj30v20e0q3o.jpg" alt="image-20200829133500441" /></p>
<h4 id="算法伪代码"> 算法伪代码</h4>
<div><pre><code><span>for</span> i from <span>1</span> to m
  <span>do</span> C<span>[</span>i<span>,</span> <span>0</span><span>]</span> <span>=</span> <span>0</span>
<span>for</span> i from <span>1</span> to n
  <span>do</span> C<span>[</span><span>0</span><span>,</span> j<span>]</span> <span>=</span> <span>0</span>

<span>for</span> i from <span>1</span> to m
  <span>for</span> j from <span>1</span> to n
    <span>if</span> X<span>[</span>i<span>]</span> <span>=</span> Y<span>[</span>j<span>]</span> <span>// 最后一个元素相同</span>
      then C<span>[</span>i<span>,</span> j<span>]</span> <span>=</span> C<span>[</span>i<span>-</span><span>1</span><span>,</span> j<span>-</span><span>1</span><span>]</span> <span>+</span> <span>1</span>
      		 B<span>[</span>i<span>,</span> j<span>]</span> <span>=</span> <span>'left-top'</span>
    <span>else</span> <span>if</span> C<span>[</span>i<span>-</span><span>1</span><span>,</span> j<span>]</span> <span>>=</span> C<span>[</span>i<span>,</span> j<span>-</span><span>1</span><span>]</span>
      then C<span>[</span>i<span>,</span> j<span>]</span> <span>=</span> C<span>[</span>i<span>-</span><span>1</span><span>,</span> j<span>]</span>
      		 B<span>[</span>i<span>,</span> j<span>]</span> <span>=</span> <span>'top'</span>
    <span>else</span>
      C<span>[</span>i<span>,</span> j<span>]</span> <span>=</span> C<span>[</span>i<span>,</span> j<span>-</span><span>1</span><span>]</span>
      B<span>[</span>i<span>,</span> j<span>]</span> <span>=</span> <span>'left'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h4 id="追踪解"> 追踪解</h4>
<div><pre><code><span>// 算法Structure Sequence(B, i, j)</span>
<span>// 输入：B[i, j]</span>
<span>// 输出：X与Y的最长公共子序列</span>
<span>StructureSequence</span><span>(</span>B<span>,</span> i<span>,</span> j<span>)</span> <span>{</span>
  <span>if</span> i <span>==</span> <span>0</span> or j <span>==</span> <span>0</span>
    then <span>return</span>
	<span>// 如果最后一个字符相同，直接输出</span>
	<span>if</span> B<span>[</span>i<span>,</span> j<span>]</span> <span>==</span> <span>'left-top'</span>
  	then print X<span>[</span>i<span>]</span>
  			 <span>StructureSequence</span><span>(</span>B<span>,</span> i <span>-</span> <span>1</span><span>,</span> j <span>-</span> <span>1</span><span>)</span>
  <span>else</span> <span>if</span> B<span>[</span>i<span>,</span> j<span>]</span> <span>==</span> <span>'top'</span>
    then <span>StructureSequence</span><span>(</span>B<span>,</span> i <span>-</span> <span>1</span><span>,</span> j<span>)</span>
  <span>else</span>
    <span>StructureSequence</span><span>(</span>B<span>,</span> i<span>,</span> j <span>-</span> <span>1</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h4 id="实例-2"> 实例</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72243em;vertical-align:-0.0391em;"></span><span style="margin-right:0.07847em;">X</span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span>A</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05017em;">B</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.07153em;">C</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05017em;">B</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.02778em;">D</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>A</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05017em;">B</span><span>,</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.72243em;vertical-align:-0.0391em;"></span><span style="margin-right:0.22222em;">Y</span><span style="margin-right:0.2777777777777778em;"></span><span>=&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.05017em;">B</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.02778em;">D</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.07153em;">C</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>A</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05017em;">B</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>A</span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span></p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↖</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>5</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=←</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>6</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↖</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#f00;"><span style="margin-right:0.05017em;color:#f00;">B</span><span style="color:#f00;">[</span><span style="color:#f00;">2</span><span style="color:#f00;">,</span><span style="color:#f00;margin-right:0.16666666666666666em;"></span><span style="color:#f00;">1</span><span style="color:#f00;">]</span><span style="color:#f00;margin-right:0.2777777777777778em;"></span><span style="color:#f00;">=↖</span></span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#007fff;"><span style="margin-right:0.05017em;color:#007fff;">B</span><span style="color:#007fff;">[</span><span style="color:#007fff;">2</span><span style="color:#007fff;">,</span><span style="color:#007fff;margin-right:0.16666666666666666em;"></span><span style="color:#007fff;">2</span><span style="color:#007fff;">]</span><span style="color:#007fff;margin-right:0.2777777777777778em;"></span><span style="color:#007fff;">=←</span></span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=←</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>5</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↖</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>6</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=←</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#f00;"><span style="margin-right:0.05017em;color:#f00;">B</span><span style="color:#f00;">[</span><span style="color:#f00;">3</span><span style="color:#f00;">,</span><span style="color:#f00;margin-right:0.16666666666666666em;"></span><span style="color:#f00;">3</span><span style="color:#f00;">]</span><span style="color:#f00;margin-right:0.2777777777777778em;"></span><span style="color:#f00;">=↖</span></span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#007fff;"><span style="margin-right:0.05017em;color:#007fff;">B</span><span style="color:#007fff;">[</span><span style="color:#007fff;">3</span><span style="color:#007fff;">,</span><span style="color:#007fff;margin-right:0.16666666666666666em;"></span><span style="color:#007fff;">4</span><span style="color:#007fff;">]</span><span style="color:#007fff;margin-right:0.2777777777777778em;"></span><span style="color:#007fff;">=←</span></span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>5</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>6</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>4</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>4</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>4</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>4</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#f00;"><span style="margin-right:0.05017em;color:#f00;">B</span><span style="color:#f00;">[</span><span style="color:#f00;">4</span><span style="color:#f00;">,</span><span style="color:#f00;margin-right:0.16666666666666666em;"></span><span style="color:#f00;">5</span><span style="color:#f00;">]</span><span style="color:#f00;margin-right:0.2777777777777778em;"></span><span style="color:#f00;">=↖</span></span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>4</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>6</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=←</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#007fff;"><span style="margin-right:0.05017em;color:#007fff;">B</span><span style="color:#007fff;">[</span><span style="color:#007fff;">5</span><span style="color:#007fff;">,</span><span style="color:#007fff;margin-right:0.16666666666666666em;"></span><span style="color:#007fff;">5</span><span style="color:#007fff;">]</span><span style="color:#007fff;margin-right:0.2777777777777778em;"></span><span style="color:#007fff;">=↑</span></span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>6</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>6</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>6</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>6</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>6</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↖</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>6</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>5</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#f00;"><span style="margin-right:0.05017em;color:#f00;">B</span><span style="color:#f00;">[</span><span style="color:#f00;">6</span><span style="color:#f00;">,</span><span style="color:#f00;margin-right:0.16666666666666666em;"></span><span style="color:#f00;">6</span><span style="color:#f00;">]</span><span style="color:#f00;margin-right:0.2777777777777778em;"></span><span style="color:#f00;">=↖</span></span></span></span></span></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>7</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>7</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>7</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>7</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>4</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.05017em;">B</span><span>[</span><span>7</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>5</span><span>]</span><span style="margin-right:0.2777777777777778em;"></span><span>=↑</span></span></span></span></td>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="color:#007fff;"><span style="margin-right:0.05017em;color:#007fff;">B</span><span style="color:#007fff;">[</span><span style="color:#007fff;">7</span><span style="color:#007fff;">,</span><span style="color:#007fff;margin-right:0.16666666666666666em;"></span><span style="color:#007fff;">6</span><span style="color:#007fff;">]</span><span style="color:#007fff;margin-right:0.2777777777777778em;"></span><span style="color:#007fff;">=↑</span></span></span></span></span></td>
</tr>
</tbody>
</table>
<p>每当遇到标记函数值为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>↗</span></span></span></span>时，表示此时<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span><span style="margin-right:0.22222em;">Y</span></span></span></span>的元素相同，可作为解的一个元素。根据上表，可得</p>
<p>解：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.07847em;">X</span><span>[</span><span>2</span><span>]</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.07847em;">X</span><span>[</span><span>3</span><span>]</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.07847em;">X</span><span>[</span><span>4</span><span>]</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.07847em;">X</span><span>[</span><span>6</span><span>]</span></span></span></span></p>
<p>​		<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.22222em;">Y</span><span>[</span><span>1</span><span>]</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.22222em;">Y</span><span>[</span><span>3</span><span>]</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.22222em;">Y</span><span>[</span><span>5</span><span>]</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.22222em;">Y</span><span>[</span><span>6</span><span>]</span></span></span></span>，</p>
<p>​		即 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span style="color:red;"><span style="margin-right:0.05017em;color:red;">B</span><span style="color:red;">,</span><span style="color:red;margin-right:0.16666666666666666em;"></span><span style="margin-right:0.07153em;color:red;">C</span><span style="color:red;">,</span><span style="color:red;margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05017em;color:red;">B</span><span style="color:red;">,</span><span style="color:red;margin-right:0.16666666666666666em;"></span><span style="color:red;">A</span></span></span></span></span></p>
<h4 id="时间空间复杂度"> 时间空间复杂度</h4>
<ul>
<li>计算优化函数和标记函数
<ul>
<li>赋初始值：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>m</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span></li>
<li>计算优化函数、标记函数：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span>mn</span><span>)</span></span></span></span></li>
</ul>
</li>
<li>构造解：每步缩小<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07847em;">X</span></span></span></span>或<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">Y</span></span></span></span>的一个元素，时间<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span>m</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>n</span><span>)</span></span></span></span></li>
</ul>
<p><font color=red>时间复杂度</font>：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span>mn</span><span>)</span></span></span></span></p>
<p><font color=red>空间复杂度</font>：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span>mn</span><span>)</span></span></span></span></p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">背包问题</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="背包问题"> 背包问题</h3>
<h4 id="问题描述"> 问题描述</h4>
<p>一个旅行者有一个背包，及<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>种物品，每种物品的重量为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>价值为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，背包最大重量为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span>b</span></span></span></span>，每种物品可放多个。如何选择物品使得背包价值最大？假设<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>b</span></span></span></span>都是正整数。</p>
<h4 id="实例"> 实例</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>4</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>b</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>10</span></span></span></span></p>
<p>物品1：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></p>
<p>物品2：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span></span></span></span></p>
<p>物品3：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>4</span></span></span></span></p>
<p>物品4：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>9</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>7</span></span></span></span></p>
<h4 id="问题建模"> 问题建模</h4>
<p>设解为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span>，其中<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是装入背包的第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span></span></span></span>种物品的个数。</p>
<p>目标函数：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.929066em;vertical-align:-1.277669em;"></span><span>ma</span><span>x</span><span style="margin-right:0.16666666666666666em;"></span><span><span><span><span style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.050005em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span style="height:3.05em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:1.277669em;"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>约束条件：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.929066em;vertical-align:-1.277669em;"></span><span><span><span><span style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.050005em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span style="height:3.05em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:1.277669em;"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span><span>b</span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>∈</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.10903em;">N</span></span></span></span></p>
<h4 id="子问题界定和计算顺序"> 子问题界定和计算顺序</h4>
<ul>
<li>
<p>子问题界定：由参数<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span>界定，其中</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>：考虑对物品<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>的选择</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span>：背包总重量不超过<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span></p>
</li>
<li>
<p>子问题计算顺序</p>
<p>令<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span></span></span></span></p>
<p>对于给定的<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>，令<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>b</span></span></span></span></p>
</li>
</ul>
<h4 id="优化函数的递推方程"> 优化函数的递推方程</h4>
<p>考虑装前<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>种物品，总重量不超过<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span>，设此时背包能达到的最大价值为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span></span></span></span>，有递推方程：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>ma</span><span>x</span><span>{</span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span>,</span><span> </span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>}</span></span></span></span></span></p>
<p>当<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span></span></span></span>时，有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>−</span><span>∞</span></span></span></span>。</p>
<p>将<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>值代入，可得：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>0</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>b</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>0</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>0</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.83041em;vertical-align:-0.13597em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1.94356em;vertical-align:-0.8360000000000001em;"></span><span>⌊</span><span><span></span><span><span><span><span style="height:1.1075599999999999em;"><span style="top:-2.3139999999999996em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">y</span></span></span></span><span>​</span></span><span><span style="height:0.8360000000000001em;"><span></span></span></span></span></span><span></span></span><span>⌋</span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h4 id="标记函数"> 标记函数</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span></span></span></span>：装前<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>种物品，总重不超过<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span></span></span></span>，背包达到最大价值时装入物品的最大标号。</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：装入第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>件物品后背包的最大价值。</p>
<p>当装入前<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.77777em;vertical-align:-0.08333em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>件物品的最大价值大于装入第<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>件物品时，最大标号取<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.208331em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span></span></span></span>，否则取<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span style="margin-right:0.03148em;">k</span></span></span></span>。</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:3.5026300000000004em;vertical-align:-1.47473em;"></span><span><span><span>(</span></span><span><span><span><span style="height:2.0279000000000003em;"><span style="top:-1.4002700000000001em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span style="margin-right:2.857142857142857em;"></span><span style="margin-right:2.857142857142857em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.34480000000000005em;"><span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.21074999999999994em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span>≤</span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>−</span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span>)</span><span>+</span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.2029000000000005em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span><span>i</span><span><span><span><span style="height:0.34480000000000005em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.21074999999999994em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span style="margin-right:2.857142857142857em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.34480000000000005em;"><span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span><span style="margin-right:0.03148em;">k</span><span>−</span><span>1</span></span></span></span></span><span>​</span></span><span><span style="height:0.21074999999999994em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span>&gt;</span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>−</span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span>)</span><span>+</span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:1.47473em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:3.389846em;vertical-align:-1.435838em;"></span><span><span><span>(</span></span><span><span><span><span style="height:1.954008em;"><span style="top:-1.4002700000000001em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>1</span><span style="margin-right:2.857142857142857em;"></span><span style="margin-right:0.03588em;">y</span><span>≥</span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.2029000000000005em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>0</span><span style="margin-right:2.857142857142857em;"></span><span style="margin-right:0.03588em;">y</span><span>&lt;</span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span style="height:2.5em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:1.435838em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h4 id="计算过程"> 计算过程</h4>
<p>针对实例：</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span>4</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>b</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>10</span></span></span></span></p>
<p>物品1：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></p>
<p>物品2：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>3</span></span></span></span></p>
<p>物品3：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>4</span></span></span></span></p>
<p>物品4：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>9</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>7</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.13889em;">F</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span></span></span></span>的计算结果如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>↓</span><span style="margin-right:1em;"></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>→</span></span></span></span></th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
<td style="text-align:center">10</td>
<td style="text-align:center">11</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center">10</td>
<td style="text-align:center"><font color="red"><strong>12</strong></font></td>
</tr>
</tbody>
</table>
<p>由上表可知，最优解中，背包能达到最大的价值为12。</p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.03148em;">k</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span style="margin-right:0.03588em;">y</span><span>)</span></span></span></span>的计算如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03148em;">k</span><span style="margin-right:0.2777777777777778em;"></span><span>↓</span><span style="margin-right:1em;"></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.625em;vertical-align:-0.19444em;"></span><span style="margin-right:0.03588em;">y</span><span style="margin-right:0.2777777777777778em;"></span><span>→</span></span></span></span></th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><font color="red"><strong>0</strong></font></td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center"><font color="red"><strong>2</strong></font></td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center"><font color="red"><strong>4</strong></font></td>
</tr>
</tbody>
</table>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>10</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>4</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≥</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>10</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>3</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≥</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span></span></span></span></p>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0147199999999998em;vertical-align:-0.3551999999999999em;"></span><span><span>i</span><span><span><span><span style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>(</span></span></span></span><span>​</span></span><span><span style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span>3</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span><span>i</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>(</span><span>0</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span><span style="margin-right:0.2777777777777778em;"></span><span>⇒</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span></span></span></span></p>
<p>综上可得解：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>4</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>，最大价值<strong>12</strong></p>
<h4 id="时间复杂度"> 时间复杂度</h4>
<p>时间复杂度O(nb)。</p>
<h4 id="背包问题的推广"> 背包问题的推广</h4>
<ul>
<li><strong>0-1背包问题</strong>：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.85396em;vertical-align:-0.19444em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span></span></span></span></li>
<li><strong>多背包问题</strong>：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>m</span></span></span></span>个背包，背包<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.85396em;vertical-align:-0.19444em;"></span><span style="margin-right:0.05724em;">j</span></span></span></span>最大重量为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.969438em;vertical-align:-0.286108em;"></span><span><span style="margin-right:0.05017em;">B</span><span><span><span><span style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.05724em;">j</span></span></span></span><span>​</span></span><span><span style="height:0.286108em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.05724em;">j</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>m</span></span></span></span>，在满足所有背包的约束条件下使得物品价值最大。</li>
<li><strong>二维背包</strong>：每件物品有重量<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和体积<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.85396em;vertical-align:-0.19444em;"></span><span><span>t</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span></span></span></span>，背包重量不超过<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span>b</span></span></span></span>，体积不超过<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.22222em;">V</span></span></span></span>，使物品价值最大。</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">n皇后问题</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%9B%9E%E6%BA%AF/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%9B%9E%E6%BA%AF/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="n皇后问题"> n皇后问题</h3>
<h4 id="问题描述"> 问题描述</h4>
<p>在<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.66666em;vertical-align:-0.08333em;"></span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>×</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>的棋盘上放置n个皇后，使得每个皇后之间不相互攻击，求所有可能的放法。</p>
<h4 id="建模"> 建模</h4>
<ul>
<li>解：向量<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span></span></span></span></li>
</ul>
<h4 id="实例"> 实例</h4>
<p>以四皇后问题为例，求解过程如下：</p>
<Mermaid id="mermaid_382ee169" :graph="$dataBlock.mermaid_382ee169"></Mermaid>]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">回溯算法</title>
    <id>https://melogra.github.io/blog/algorithm/%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E5%9B%9E%E6%BA%AF/%E5%9B%9E%E6%BA%AF/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="回溯算法"> 回溯算法</h3>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">算法的研究内容</title>
    <id>https://melogra.github.io/blog/algorithm/%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <updated>2021-01-20T14:50:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="算法的研究内容"> 算法的研究内容</h2>
<h3 id="算法设计"> 算法设计</h3>
<h4 id="问题建模"> 问题建模</h4>
<p>对输入参数和解给出形式化或半形式化的描述。</p>
<ul>
<li>输入</li>
<li>输出</li>
<li>目标函数</li>
<li>解</li>
</ul>
<h4 id="设计算法"> 设计算法</h4>
<ol>
<li>选择算法设计技术（算法思想）</li>
<li>该算法是否对所有实例都有最优解，如果不是，找到反例</li>
</ol>
<h4 id="分析算法-时间空间效率"> 分析算法（时间空间效率）</h4>
<h5 id="时间复杂度"> 时间复杂度</h5>
<ul>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>))</span></span></span></span>: 时间复杂度的渐进上界为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>)</span></span></span></span></li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Ω</span><span>(</span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>))</span></span></span></span>: 时间复杂度的渐进下界为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>)</span></span></span></span></li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>o</span><span>(</span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>))</span></span></span></span>: <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span></span></span></span>比<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>)</span></span></span></span>低阶</li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">ω</span><span>(</span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>))</span></span></span></span>: <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span></span></span></span>比<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>)</span></span></span></span>高阶</li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>Θ</span><span>(</span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>))</span></span></span></span>: <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span></span></span></span>与<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.03588em;">g</span><span>(</span><span>n</span><span>)</span></span></span></span>同阶</li>
</ul>
<h5 id="阶的高低"> 阶的高低</h5>
<ul>
<li>指数级：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.69444em;vertical-align:0em;"></span><span><span>2</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span><span>、</span><span><span>3</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span><span>、</span><span>n</span><span>!</span><span style="margin-right:1em;"></span><span style="margin-right:0.16666666666666666em;"></span><span>…</span></span></span></span></li>
<li>多项式级：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span>n</span><span>、</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span></span></span></span></span><span>、</span><span><span>n</span><span><span><span><span style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>3</span></span></span></span></span></span></span></span><span>、</span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>、</span><span><span>n</span><span><span><span><span style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>1/2</span></span></span></span></span></span></span></span></span><span style="margin-right:1em;"></span><span style="margin-right:0.16666666666666666em;"></span><span>…</span></span></span></span></li>
<li>对数多项式级：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>、</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>2</span><span>n</span><span>、</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span style="margin-right:1em;"></span><span style="margin-right:0.16666666666666666em;"></span><span>…</span></span></span></span></li>
</ul>
<h3 id="计算复杂性"> 计算复杂性</h3>
<p>P-NP, NP-hard, NP-complete</p>
<h4 id="np-hard问题"> NP-hard问题</h4>
<ul>
<li>旅行问题</li>
<li>0-1背包问题</li>
<li>双机调度问题</li>
</ul>
<h2 id="算法分析"> 算法分析</h2>
<h3 id="迭代与序列求和"> 迭代与序列求和</h3>
<h4 id="序列求和公式"> 序列求和公式</h4>
<ul>
<li>等差数列</li>
<li>等比数列</li>
<li>调和级数</li>
</ul>
<h4 id="估计序列和"> 估计序列和</h4>
<ul>
<li>放大法求上界</li>
<li>积分求渐进界</li>
</ul>
<h3 id="递推方程"> 递推方程</h3>
<h4 id="fibonacci数"> Fibonacci数</h4>
<ul>
<li>Fibonacci数: <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>{</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>3</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>5</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>8</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>13</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>21</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>}</span></span></span></span></li>
<li>递推方程: <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span>)</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span><span style="margin-right:0.2777777777777778em;"></span><span>≥</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>2</span></span></span></span></li>
<li>初值: <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>0</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></li>
</ul>
<h4 id="汉诺塔问题"> 汉诺塔问题</h4>
<div><pre><code><span>// 算法Hanoi(A, C, n), 将n个盘子从A移动到C</span>
<span>if</span> n <span>=</span> <span>1</span> then <span>move</span><span>(</span><span>A</span><span>,</span> <span>C</span><span>)</span>
<span>else</span>
	<span>Hanoi</span><span>(</span><span>A</span><span>,</span> <span>B</span><span>,</span> n <span>-</span> <span>1</span><span>)</span> <span>// 将n - 1个盘子从A移动到B</span>
	<span>move</span><span>(</span><span>A</span><span>,</span> <span>C</span><span>)</span> <span>// 将一个盘子从A移动到C</span>
	<span>Hanio</span><span>(</span><span>B</span><span>,</span> <span>C</span><span>,</span> n <span>-</span> <span>1</span><span>)</span> <span>// 将n - 1个盘子从B移动到C</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>递推方程：</p>
<ul>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>2</span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></p>
</li>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></p>
</li>
<li>
<p>解：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.747722em;vertical-align:-0.08333em;"></span><span><span>2</span><span><span><span><span style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span></p>
</li>
</ul>
<h4 id="插入排序"> 插入排序</h4>
<p>递推方程：</p>
<ul>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>(</span><span>n</span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>1</span><span>)</span></span></span></span></li>
<li><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">W</span><span>(</span><span>1</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>0</span></span></span></span></li>
</ul>
<h4 id="递推方程求解定理"> 递推方程求解定理</h4>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span>a</span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>/</span><span>b</span><span>)</span><span style="margin-right:0.2222222222222222em;"></span><span>+</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.10764em;">f</span><span>(</span><span>n</span><span>)</span></span></span></span></p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">贪心算法</title>
    <id>https://melogra.github.io/blog/algorithm/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="贪心算法"> 贪心算法</h3>
<h4 id="设计要素"> 设计要素</h4>
<ul>
<li>
<p>贪心算法适合于<strong>组合优化问题</strong></p>
</li>
<li>
<p>求解过程是多步判断过程，最终的判断序列对应于问题的最优解</p>
</li>
<li>
<p><strong>依据某种“短视的”贪心策略判断，策略的好坏决定算法的成败</strong></p>
</li>
<li>
<p><strong>贪心法必须进行正确性证明</strong></p>
</li>
<li>
<p>证明贪心法不正确：举反例</p>
</li>
</ul>
<p>贪心算法有<strong>算法简单、时间空间复杂度低</strong>的优势。</p>
<h4 id="活动选择问题"> 活动选择问题</h4>
<h5 id="问题描述"> 问题描述</h5>
<p>输入：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.05764em;">S</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span></span></span></span></span>为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>项活动的集合，<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.980548em;vertical-align:-0.286108em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.05724em;">j</span></span></span></span><span>​</span></span><span><span style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>分别为活动<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span></span></span></span>的开始和结束时间。</p>
<p>约束条件：活动<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span></span></span></span>与活动<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.85396em;vertical-align:-0.19444em;"></span><span style="margin-right:0.05724em;">j</span></span></span></span>相容<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.682em;vertical-align:-0.011em;"></span><span style="margin-right:1em;"></span><span>⇌</span><span style="margin-right:1em;"></span></span></span></span> <span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \mbox at position 13: s_i \ge f_j \̲m̲b̲o̲x̲{ 或 } s_j \ge f…'>s_i \ge f_j \mbox{ 或 } s_j \ge f_i</span></p>
<p>求：最大的两两相容的活动集合<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span>A</span></span></span></span>。</p>
<h5 id="实例"> 实例</h5>
<table>
<thead>
<tr>
<th style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span></span></span></span></th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
<th style="text-align:center">10</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">2</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center"><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center">11</td>
<td style="text-align:center">12</td>
<td style="text-align:center">13</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>策略1：先到先服务（开始时间早的优先）</p>
<ul>
<li>
<p>排序使得<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>⋯</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从前先后挑选</p>
</li>
<li>
<p><font color=red>错误策略</font>，反例：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi84kc0motj312i09o3zg.jpg" alt="image-20200830000059459" /></p>
</li>
</ul>
</li>
<li>
<p>策略2：短任务优先（占用时间短的优先）</p>
<ul>
<li>
<p>排序使得<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>⋯</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2222222222222222em;"></span><span>−</span><span style="margin-right:0.2222222222222222em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>s</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从前先后挑选</p>
</li>
<li>
<p><font color=red>错误策略</font>，反例：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi84ludqp1j311a09kab1.jpg" alt="image-20200830000228157" /></p>
</li>
</ul>
</li>
<li>
<p>策略3：结束时间早的优先（<font color=green>正确策略，正确性需证明</font>）</p>
<ul>
<li>排序使得<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>⋯</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span><span style="margin-right:0.10764em;">f</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从前先后挑选</li>
</ul>
</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi842diwj1j317o0icad7.jpg" alt="image-20200829234315889" /></p>
<h5 id="算法伪代码"> 算法伪代码</h5>
<div><pre><code><span>// 算法GreedySelect</span>
<span>// 输入：根据结束时间排序的活动集S</span>
<span>// 输出：两两相容的最大活动集合A</span>
n <span>=</span> <span>|</span>S<span>|</span>
A<span>.</span><span>push</span><span>(</span><span>1</span><span>)</span>
j <span>=</span> <span>1</span>
<span>for</span> i from <span>2</span> to n
  <span>if</span> start_i <span>>=</span> finish_j
    then A<span>.</span><span>push</span><span>(</span>i<span>)</span>
    		 j <span>=</span> i
<span>return</span> A
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h5 id="时间复杂度"> 时间复杂度</h5>
<p>根据结束时间排序：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span></p>
<p>选出活动集合：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span>)</span></span></span></span></p>
<p><font color=red>时间复杂度：</font><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span>n</span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>n</span><span>)</span></span></span></span></p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">最优装载问题</title>
    <id>https://melogra.github.io/blog/algorithm/%E8%B4%AA%E5%BF%83/%E6%9C%80%E4%BC%98%E8%A3%85%E8%BD%BD%E9%97%AE%E9%A2%98/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E8%B4%AA%E5%BF%83/%E6%9C%80%E4%BC%98%E8%A3%85%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="最优装载问题"> 最优装载问题</h3>
<h4 id="问题描述"> 问题描述</h4>
<p>有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.43056em;vertical-align:0em;"></span><span>n</span></span></span></span>个集装箱<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span>{</span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span><span>}</span></span></span></span>，集装箱<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.65952em;vertical-align:0em;"></span><span>i</span></span></span></span>的重量为<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，轮船重量限制<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07153em;">C</span></span></span></span>，无体积限制，每个集装箱重量有<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.68333em;vertical-align:0em;"></span><span style="margin-right:0.07153em;">C</span></span></span></span>，求如何装载最多个集装箱。</p>
<p>该问题是0-1背包问题的子问题，相当于每个集装箱的价值<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.64444em;vertical-align:0em;"></span><span>1</span></span></span></span>。</p>
<h4 id="问题建模"> 问题建模</h4>
<p>解：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.5782em;vertical-align:-0.0391em;"></span><span>&lt;</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>&gt;</span><span style="margin-right:1em;"></span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span></span></span></span></p>
<p>目标函数：<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.929066em;vertical-align:-1.277669em;"></span><span>ma</span><span>x</span><span style="margin-right:0.16666666666666666em;"></span><span><span><span><span style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.050005em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span style="height:3.05em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:1.277669em;"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>约束条件：</p>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.929066em;vertical-align:-1.277669em;"></span><span><span><span><span style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.050005em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span style="height:3.05em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:1.277669em;"><span></span></span></span></span></span><span style="margin-right:0.16666666666666666em;"></span><span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span><span style="margin-right:0.03588em;">v</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span><span style="margin-right:0.07153em;">C</span><span style="margin-right:1em;"></span><span><span>x</span><span><span><span><span style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span><span>0</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>1</span><span style="margin-right:1em;"></span><span>i</span><span style="margin-right:0.2777777777777778em;"></span><span>=</span><span style="margin-right:0.2777777777777778em;"></span><span>1</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>2</span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>…</span><span style="margin-right:0.16666666666666666em;"></span><span>,</span><span style="margin-right:0.16666666666666666em;"></span><span>n</span></span></span></span></span></span></p>
<h4 id="算法设计"> 算法设计</h4>
<ul>
<li>贪心策略：轻者优先</li>
<li>算法设计：将集装箱排序，使得<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>1</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>2</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span>⋯</span><span style="margin-right:0.2777777777777778em;"></span><span>≤</span><span style="margin-right:0.2777777777777778em;"></span></span><span><span style="height:0.58056em;vertical-align:-0.15em;"></span><span><span style="margin-right:0.02691em;">w</span><span><span><span><span style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>n</span></span></span></span><span>​</span></span><span><span style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从小到大装箱直到继续装入会超重。</li>
<li>贪心策略证明：数学归纳法</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">最小延迟调度</title>
    <id>https://melogra.github.io/blog/algorithm/%E8%B4%AA%E5%BF%83/%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E8%B0%83%E5%BA%A6/</id>
    <link href="https://melogra.github.io/blog/algorithm/%E8%B4%AA%E5%BF%83/%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E8%B0%83%E5%BA%A6/"/>
    <updated>2021-01-20T13:34:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="最小延迟调度"> 最小延迟调度</h3>
<h4 id="问题描述"> 问题描述</h4>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">网址收藏</title>
    <id>https://melogra.github.io/blog/%E6%9D%82%E8%B0%88/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/</id>
    <link href="https://melogra.github.io/blog/%E6%9D%82%E8%B0%88/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/"/>
    <updated>2021-05-05T15:06:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="网址收藏"> 网址收藏</h2>
<h3 id="标准"> 标准</h3>
<ul>
<li>W3C <a href="https://www.w3.org/TR/" target="_blank" rel="noopener noreferrer">www.w3.org/TR/</a></li>
<li>CSS <a href="https://www.w3.org/TR/CSS/" target="_blank" rel="noopener noreferrer">www.w3.org/TR/CSS/</a></li>
<li>HTML <a href="https://whatwg.org" target="_blank" rel="noopener noreferrer">whatwg.org</a></li>
<li>web相关的一些标准 <a href="https://spec.whatwg.org/" target="_blank" rel="noopener noreferrer">spec.whatwg.org/</a></li>
<li>ECMAScript <a href="https://tc39.es/ecma262/" target="_blank" rel="noopener noreferrer">tc39.es/ecma262/</a></li>
</ul>
<h3 id="博客"> 博客</h3>
<ul>
<li>阮一峰的网络日志 <a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener noreferrer">www.ruanyifeng.com/blog/</a></li>
</ul>
<h3 id="书"> 书</h3>
<ul>
<li><a href="https://www.bookstack.cn/read/es6-3rd/sidebar.md" target="_blank" rel="noopener noreferrer">ES6 标准入门教程 第三版</a></li>
</ul>
<h3 id="学习"> 学习</h3>
<ul>
<li>w3schools <a href="https://www.w3schools.com/" target="_blank" rel="noopener noreferrer">www.w3schools.com/</a></li>
</ul>
<h3 id="工具"> 工具</h3>
<ul>
<li>codelf <a href="https://unbug.github.io/codelf/" target="_blank" rel="noopener noreferrer">unbug.github.io/codelf/</a></li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">思维导图</title>
    <id>https://melogra.github.io/blog/%E6%9D%82%E8%B0%88/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</id>
    <link href="https://melogra.github.io/blog/%E6%9D%82%E8%B0%88/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <updated>2021-04-18T14:13:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="思维导图"> 思维导图</h2>
<h3 id="程序员知识体系"> 程序员知识体系</h3>
<p><img src="http://assets.processon.com/chart_image/5ea7f6731e085346f7270778.png" alt="程序员知识体系" /></p>
<h3 id="前端知识体系"> 前端知识体系</h3>
<p><img src="http://assets.processon.com/chart_image/5e6e00ebe4b011fcce963474.png" alt="前端知识体系" /></p>
<h3 id="浏览器与api"> 浏览器与API</h3>
<p><img src="http://assets.processon.com/chart_image/5ea4876a07912948b0dabc2e.png?_=1618469704681" alt="浏览器与API" /></p>
<h3 id="html-css"> html &amp; css</h3>
<p><img src="http://assets.processon.com/chart_image/5ea486d45653bb6efc6c796f.png?_=1618469867552" alt="html &amp; css" /></p>
<h3 id="javascript"> JavaScript</h3>
<p><img src="http://assets.processon.com/chart_image/5ea3e4cb5653bb6efc6b76de.png?_=1618469919833" alt="JavaScript" /></p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-18T14:13:25.000Z</published>
  </entry>
  <entry>
    <title type="html">MIPS汇编入门</title>
    <id>https://melogra.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/MIPS%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/</id>
    <link href="https://melogra.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/MIPS%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"/>
    <updated>2021-07-09T15:57:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="mips汇编入门"> MIPS汇编入门</h1>
<h2 id="简介"> 简介</h2>
<p>MIPS（<strong>M</strong>icroprocessor without <strong>I</strong>nterlocked <strong>P</strong>ipeline <strong>S</strong>tages），是一种采取精简指令集（RISC: <strong>r</strong>educed <strong>i</strong>nstruction <strong>s</strong>et <strong>c</strong>omputer）的指令集架构。最早的MIPS架构是32 bits，最新的版本已经变成64 bits（本文介绍的是32位版本）。</p>
<p>本文主要介绍：</p>
<ul>
<li>寄存器</li>
<li>汇编程序结构</li>
<li>指令集
<ul>
<li>load / store 指令</li>
<li>算术指令</li>
<li>跳转指令</li>
<li>系统调用 / IO 指令</li>
</ul>
</li>
</ul>
<h3 id="数据的表示"> 数据的表示</h3>
<ul>
<li>所有MIPS指令都是32位</li>
<li><code>1 byte = 8 bits, halfword = 2 bytes, 1 word = 4 bytes</code></li>
<li><code>1 char = 1 byte</code></li>
<li><code>1 int = 1 word = 4 bytes</code></li>
<li>数字（number）<strong>直接输入</strong>，例如：<code>10</code></li>
<li>单字符（character）用<strong>单引号</strong>括起来，例如：<code>'b'</code></li>
<li>字符串（string）用<strong>双引号</strong>括起来，例如：<code>&quot;A string&quot;</code></li>
</ul>
<h3 id="mips模拟器"> MIPS模拟器</h3>
<p><a href="https://courses.missouristate.edu/KenVollmar/MARS/" target="_blank" rel="noopener noreferrer">MARS4.5</a></p>
<h2 id="寄存器"> 寄存器</h2>
<ul>
<li>MIPS共有32个<strong>通用寄存器</strong></li>
<li>在汇编指令中，寄存器以<code>$</code>开头，有两种表示方式
<ul>
<li>使用寄存器编号，例如：<code>$0 ~ $31</code></li>
<li>使用寄存器名称，例如：<code>$t1, $sp</code>（寄存器的编号及名称含义见下表）</li>
</ul>
</li>
<li>特殊的寄存器<code>Lo</code>和<code>Hi</code>用于存储乘法或除法运算的结果
<ul>
<li>不能直接访问<code>Lo</code>和<code>Hi</code>寄存器，它们的内容通过特殊的指令访问：<code>mfhi</code>（move from Hi）和<code>mflo</code>（move from Lo）</li>
</ul>
</li>
<li>栈的方向从存储器的<strong>高地址到低地址</strong></li>
</ul>
<p>各个寄存器编号、名称和描述：</p>
<table>
<thead>
<tr>
<th style="text-align:left">寄存器编号</th>
<th style="text-align:left">寄存器名称</th>
<th style="text-align:left">英文全称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">$zero</td>
<td style="text-align:left">zero</td>
<td style="text-align:left">值恒为0</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">$at</td>
<td style="text-align:left"><strong>a</strong>ssembler <strong>t</strong>emporary</td>
<td style="text-align:left">汇编保留寄存器（不可做其他用途）</td>
</tr>
<tr>
<td style="text-align:left">2-3</td>
<td style="text-align:left">$v0 , $v1</td>
<td style="text-align:left"><strong>v</strong>alues</td>
<td style="text-align:left">值来自于表达式求值和函数结果</td>
</tr>
<tr>
<td style="text-align:left">4-7</td>
<td style="text-align:left">$a0 - $a3</td>
<td style="text-align:left"><strong>a</strong>rguments</td>
<td style="text-align:left">存储子程序调用的前4个非浮点参数，在子程序中不会跨子程序保存</td>
</tr>
<tr>
<td style="text-align:left">8-15</td>
<td style="text-align:left">$t0 - $t7</td>
<td style="text-align:left"><strong>t</strong>emporaries</td>
<td style="text-align:left">暂存寄存器</td>
</tr>
<tr>
<td style="text-align:left">16-23</td>
<td style="text-align:left">$s0 - $s7</td>
<td style="text-align:left"><strong>s</strong>aved values</td>
<td style="text-align:left">通用寄存器</td>
</tr>
<tr>
<td style="text-align:left">24-25</td>
<td style="text-align:left">$t8 - $t9</td>
<td style="text-align:left"><strong>t</strong>emporaries</td>
<td style="text-align:left">临时变量，与$t0 - $t7一样</td>
</tr>
<tr>
<td style="text-align:left">26-27</td>
<td style="text-align:left">$k0, $k1</td>
<td style="text-align:left"><strong>k</strong>ernel reserved</td>
<td style="text-align:left">操作系统内核保留寄存器，用于中断处理</td>
</tr>
<tr>
<td style="text-align:left">28</td>
<td style="text-align:left">$gp</td>
<td style="text-align:left"><strong>g</strong>lobal <strong>p</strong>ointer</td>
<td style="text-align:left">全局指针</td>
</tr>
<tr>
<td style="text-align:left">29</td>
<td style="text-align:left">$sp</td>
<td style="text-align:left"><strong>s</strong>tack <strong>p</strong>ointer</td>
<td style="text-align:left">栈指针，指向栈顶</td>
</tr>
<tr>
<td style="text-align:left">30</td>
<td style="text-align:left">$s8 / $fp</td>
<td style="text-align:left"><strong>s</strong>aved values / <strong>f</strong>rame <strong>p</strong>ointer</td>
<td style="text-align:left">帧指针，用于过程调用</td>
</tr>
<tr>
<td style="text-align:left">31</td>
<td style="text-align:left">$ra</td>
<td style="text-align:left"><strong>r</strong>eturn <strong>a</strong>ddress</td>
<td style="text-align:left">返回地址</td>
</tr>
</tbody>
</table>
<h2 id="汇编程序结构"> 汇编程序结构</h2>
<p>MIPS源程序文件（文件后缀<code>.s</code>或<code>.asm</code>）中包含<strong>数据声明</strong>和<strong>程序代码</strong>两部分，数据声明在程序代码之前</p>
<h3 id="数据声明"> 数据声明</h3>
<p>数据声明以汇编器指令<code>.data</code>作为开始标识。声明的语法为：<code>[name]: [storage_type] [value]</code></p>
<p><code>storage_type</code>可以为<code>.byte</code>、<code>.word</code>、<code>.space</code>、<code>ascii</code>、<code>.asciiz</code>，例如：</p>
<div><pre><code>.data
  var_name: .word 123 # 声明变量var_name，占用1个字（4字节）空间，值为123
  array1: .byte &#39;c&#39;, &#39;b&#39;
  array2: .space 40 # 长度为40的字符数组
  str1: .asciiz &quot;a string&quot;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>
<p>声明字符数组array1，包含2个字符元素，初始化为a和b</p>
</li>
<li>
<p>申请一段空间array2，在内存中分配连续的40个字节空间，array2未被初始化，可能是长度40的字符数组或长度为10的整型数组，因此建议<strong>在注释中说明用途</strong>。</p>
</li>
<li>
<p><code>.ascii</code> 会保存字符串在数据段但<strong>不会</strong>加<code>null</code>终止符</p>
</li>
<li>
<p><code>.asciiz</code> 会保存字符串在数据段<strong>且</strong>加<code>null</code>终止符</p>
</li>
</ul>
<h3 id="代码"> 代码</h3>
<ul>
<li>代码放在<code>.text</code>标识后</li>
<li>代码段文本包含程序代码指令，以<code>main</code>作为程序入口</li>
<li>主代码的结束点应该使用“退出系统调用（功能），详见后续的“系统调用篇”</li>
</ul>
<h3 id="注释"> 注释</h3>
<p>在一行内，任何在#之后的内容，将会被（编译器）认为是<strong>注释</strong>。</p>
<h3 id="标签-label"> 标签(label)</h3>
<p>在代码中可以设定一个标签，方便跳转或标注，通常用于if - else 跳转或 jump，详见指令部分。</p>
<div><pre><code>.text
__my_label:
  lw $t0, var1   # $t0 = var1
done
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="mips程序示例"> MIPS程序示例</h3>
<div><pre><code># example.s
.data
  # 数据声明
  var1: .word 123
  array1: .byte &#39;a&#39;,&#39;b&#39;
  array2: .space 40 # 申请40个字节的连续空间
.text
  # 指令代码 main为入口
main:
  lw	$t0, var1

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="指令"> 指令</h2>
<h3 id="load-store-指令"> load / store 指令</h3>
<p>只能使用load / store指令来访问内存，其他指令都是寄存器操作。</p>
<p>load指令：</p>
<div><pre><code># 从RAM_source 复制1个字的内容到寄存器
lw register_destination, RAM_source
# lb = load byte
lb register_destination, RAM_source
# li = load immediate value 加载一个立即数到寄存器
li register_destination, value
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>Store 指令：</p>
<div><pre><code># 将寄存器的数据写入内存
sw register_source, RAM_destination
# sb = store byte
sb register_source, RAM_destination
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code>example:
.data
  var1:	.word 23 # 声明一个整型var1 = 23
.text
__start:
  lw $t0, var1   # $t0 = var1
  li $t1, 5      # $t1 = 5
  sw $t1, var1   # var1 = $t1;
done
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="立即寻址、间接寻址和偏移量"> 立即寻址、间接寻址和偏移量</h3>
<ul>
<li>
<p>直接寻址</p>
<div><pre><code># 将var1的RAM地址复制到t0寄存器
# la = load address
la $t0 var1
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>间接寻址</p>
<p>通过<code>($register)</code>将寄存器中的值作为地址：</p>
<div><pre><code># 将t0寄存器中存放的值放到t2
# 括号可以认为是“取寄存器的值”
lw $t2, ($t0)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code># 将t2中存放的值写入t0的值指向的内存
sw $t2, ($t0)
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>偏移量</p>
<p>偏移量通常用于数组或栈</p>
<div><pre><code># $t2 = ($t0 + 4)
lw $t2, 4($t0)
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>可以是负数的偏移量：</p>
<div><pre><code># ($t0 - 12) = $t2
sw $t2, -12($t0)
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
</ul>
<p>寻址的综合例子：</p>
<div><pre><code>example：
.data
  array1: .space <span>12</span> <span># 声明一个12字节长度的数组 array1, 可容纳3个整型</span>
.text
__start:
  la <span>$t0</span>, array1  <span># $t0 = 数组首地址</span>
  li <span>$t1</span>, <span>5</span>       <span># $t1 = 5</span>
  sw <span>$t1</span>, <span>(</span><span>$t0</span><span>)</span>   <span># array[0] = $t1 = 5</span>
  li <span>$t1</span>, <span>13</span>      <span># $t1 = 13</span>
  sw <span>$t1</span>, <span>4</span><span>(</span><span>$t0</span><span>)</span>  <span># array[1] = $t1 = 13</span>
                  <span># 整型占4个字节，数组首地址偏移4字节就是array[1]的地址</span>
  li <span>$t1</span>, -7      <span># $t1 = -7</span>
  sw <span>$t1</span>, <span>8</span><span>(</span><span>$t0</span><span>)</span>  <span># array + 8字节偏移 = array[2]的地址</span>
<span>done</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="算术指令"> 算术指令</h3>
<ul>
<li>算术指令最多3个操作数</li>
<li>操作数只能是寄存器</li>
<li>MIPS所有指令都是32 bits</li>
</ul>
<p>加减法指令：</p>
<div><pre><code>sub	$t2, $t3, $t4   # $t2 = $t3 - $t4
addi $t2, $t3, 5    # $t2 = $t3 + 5
                    # addi = add immediate
                    # 没有subi指令
addu $t1, $t6, $t7  # $t1 = $t6 + $t7
                    # addu = add unsigned integers
subu $t1, $t6, $t7  # $t1 = $t6 - $t7
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>乘除法指令：</p>
<div><pre><code>mult $t3, $t4       # $t3, $t4的两个32位数相乘，得到一个64位数据
                    # $hi 存放高位，$lo 存放低位
div	$t5, $t6        # $t5 / $t6
                    # 商数存放在 $lo, 余数存放在 $hi

mfhi $t0            # 不能直接获取 $hi 或 $lo 中的值， 需要mfhi, mflo指令传值给寄存器
mflo $t1
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>寄存器间赋值：</p>
<div><pre><code>move $t2, $t3       # $t2 = $t3
</code></pre>
<div><span>1</span><br></div></div><h3 id="结构控制"> 结构控制</h3>
<ul>
<li>
<p>分支（if - else）</p>
<p>满足条件则跳转到指定分支。</p>
<div><pre><code>b	target              # 无条件跳转到target
beq	$t0, $t1, target  # $t0 = $t1
blt	$t0, $t1, target  # $t0 &lt; $t1
ble	$t0, $t1, target  # $t0 &lt;= $t1
bgt	$t0, $t1, target  # $t0 &gt; $t1
bge	$t0, $t1, target  # $t0 &gt;= $t1
bne	$t0, $t1, target  # $t0 != $t1
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>跳转</p>
<div><pre><code>j	target # 无条件跳转
jr $t3   # 跳转到$t3存放的地址，jr = jump register
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>子程序调用（函数调用）</p>
<div><pre><code>jal sub_label  # jump and link
# 将当前的程序计数器（program counter PC指针）保存到$ra中
# 然后跳到sub_label（指针指向sub_label）
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code># 通过$ra保存的返回地址跳回函数调用前的位置
jr $ra # jump register
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>如果调用的子程序中有调用了其他子程序，如此往复， 则<strong>用栈来保存返回地址</strong>，毕竟$ra只有一个。</p>
</li>
</ul>
<h3 id="系统调用和io"> 系统调用和IO</h3>
<p>对参数寄存器进行设定后，执行<code>syscall</code>指令就可以进行系统调用和IO。</p>
<ul>
<li>通过系统调用实现终端的输入输出，以及声明程序结束</li>
<li>参数所使用的寄存器：$v0，$a0,  $a1</li>
<li>返回值使用：$v0</li>
</ul>
<p>下表给出了系统调用中对应功能，代码，参数机返回值：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Service</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">$v0对应功能的调用码</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">print_int</td>
<td style="text-align:center">打印整数</td>
<td style="text-align:center">$v0 = 1</td>
<td style="text-align:center">$a0 = 目标整型数</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">print_float</td>
<td style="text-align:center">打印浮点数</td>
<td style="text-align:center">$v0 = 2</td>
<td style="text-align:center">$f12 = 目标浮点数</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">print_double</td>
<td style="text-align:center">打印双精度浮点数</td>
<td style="text-align:center">$v0 = 3</td>
<td style="text-align:center">$f12 = 目标双精度浮点数</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">print_string</td>
<td style="text-align:center">打印字符串</td>
<td style="text-align:center">$v0 = 4</td>
<td style="text-align:center">$a0 = 目标字符串的地址</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">read_int</td>
<td style="text-align:center">从键盘读取整型数</td>
<td style="text-align:center">$v0 = 5</td>
<td style="text-align:center"></td>
<td style="text-align:center">返回整型给 $v0</td>
</tr>
<tr>
<td style="text-align:center">read_float</td>
<td style="text-align:center">从键盘读取浮点数</td>
<td style="text-align:center">$v0 = 6</td>
<td style="text-align:center"></td>
<td style="text-align:center">返回浮点数给 $v0</td>
</tr>
<tr>
<td style="text-align:center">read_double</td>
<td style="text-align:center">从键盘读取双精度</td>
<td style="text-align:center">$v0 = 7</td>
<td style="text-align:center"></td>
<td style="text-align:center">返回双精度给 $v0</td>
</tr>
<tr>
<td style="text-align:center">read_string</td>
<td style="text-align:center">从键盘读取字符串</td>
<td style="text-align:center">$v0 = 8</td>
<td style="text-align:center">$a0 = 目标字符串地址<br />$a1 = 目标字符串长度</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">sbrk</td>
<td style="text-align:center">动态分配内存</td>
<td style="text-align:center">$v0 = 9</td>
<td style="text-align:center">$a0 = 需要分配的空间大小（单位bytes）</td>
<td style="text-align:center">将分配好的空间首地址返回给 $v0</td>
</tr>
<tr>
<td style="text-align:center">exit</td>
<td style="text-align:center">退出</td>
<td style="text-align:center">$v0 =10</td>
<td style="text-align:center">退出码</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<div><pre><code># 打印一个存储在寄存器 $2 里的整型
li $v0, 1      # print_int 调用码为1
move $a0, $t2  # 目标整型数在放到$a0
syscall        # 进行系统调用
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><div><pre><code># 读取一个数，并且存储到内存中的 int_value 变量中
.data
	int_value: .word 12
.text
main:
  li $v0, 5	         # read_int 调用码为5
  syscall            # 键盘读取操作后，$v0 = 输入的数字
  sw $v0, int_value  # 将 $v0的值写入内存
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code># 打印一个字符串
.data
	string1 .asciiz	&quot;Print this.\n&quot;
.text
main:
	li $v0, 4        # print_string 调用码为4
  la $a0, string1  # $a0 = address(string1)
  syscall
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code># 系统退出
li $v0, 10 # exit 调用码为10
syscall
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-07-09T15:57:45.000Z</published>
  </entry>
  <entry>
    <title type="html">进程</title>
    <id>https://melogra.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B/</id>
    <link href="https://melogra.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B/"/>
    <updated>2021-07-07T13:47:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="进程"> 进程</h1>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-07-07T13:47:47.000Z</published>
  </entry>
  <entry>
    <title type="html">浏览器原理</title>
    <id>https://melogra.github.io/blog/%E6%9D%82%E8%B0%88/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/</id>
    <link href="https://melogra.github.io/blog/%E6%9D%82%E8%B0%88/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <updated>2021-07-07T13:47:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="浏览器原理"> 浏览器原理</h1>
<h2 id="浏览器与浏览器内核"> 浏览器与浏览器内核</h2>
<h3 id="浏览器"> 浏览器</h3>
<h4 id="浏览器发展史"> 浏览器发展史</h4>
<p><em>WroldWideWeb(nexus) -&gt; netscape -&gt; internet explorer -&gt; mozila firefox -&gt; safari -&gt; chromium -&gt; chrome</em></p>
<h4 id="浏览器特性"> 浏览器特性</h4>
<p>浏览器功能：</p>
<p><em>网络、资源管理、网页浏览、多页面管理、插件和拓展、书签管理、历史记录管理、设置管理、下载管理、账户、安全机制、隐私管理、外观主题、开发者工具等</em></p>
<h4 id="html5"> HTML5</h4>
<p>html5包含了一系列标准，一共包含了10大的个类别。</p>
<p><em>离线（offline）、存储（storage）、连接（connectivity）、文件访问（file access）、语义（semantics）、音频 / 视频（audio / video）、3D / 图形（3D / graphics）、展示（presentation）、性能（performance）、其他（nuts and bolts）</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">类别</th>
<th style="text-align:center">具体规范</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">离线</td>
<td style="text-align:center">Application cache，Local storage，Indexed DB，在线 / 离线事件</td>
</tr>
<tr>
<td style="text-align:center">存储</td>
<td style="text-align:center">Application cache ，Local storage，Indexed DB</td>
</tr>
<tr>
<td style="text-align:center">连接</td>
<td style="text-align:center">Web Sockets、Server-sent事件</td>
</tr>
<tr>
<td style="text-align:center">文件访问</td>
<td style="text-align:center">File API，File system，FileWriter，ProgressEvents</td>
</tr>
<tr>
<td style="text-align:center">语义</td>
<td style="text-align:center">各种新元素，比如Media、structural，国际化，Link relation，属性，form类型，microdata等方面</td>
</tr>
<tr>
<td style="text-align:center">音频视频</td>
<td style="text-align:center">HTML5 video，WebAudio，WebRTC，Video track等</td>
</tr>
<tr>
<td style="text-align:center">3D图形</td>
<td style="text-align:center">Canvas2D，3D CSS变换，WebGL，SVG等</td>
</tr>
<tr>
<td style="text-align:center">展示</td>
<td style="text-align:center">CSS3 2D / 3D 变换，转换（transition），WebFonts等</td>
</tr>
<tr>
<td style="text-align:center">性能</td>
<td style="text-align:center">Web Worker，HTTP caching等</td>
</tr>
<tr>
<td style="text-align:center">其他</td>
<td style="text-align:center">触控和鼠标、Shadow DOM、CSS masking等</td>
</tr>
</tbody>
</table>
<h4 id="useragent"> userAgent</h4>
<p><em>userAgent</em> 的作用在于让互联网的内容提供商了解发送请求的浏览器的身份，以便提供商根据不同浏览器提供不同的内容。</p>
<ul>
<li><em>firefox</em> 包含 <em>Gecko</em>、<em>Firefox</em> 等关键词</li>
<li><em>IE</em> 包含 <em>Mozilla</em>、<em>MSIE</em>、<em>windows</em> 等关键词</li>
<li><em>safari</em> 包含 <em>AppleWebKit</em>、<em>safari</em> 等</li>
<li><em>chrome</em> 包含 <em>Mozilla</em>、<em>Android</em>、<em>AppleWebKit</em>、<em>Gecko</em>、<em>Chrome</em>、<em>safari</em> 等关键词</li>
</ul>
<p>总的来说，因为某种浏览器的流行，很多内容提供商和网站需要根据流行的浏览器来定制内容，当后来者需要相同内容的时候，<strong>就只能通过这些用户代理的信息来模仿获得</strong>。</p>
<p>所以能看到，越往后出现的浏览器通常会包含老浏览器里的部分关键词。</p>
<h3 id="浏览器内核"> 浏览器内核</h3>
<h4 id="什么是内核"> 什么是内核</h4>
<p>浏览器的一个最重要的功能就是将页面转变成可视化的图像结果，这就是浏览器内核，通常也被称为<strong>渲染引擎</strong>。</p>
<p>所谓的渲染，就是根据描述或者定义构建数学模型，通过模型生成图像的过程。<strong>浏览器的渲染引擎就是将 <em>html / css / javascript</em> 文本及其相应的资源文件转换成图像结果的模块。</strong></p>
<Mermaid id="mermaid_64a56f32" :graph="$dataBlock.mermaid_64a56f32"></Mermaid><p>需要注意的是，渲染引擎和浏览器并非一一对应的，就像单个版本的Linux内核可以对应多个Linux操作系统的发行版。</p>
<p>以下是浏览器和渲染引擎的关系：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Trident</th>
<th style="text-align:center">Gecko</th>
<th style="text-align:center">Webkit</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">基于渲染引擎的浏览器</td>
<td style="text-align:center">IE</td>
<td style="text-align:center">firefox</td>
<td style="text-align:center">safari、chromium / chrome、Android 浏览器、chromeOS等等</td>
</tr>
</tbody>
</table>
<p>事实上，根据Wikipedia上的数据，超过30种浏览器和Web平台是基于Webkit渲染引擎开发的。</p>
<h4 id="内核特征"> 内核特征</h4>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gquly6342vj30j807kq3a.jpg" alt="渲染引擎模块" /></p>
<p>从图中可以看出，一个渲染引擎主要包括 <em><strong>HTML解释器</strong></em>、<em><strong>CSS解释器</strong></em>、<em><strong>布局</strong></em> 和 <em><strong>JavaScript引擎</strong></em> 等，其他还有 <em><strong>绘图模块</strong></em>、<em><strong>网络</strong></em> 等并没有在图中直接表示出来，下面依次来描述他们。</p>
<ul>
<li>
<p><em><strong>HTML解释器</strong></em>：解释HTML文本的解释器，主要作用是将HTML文本解释成 <em><strong>DOM（文档对象模型）树</strong></em>，<em>DOM</em> 是一种文档的表示方法。</p>
</li>
<li>
<p><em><strong>CSS解释器</strong></em>：级联样式表的解释器，作用是为<em>DOM</em>中的各个元素对象计算出样式信息，从而为计算最后网页的布局提供基础设施。</p>
</li>
<li>
<p><em><strong>布局</strong></em>：在<em>DOM</em>创建之后，<em>Webkit</em>需要将其中的元素对象和样式信息结合起来，计算它们的大小位置等布局信息，形成一个能够表示这所有信息的<strong>内部表示模型</strong>。</p>
</li>
<li>
<p><em><strong>JavaScript引擎</strong></em>：使用JavaScript代码可以修改网页的内容，也能修改CSS的信息，JavaScript引擎能够解释JavaScript代码并通过 <strong>DOM接口</strong> 和 <strong>CSSOM接口</strong> 修来改网页内容和样式信息，从而改变渲染的结果。</p>
</li>
<li>
<p><em><strong>绘图</strong></em>：使用图形库将布局计算后的各个网页的节点绘制成图像结果。</p>
</li>
</ul>
<Mermaid id="mermaid_64a5682c" :graph="$dataBlock.mermaid_64a5682c"></Mermaid><h3 id="webkit内核"> webkit内核</h3>
<h4 id="webkit介绍"> webkit介绍</h4>
<p>苹果公司参与网页渲染引擎 <em><strong>KHTML</strong></em></p>
<p>=&gt; 苹果公司从 <em><strong>KHTML</strong></em> 中复制代码出来成立 <em><strong>webkit项目</strong></em></p>
<p>=&gt; 苹果公司将 <em><strong>webkit项目</strong></em> 开源</p>
<p>=&gt; google公司从 <em><strong>webkit项目</strong></em> 中复制代码成立 <em><strong>Blink项目</strong></em>，并将其应用于 <em><strong>Chromium浏览器</strong></em></p>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-05-18T05:35:28.000Z</published>
  </entry>
  <entry>
    <title type="html">异步：现在与将来</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-1%20%E5%BC%82%E6%AD%A5/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89/2-1%20%E5%BC%82%E6%AD%A5/"/>
    <updated>2021-04-21T15:32:43.000Z</updated>
    <content type="html"><![CDATA[<h1 id="异步-现在与将来"> 异步：现在与将来</h1>
<p>在等待用户输入、从数据库或文件系统中请求数据、通过网络发送数据并等待响应，或者是在以固定时间间隔执行重复任务(比如动画)。</p>
<p>在诸如此类的场景中，程序都需要管理这段时间间隙的状态。</p>
<p><strong>程序中现在运行的部分和将来运行的部分之间的关系就是异步编程的核心。</strong></p>
<h2 id="分块的程序"> 分块的程序</h2>
<p>若将一个程序分为若干个块，那么这些块中只有一个是<em>现在执行</em>，其余将会在<em>未来执行</em>。最常见的块是<strong>函数</strong>。</p>
<p>任何时候，只要把一段代码包装成一个函数，并指定它在响应某个事件(定时器、鼠标点 击、Ajax 响应等)时执行，你就是在代码中创建了一个将来执行的块，也由此在这个程序中引入了异步机制。</p>
<div><pre><code><span>function</span> <span>now</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>21</span><span>;</span>
<span>}</span>
<span>var</span> answer <span>=</span> <span>now</span><span>(</span><span>)</span><span>;</span>
<span>setTimeout</span><span>(</span> later<span>,</span> <span>1000</span> <span>)</span><span>;</span> <span>// 42</span>

<span>// 将来执行</span>
<span>function</span> <span>later</span><span>(</span><span>)</span> <span>{</span>
  answer <span>=</span> answer <span>*</span> <span>2</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span>answer <span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="异步的-console"> 异步的 <code>console.*</code></h3>
<p><code>console.*</code> 方法族不属于JavaScript规范的内容，它是由**“宿主环境”**提供的（参考“类型和语法”部分）。</p>
<p>因此，不同的浏览器和 JavaScript 环境可以按照自己的意愿来实现，有时候这会引起混淆。因为在许多程序(不只是 JavaScript)中，I/O 是非常低速的阻塞部分。所以，(从页面 /UI 的角度来说)浏览器在后台异步处理控制台 I/O 能够提高性能，这时用户甚至可能根本意识不到其发生。</p>
<p>考虑以下代码：</p>
<div><pre><code><span>var</span> a <span>=</span> <span>{</span>
  index<span>:</span> <span>1</span>
<span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> a<span>.</span>index <span>)</span><span>;</span> <span>// 可能是1，也可能是2</span>
a<span>.</span>index<span>++</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>上述代码中，浏览器可能会认为需要把控制台 I/O 延迟到后台，等到浏览器控制台输出内容时，<code>a.index++</code> 可能已经执行。</p>
<p>因此，最好的选择是在 JavaScript 调试器中使用断点， 而不要依赖控制台输出。次优的方案是把对象序列化到一个字符串中，以强制执行一次“快照”，比如通过 <code>JSON.stringify()</code>。</p>
<h2 id="事件循环"> 事件循环</h2>
<p>*JavaScript“宿主环境”*都提供了一种机制来处理程序中多个块的执行，且执行每块时调用 JavaScript 引擎，这种机制被称为<strong>事件循环</strong>。</p>
<p>换句话说，JavaScript 引擎本身并没有时间的概念，只是一个按需执行 JavaScript 任意代码片段的环境。“事件”调度总是由包含它的环境进行。</p>
<p>用一段伪代码表示时间循环：</p>
<div><pre><code><span>// 时间循环是一个队列</span>
<span>var</span> eventLoop <span>=</span> <span>[</span><span>]</span>
<span>var</span> event

<span>while</span><span>(</span><span>true</span><span>)</span> <span>{</span>
  <span>// 一次tick</span>
  <span>if</span> <span>(</span>eventLoop<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
    <span>// 拿到队列中的下一个事件</span>
    <span>// 对每个 tick 而言，如果在队列中有等待事件，那么就会从队列中摘下一个事件并执行。</span>
    event <span>=</span> eventLoop<span>.</span><span>shift</span><span>(</span><span>)</span><span>;</span>
    
    <span>try</span> <span>{</span>
      <span>event</span><span>(</span><span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>err<span>)</span> <span>{</span>
      <span>reportErr</span><span>(</span>err<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>考虑以下情形：JavaScript程序发起一个ajax请求，从服务器获取数据并处理。</p>
<div><pre><code><span>// 这里的callback函数会在服务器返回后，入队eventLoop</span>
<span>ajax</span><span>(</span>url<span>,</span> <span>function</span> <span>callback</span> <span>(</span><span>data</span><span>)</span> <span>{</span>
  <span>handle</span><span>(</span>data<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>同理，<code>setTimeout(callback, 0)</code>会设定一个定时器，定时器到时后，将回调函数放在事件循环中，这样在未来某个时刻的 tick 会摘下并执行这个回调。</p>
<p>因此，<code>setTimeout</code>并不准时，因为时间循环中可能有其他非常耗时的任务，它只是在经过给定的时间后，将任务进入队列等待执行。</p>
<p>总的来说，程序通常分成了很多小块，在事件循环队列中一个接一个地执行。严格地说，和你的程序不直接相关的其他事件也可能会插入到队列中。</p>
<h2 id="异步与并行"> 异步与并行</h2>
<p>异步是关于现在和将来的时间间隙，而并行是关于能够<strong>同时发生</strong>的事情。</p>
<p>**并行计算最常见的工具就是<em>进程</em> 和<em>线程</em>。**其中，多个线程能够共享单个进程的内存。</p>
<p>与之相对的是，事件循环把自身的工作分成一个个任务并顺序执行，不允许对共享内存的并行访问和修改。</p>
<p>**JavaScript引擎是单线程的。**也就是说，在每一个时刻，都只有一段代码在执行。</p>
<h3 id="完整运行-特性"> “完整运行”特性</h3>
<p>考虑以下代码：</p>
<div><pre><code><span>var</span> a <span>=</span> <span>1</span><span>;</span>
<span>var</span> b <span>=</span> <span>2</span><span>;</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>// 对a，b进行访问修改</span>
<span>}</span>
<span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
 <span>// 对a，b进行访问修改</span>
<span>}</span>
<span>ajax</span><span>(</span> <span>"http://some.url.1"</span><span>,</span> foo <span>)</span><span>;</span>
<span>ajax</span><span>(</span> <span>"http://some.url.2"</span><span>,</span> bar <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>由于 JavaScript 的单线程特性，foo、bar中的代码具有原子性。也就是说，一旦 foo 开始运行，它的所有代码都会在 bar 中的任意代码运行之前完成，或者相反。 这称为完整运行(run-to-completion)特性。</p>
<p>上述代码仍存在不确定性，因为不知道哪个请求会先返回结果，因此foo和bar的执行顺序不能确定。</p>
<p>在 JavaScript 的特性中，这种函数顺序的不确定性就是通常所说的竞态条件(race condition)，foo() 和 bar() 相互竞争，看谁先运行。具体来说，因为无法可靠预测 a 和 b 的最终结果，所以才是竞态条件。</p>
<h2 id="并发任务间的关系"> 并发任务间的关系</h2>
<p>设想有一个下拉更新新闻列表的功能需求，包含两个任务，</p>
<ul>
<li>在用户向下滚动页面触发 onscroll 事件时响应这些事件(发起 Ajax 请求要求新的内容)</li>
<li>接收 Ajax 响应(把内容展示到页面)。</li>
</ul>
<p>当用户滚动页面足够快，会出现onscroll事件和多个响应可能会交替出现，加上JavaScript单线程的特性，可能会处理响应顺序异常。</p>
<p>由此引出并发任务间的关系：</p>
<ul>
<li>
<p>非交互</p>
<p>如果进程间没有相互影响的话，不确定性是完全可以接受的。</p>
<div><pre><code><span>var</span> res <span>=</span> <span>{</span><span>}</span><span>;</span>
<span>function</span> <span>foo</span><span>(</span><span>results</span><span>)</span> <span>{</span>
  res<span>.</span>foo <span>=</span> results<span>;</span>
<span>}</span>
<span>function</span> <span>bar</span><span>(</span><span>results</span><span>)</span> <span>{</span>
  res<span>.</span>bar <span>=</span> results<span>;</span>
<span>}</span>
<span>// 两个任务执行顺序不确定，但是都会被执行且互不影响</span>
<span>ajax</span><span>(</span> <span>"http://some.url.1"</span><span>,</span> foo <span>)</span><span>;</span>
<span>ajax</span><span>(</span> <span>"http://some.url.2"</span><span>,</span> bar <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<p>交互</p>
<div><pre><code><span>var</span> a<span>;</span>
<span>function</span> <span>foo</span><span>(</span><span>x</span><span>)</span> <span>{</span>
  a <span>=</span> x <span>*</span> <span>2</span><span>;</span>
  <span>baz</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
<span>function</span> <span>bar</span><span>(</span><span>x</span><span>)</span> <span>{</span>
  a <span>=</span> x <span>/</span> <span>2</span><span>;</span>
  <span>baz</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
<span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span>
<span>}</span>
<span>// 不管哪一个后被触发，都不仅会覆盖另外一个给 a 赋的值，也会重复调用 baz()(很可能并不是想要的结果)</span>
<span>ajax</span><span>(</span> <span>"http://some.url.1"</span><span>,</span> foo <span>)</span><span>;</span>
<span>ajax</span><span>(</span> <span>"http://some.url.2"</span><span>,</span> bar <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<p>协作（分割任务）</p>
<div><pre><code><span>var</span> res <span>=</span> <span>[</span><span>]</span><span>;</span>
<span>// response(..)从Ajax调用中取得结果数组</span>
<span>function</span> <span>response</span><span>(</span><span>data</span><span>)</span> <span>{</span>
  <span>// 一次处理1000个</span>
  <span>var</span> chunk <span>=</span> data<span>.</span><span>splice</span><span>(</span> <span>0</span><span>,</span> <span>1000</span> <span>)</span><span>;</span>
  res <span>=</span> res<span>.</span><span>concat</span><span>(</span>chunk<span>.</span><span>map</span><span>(</span> <span>val</span> <span>=></span> val <span>*</span> <span>2</span><span>)</span><span>)</span><span>;</span>
	<span>if</span> <span>(</span>data<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
  <span>// 异步调度下一次批处理</span>
   	<span>setTimeout</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span>
      <span>response</span><span>(</span> data <span>)</span><span>;</span>
    <span>}</span><span>,</span> <span>0</span> <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>ajax</span><span>(</span> <span>"http://some.url.1"</span><span>,</span> response <span>)</span><span>;</span>
<span>ajax</span><span>(</span> <span>"http://some.url.2"</span><span>,</span> response <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
</ul>
<h2 id="时间循环与promise"> 时间循环与Promise</h2>
<p>任务队列是<strong>挂在事件循环队列的每个 tick 之后 的一个队列</strong>。</p>
<p>在事件循环的每个 tick 中，可能出现的异步动作不会导致一个完整的新事件添加到事件循环队列中，而会在当前 tick 的任务队列末尾添加一个项目(一个任务)。</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span> <span>"A"</span> <span>)</span><span>;</span>
<span>setTimeout</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"B"</span> <span>)</span><span>;</span>
<span>}</span><span>,</span> <span>0</span> <span>)</span><span>;</span>
<span>// 理论上的"任务API"</span>
<span>schedule</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span>
  console<span>.</span><span>log</span><span>(</span> <span>"C"</span> <span>)</span><span>;</span>
  <span>schedule</span><span>(</span> <span>function</span><span>(</span><span>)</span><span>{</span>
    console<span>.</span><span>log</span><span>(</span> <span>"D"</span> <span>)</span><span>;</span>
  <span>}</span> <span>)</span><span>;</span>
<span>}</span> <span>)</span><span>;</span>

<span>// 实际打印的结果是 A C D B</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>Promise 的异步特性是<strong>基于任务</strong>的，所以一定要清楚它和事件循环特性的关系。</p>
<h2 id="小结"> 小结</h2>
<p>JavaScript 程序总是至少分为两个块：第一块现在运行;下一块将来运行，以响应某个事件。</p>
<p>JavaScript中处理异步事件的机制是<strong>事件循环</strong>。一旦有事件需要运行，事件循环就会运行，直到队列清空。事件循环的每一轮称为一个 tick。</p>
<p><strong>注意理解以下几个词</strong></p>
<ul>
<li>
<p>异步：<strong>异步的意义在于时间上的异步</strong>，一部分现在运行，一部分将来运行。通常见于一些等待的情况，比如用户交互、IO 和定时器。</p>
</li>
<li>
<p>并行：并行和异步是完全不同的，<strong>并行是关于能够同时发生的事情</strong>。并行计算最常见的工具就是进程和线程。</p>
</li>
<li>
<p>并发</p>
<p>并发关注任务的数量，平时说的“高并发”是指能“同时”处理大量任务，比如高并发服务器能接收大量的网络请求。</p>
<p>但是注意“同时”的意思，他可以是”同一时刻“，比如每个请求创建一个线程来处理（虽然这样不会很高效）；也可以是”几乎同时“，比如单线程的Nodejs服务器，只要足够快，也可认为是高并发。因此<strong>单线程事件循环是并发的一种形式。</strong></p>
<p>针对并发的任务来说，每个任务之间的关系又有“非交互”、“交互”、“协作”三种。</p>
</li>
<li>
<p>任务：Promise 的异步特性是<strong>基于任务</strong>的，相当于每个事件循环的tick中可以包含多个小任务。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-04-12T04:04:01.000Z</published>
  </entry>
  <entry>
    <title type="html">作用域与编译器</title>
    <id>https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-1%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8/</id>
    <link href="https://melogra.github.io/blog/YDKJS%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89/1-1%20%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <updated>2021-04-22T15:07:00.000Z</updated>
    <content type="html"><![CDATA[<h1 id="作用域与编译器"> 作用域与编译器</h1>
<h2 id="作用域"> 作用域</h2>
<p>几乎所有编程语言的基本功能之一，就是能够存储变量中的值，并且能够对其进行访问和修改。这种对变量的存储和访问的能力将<strong>状态</strong>带给了程序。</p>
<p>变量存储在哪里、如何找到它们、如何修改它的值······这些问题使得我们需要设计一套规则来存储变量，并在这之后访问变量，<strong>这套规则称为作用域</strong>。</p>
<h3 id="编译原理"> 编译原理</h3>
<p>尽管<code>JavaScript</code>通常被归类为“动态”或“解释执行”的语言，事实上她是一门编译语言。但与传统编译语言不同，她不是提前编译的，编译结果也不能在分布式系统中传播。</p>
<blockquote>
<p>传统编译语言流程：</p>
<ul>
<li>
<p>分词/词法分析(Tokenizing/Lexing)</p>
<p>这个过程会将由字符组成的字符串分解为（对编程语言来说）有意义的代码块，这些代码块被称为词法单元（token）。例如，考虑程序<code>let a = 2;</code>,这段程序会被分解为<code>let</code>、<code>a</code>、<code>=</code>、<code>2</code>、<code>;</code>。</p>
</li>
<li>
<p>语法分析(Parsing)</p>
<p>这个过程会将词法单元流（token流数组）转换为一个由元素逐级嵌套组成的代表了程序语法结构的树，称之为<strong>抽象语法树（Abstract Syntax Tree, AST）</strong>。<code>let a = 2;</code>这段程序的AST中可能存在一个***VariableDeclaration***的顶级节点，然后会有一个***Identifier***的子节点，它的值是<code>a</code>，以及一个***AssignmentExpression***的子节点，***AssignmentExpression***节点有一个***NumericLiteral***的子节点，它的值是<code>2</code>。</p>
<Mermaid id="mermaid_382ee18b" :graph="$dataBlock.mermaid_382ee18b"></Mermaid></li>
<li>
<p>代码生成</p>
<p>将AST转换为可执行代码的过程称为代码生成。这个过程与语言、目标平台息息相关。简单来说，代码生成过程就是将AST转换为一组机器指令，可以创建一个叫做<code>a</code>的变量（包括分配内存等底层操作），并将值 <code>2</code> 存储在 <code>a</code> 中。</p>
</li>
</ul>
</blockquote>
<p>与其他传统编译器相比，JavaScript引擎可能要更加复杂，比如，在<strong>语法分析</strong>和<strong>代码生成</strong>阶段有特定的步骤对运行性能进行优化，包括<strong>对冗余元素进行优化</strong>等。</p>
<p>然而，JavaScript引擎不会像其他编译器一样有太多的时间进行优化，因为JavaScript的编译过程通常发生在代码执行的前几微秒内甚至更短。在这期间，JavaScript 引擎用尽了各种办法(比如 <em><strong>JIT</strong></em>，可以延迟编译甚至实施重编译)来保证性能最佳。</p>
<p>总的来说，<strong>任何JavaScript代码在执行前都需要编译</strong>（通常就在执行前），JavaScript编译器会对程序进行编译，并准备执行它，通常马上就会执行。</p>
<h2 id="理解作用域"> 理解作用域</h2>
<blockquote>
<p>参与JavaScript代码的编译和执行的几个对象：</p>
<ul>
<li>
<p>引擎</p>
<p>从头到尾负责整个JavaScript程序的编译和执行过程</p>
</li>
<li>
<p>编译器</p>
<p>负责语法分析和代码生成</p>
</li>
<li>
<p>作用域</p>
<p>负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限</p>
</li>
</ul>
</blockquote>
<p>以<code>var a = 2;</code>这段代码为例，编译器会对其进行词法分析，得到token流，然后抽象成AST，在进行代码生成时，会进行如下操作：</p>
<ol>
<li>
<p>遇到<code>var a</code>，编译器会询问作用域是否已有一个相同名称的变量存在于相同作用域的集合中，</p>
<p>如果有，则忽略该声明并继续编译；</p>
<p>如果没有，它会要求作用域在当前作用域的集合中声明一个新的变量，命名为 <code>a</code>。</p>
</li>
<li>
<p>接下来编译器会为引擎生成运行时所需的代码，这些代码被用来处理 <code>a = 2</code> 这个赋值操作。</p>
<p>引擎运行时会首先询问作用域，在当前的作用域集合中是否存在名为 <code>a</code> 的变量，如果有，则使用这个变量，否则继续查找。</p>
<p>如果最终找到变量 <code>a</code>，就会将<code>2</code> 赋值给它，否则引擎抛出一个异常。</p>
</li>
</ol>
<p><strong>总结：变量的赋值操作会进行两个动作，首先编译器会在当前作用域中声明一个变量(如果之前没有声明过)，然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。</strong></p>
<i>Not supported content</i><h3 id="lhs和rhs"> LHS和RHS</h3>
<p>为便于记忆，可以分别认为<strong>LHS</strong>和<strong>RHS</strong>是一个赋值操作的左侧和右侧进行的查询，换句话说，当变量出现在赋值操作的左侧时进行 LHS 查询，出现在右侧时进行 RHS 查询。</p>
<p>针对<code>var a = b;</code>这段代码，会进行<strong>RHS</strong>查询得到 <code>b</code> 的值，进行<strong>LHS</strong>查询是否存在变量 <code>a</code>，从而进行赋值。</p>
<p>准确的说，RHS 查询与简单地查找某个变量的值相同，而 LHS 查询则是试图找到变量的容器本身，从而可以对其赋值。</p>
<p>从这个角度说，RHS 并不是真正意义上的“赋值操作的右侧”，更准确地说是“非左侧”。</p>
<p>针对代码:</p>
<div><pre><code><span>1</span><span>:</span> <span>function</span> <span>foo</span><span>(</span><span>a</span><span>)</span> <span>{</span>
<span>2</span><span>:</span>  console<span>.</span><span>log</span><span>(</span> a <span>)</span><span>;</span> <span>// 2</span>
<span>3</span><span>:</span> <span>}</span>
<span>4</span><span>:</span> <span>foo</span><span>(</span> <span>2</span> <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>
<p>第4行中需要对foo进行<strong>RHS</strong>查询，得到foo函数；</p>
</li>
<li>
<p>第1行中a作为型参，当调用foo函数时，会隐式地有 <code>a = 2</code>的操作，因此，这里要对a进行<strong>LHS</strong>查询。</p>
</li>
<li>
<p>第2行中，需要对a进行<strong>RHS</strong>查询从而将a的值传给<code>console.log</code>。</p>
<p>当然，要得到 <code>log</code> 函数，会对 console 对象进行 <strong>RHS</strong> 查询，并且检查得到的值中是否有一个叫作 log 的方法。</p>
</li>
</ul>
<h3 id="作用域嵌套"> 作用域嵌套</h3>
<p>我们说过，<strong>作用域是根据名称查找变量的一套规则</strong>。实际情况中，通常需要同时顾及几个作用域。</p>
<p>当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域(也就是全局作用域)为止。</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gmbpi4c04aj30bm06yq31.jpg" alt="image-20210104154329370" /></p>
<h4 id="作用域相关的异常"> 作用域相关的异常</h4>
<ul>
<li>
<p>如果<strong>RHS</strong>在所有嵌套的作用域中找不到所需变量，那么会抛出一个 <em><strong>ReferenceError</strong></em> 异常，这是一个很重要的异常类型。</p>
</li>
<li>
<p>如果<strong>LHS</strong>最终在全局作用域中找不到所需变量，那么</p>
<ul>
<li>在<strong>非严格模式</strong>下，<strong>全局作用域</strong>中会创建一个同名变量并返回给引擎。</li>
<li><strong>严格模式</strong>下，不会创建全局变量，而是抛出 <em><strong>ReferenceError</strong></em> 异常。</li>
</ul>
</li>
<li>
<p>如果<strong>RHS</strong>查询到一个变量，但是尝试对其进行错误操作，比如对一个非函数类型进行函数调用，则抛出 <em><strong>TypeError</strong></em> 异常。</p>
</li>
<li>
<p><em><strong>ReferenceError</strong></em> 同作用域判别失败相关，而 <em><strong>TypeError</strong></em> 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</p>
</li>
</ul>
<h2 id="总结"> 总结</h2>
<p>作用域是一套规则，用于确定在何处以及如何查找变量(标识符)。</p>
<p>如果查找的目的是对变量进行赋值，那么就会使用 LHS 查询;如果目的是获取变量的值，就会使用 RHS 查询。</p>
<p>赋值操作符会导致 LHS 查询。<code>=</code> 操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作。</p>
<ul>
<li>
<p>JavaScript引擎首先会在代码执行前对其进行编译，在这个过程中，像 <code>var a = 2</code> 这样的声明会被分解成两个独立的步骤:</p>
<ol>
<li>
<p>首先，<code>var a</code> 在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。</p>
</li>
<li>
<p>接下来，<code>a = 2</code> 会查询(LHS 查询)变量 <code>a</code> 并对其进行赋值。</p>
</li>
</ol>
</li>
<li>
<p>LHS 和 RHS 查询都会在当前执行作用域中开始，逐级往上，最后抵达全局作用域，无论找到或没找到都将停止。</p>
</li>
<li>
<p>不成功的 RHS 引用会导致抛出 <em><strong>ReferenceError</strong></em> 异常。不成功的 LHS 引用会导致自动隐式地创建一个全局变量(<strong>非严格模式下</strong>)，该变量使用 LHS 引用的目标作为标识符，或者抛出 <em><strong>ReferenceError</strong></em> 异常(<strong>严格模式</strong>下)。</p>
</li>
</ul>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-01-20T13:34:18.000Z</published>
  </entry>
  <entry>
    <title type="html">什么是计算机</title>
    <id>https://melogra.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%A1%E7%AE%97%E6%9C%BA/</id>
    <link href="https://melogra.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    <updated>2021-07-09T15:57:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="什么是计算机"> 什么是计算机</h1>
<h2 id="图灵机"> 图灵机</h2>
<h2 id="冯诺依曼结构"> 冯诺依曼结构</h2>
<h3 id="运算器"> 运算器</h3>
<h3 id="控制器"> 控制器</h3>
<h3 id="i-o"> I / O</h3>
<h3 id="存储设备"> 存储设备</h3>
]]></content>
    <contributor>
      <name/>
    </contributor>
    <published>2021-07-07T13:47:47.000Z</published>
  </entry>
</feed>